
c8t6coreboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6a4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800a7b4  0800a7b4  0000b7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a89c  0800a89c  0000c1cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a89c  0800a89c  0000c1cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a89c  0800a89c  0000c1cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a89c  0800a89c  0000b89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a8a0  0800a8a0  0000b8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001cc  20000000  0800a8a4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001380  200001cc  0800aa70  0000c1cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000154c  0800aa70  0000c54c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f185  00000000  00000000  0000c1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1f  00000000  00000000  0001b37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0001e1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a02  00000000  00000000  0001eef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ebb  00000000  00000000  0001f8fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012636  00000000  00000000  000387b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000873c2  00000000  00000000  0004adeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d21ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c58  00000000  00000000  000d21f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d5e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001cc 	.word	0x200001cc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a79c 	.word	0x0800a79c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d0 	.word	0x200001d0
 800014c:	0800a79c 	.word	0x0800a79c

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	@ 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__aeabi_d2uiz>:
 8000a54:	004a      	lsls	r2, r1, #1
 8000a56:	d211      	bcs.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a58:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a5c:	d211      	bcs.n	8000a82 <__aeabi_d2uiz+0x2e>
 8000a5e:	d50d      	bpl.n	8000a7c <__aeabi_d2uiz+0x28>
 8000a60:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a68:	d40e      	bmi.n	8000a88 <__aeabi_d2uiz+0x34>
 8000a6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a76:	fa23 f002 	lsr.w	r0, r3, r2
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d102      	bne.n	8000a8e <__aeabi_d2uiz+0x3a>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	4770      	bx	lr
 8000a8e:	f04f 0000 	mov.w	r0, #0
 8000a92:	4770      	bx	lr

08000a94 <__aeabi_d2f>:
 8000a94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a98:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a9c:	bf24      	itt	cs
 8000a9e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aa2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aa6:	d90d      	bls.n	8000ac4 <__aeabi_d2f+0x30>
 8000aa8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ab4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ab8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000abc:	bf08      	it	eq
 8000abe:	f020 0001 	biceq.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ac8:	d121      	bne.n	8000b0e <__aeabi_d2f+0x7a>
 8000aca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ace:	bfbc      	itt	lt
 8000ad0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ad4:	4770      	bxlt	lr
 8000ad6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ada:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ade:	f1c2 0218 	rsb	r2, r2, #24
 8000ae2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ae6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aea:	fa20 f002 	lsr.w	r0, r0, r2
 8000aee:	bf18      	it	ne
 8000af0:	f040 0001 	orrne.w	r0, r0, #1
 8000af4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000afc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b00:	ea40 000c 	orr.w	r0, r0, ip
 8000b04:	fa23 f302 	lsr.w	r3, r3, r2
 8000b08:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b0c:	e7cc      	b.n	8000aa8 <__aeabi_d2f+0x14>
 8000b0e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b12:	d107      	bne.n	8000b24 <__aeabi_d2f+0x90>
 8000b14:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b18:	bf1e      	ittt	ne
 8000b1a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b1e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b22:	4770      	bxne	lr
 8000b24:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_frsub>:
 8000b34:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b38:	e002      	b.n	8000b40 <__addsf3>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_fsub>:
 8000b3c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b40 <__addsf3>:
 8000b40:	0042      	lsls	r2, r0, #1
 8000b42:	bf1f      	itttt	ne
 8000b44:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b48:	ea92 0f03 	teqne	r2, r3
 8000b4c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b50:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b54:	d06a      	beq.n	8000c2c <__addsf3+0xec>
 8000b56:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b5a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b5e:	bfc1      	itttt	gt
 8000b60:	18d2      	addgt	r2, r2, r3
 8000b62:	4041      	eorgt	r1, r0
 8000b64:	4048      	eorgt	r0, r1
 8000b66:	4041      	eorgt	r1, r0
 8000b68:	bfb8      	it	lt
 8000b6a:	425b      	neglt	r3, r3
 8000b6c:	2b19      	cmp	r3, #25
 8000b6e:	bf88      	it	hi
 8000b70:	4770      	bxhi	lr
 8000b72:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b76:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b7e:	bf18      	it	ne
 8000b80:	4240      	negne	r0, r0
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b8a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b8e:	bf18      	it	ne
 8000b90:	4249      	negne	r1, r1
 8000b92:	ea92 0f03 	teq	r2, r3
 8000b96:	d03f      	beq.n	8000c18 <__addsf3+0xd8>
 8000b98:	f1a2 0201 	sub.w	r2, r2, #1
 8000b9c:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba0:	eb10 000c 	adds.w	r0, r0, ip
 8000ba4:	f1c3 0320 	rsb	r3, r3, #32
 8000ba8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bac:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb0:	d502      	bpl.n	8000bb8 <__addsf3+0x78>
 8000bb2:	4249      	negs	r1, r1
 8000bb4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bbc:	d313      	bcc.n	8000be6 <__addsf3+0xa6>
 8000bbe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bc2:	d306      	bcc.n	8000bd2 <__addsf3+0x92>
 8000bc4:	0840      	lsrs	r0, r0, #1
 8000bc6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bca:	f102 0201 	add.w	r2, r2, #1
 8000bce:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd0:	d251      	bcs.n	8000c76 <__addsf3+0x136>
 8000bd2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bda:	bf08      	it	eq
 8000bdc:	f020 0001 	biceq.w	r0, r0, #1
 8000be0:	ea40 0003 	orr.w	r0, r0, r3
 8000be4:	4770      	bx	lr
 8000be6:	0049      	lsls	r1, r1, #1
 8000be8:	eb40 0000 	adc.w	r0, r0, r0
 8000bec:	3a01      	subs	r2, #1
 8000bee:	bf28      	it	cs
 8000bf0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bf4:	d2ed      	bcs.n	8000bd2 <__addsf3+0x92>
 8000bf6:	fab0 fc80 	clz	ip, r0
 8000bfa:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bfe:	ebb2 020c 	subs.w	r2, r2, ip
 8000c02:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c06:	bfaa      	itet	ge
 8000c08:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c0c:	4252      	neglt	r2, r2
 8000c0e:	4318      	orrge	r0, r3
 8000c10:	bfbc      	itt	lt
 8000c12:	40d0      	lsrlt	r0, r2
 8000c14:	4318      	orrlt	r0, r3
 8000c16:	4770      	bx	lr
 8000c18:	f092 0f00 	teq	r2, #0
 8000c1c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c20:	bf06      	itte	eq
 8000c22:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c26:	3201      	addeq	r2, #1
 8000c28:	3b01      	subne	r3, #1
 8000c2a:	e7b5      	b.n	8000b98 <__addsf3+0x58>
 8000c2c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c30:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c34:	bf18      	it	ne
 8000c36:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3a:	d021      	beq.n	8000c80 <__addsf3+0x140>
 8000c3c:	ea92 0f03 	teq	r2, r3
 8000c40:	d004      	beq.n	8000c4c <__addsf3+0x10c>
 8000c42:	f092 0f00 	teq	r2, #0
 8000c46:	bf08      	it	eq
 8000c48:	4608      	moveq	r0, r1
 8000c4a:	4770      	bx	lr
 8000c4c:	ea90 0f01 	teq	r0, r1
 8000c50:	bf1c      	itt	ne
 8000c52:	2000      	movne	r0, #0
 8000c54:	4770      	bxne	lr
 8000c56:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c5a:	d104      	bne.n	8000c66 <__addsf3+0x126>
 8000c5c:	0040      	lsls	r0, r0, #1
 8000c5e:	bf28      	it	cs
 8000c60:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c64:	4770      	bx	lr
 8000c66:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c6a:	bf3c      	itt	cc
 8000c6c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c70:	4770      	bxcc	lr
 8000c72:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c76:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c7e:	4770      	bx	lr
 8000c80:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c84:	bf16      	itet	ne
 8000c86:	4608      	movne	r0, r1
 8000c88:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c8c:	4601      	movne	r1, r0
 8000c8e:	0242      	lsls	r2, r0, #9
 8000c90:	bf06      	itte	eq
 8000c92:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c96:	ea90 0f01 	teqeq	r0, r1
 8000c9a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_ui2f>:
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	e004      	b.n	8000cb0 <__aeabi_i2f+0x8>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_i2f>:
 8000ca8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cac:	bf48      	it	mi
 8000cae:	4240      	negmi	r0, r0
 8000cb0:	ea5f 0c00 	movs.w	ip, r0
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cbc:	4601      	mov	r1, r0
 8000cbe:	f04f 0000 	mov.w	r0, #0
 8000cc2:	e01c      	b.n	8000cfe <__aeabi_l2f+0x2a>

08000cc4 <__aeabi_ul2f>:
 8000cc4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc8:	bf08      	it	eq
 8000cca:	4770      	bxeq	lr
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e00a      	b.n	8000ce8 <__aeabi_l2f+0x14>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_l2f>:
 8000cd4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce0:	d502      	bpl.n	8000ce8 <__aeabi_l2f+0x14>
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	ea5f 0c01 	movs.w	ip, r1
 8000cec:	bf02      	ittt	eq
 8000cee:	4684      	moveq	ip, r0
 8000cf0:	4601      	moveq	r1, r0
 8000cf2:	2000      	moveq	r0, #0
 8000cf4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cf8:	bf08      	it	eq
 8000cfa:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d02:	fabc f28c 	clz	r2, ip
 8000d06:	3a08      	subs	r2, #8
 8000d08:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d0c:	db10      	blt.n	8000d30 <__aeabi_l2f+0x5c>
 8000d0e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d12:	4463      	add	r3, ip
 8000d14:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d20:	fa20 f202 	lsr.w	r2, r0, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	f020 0001 	biceq.w	r0, r0, #1
 8000d2e:	4770      	bx	lr
 8000d30:	f102 0220 	add.w	r2, r2, #32
 8000d34:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d38:	f1c2 0220 	rsb	r2, r2, #32
 8000d3c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d40:	fa21 f202 	lsr.w	r2, r1, r2
 8000d44:	eb43 0002 	adc.w	r0, r3, r2
 8000d48:	bf08      	it	eq
 8000d4a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_f2iz>:
 8000d50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d54:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d58:	d30f      	bcc.n	8000d7a <__aeabi_f2iz+0x2a>
 8000d5a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d5e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d62:	d90d      	bls.n	8000d80 <__aeabi_f2iz+0x30>
 8000d64:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d6c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d70:	fa23 f002 	lsr.w	r0, r3, r2
 8000d74:	bf18      	it	ne
 8000d76:	4240      	negne	r0, r0
 8000d78:	4770      	bx	lr
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	4770      	bx	lr
 8000d80:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d84:	d101      	bne.n	8000d8a <__aeabi_f2iz+0x3a>
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	d105      	bne.n	8000d96 <__aeabi_f2iz+0x46>
 8000d8a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d8e:	bf08      	it	eq
 8000d90:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000d94:	4770      	bx	lr
 8000d96:	f04f 0000 	mov.w	r0, #0
 8000d9a:	4770      	bx	lr
 8000d9c:	0000      	movs	r0, r0
	...

08000da0 <AHT20_Read>:

#define AHT_ADDR	0x38<<1
#define HI2C      hi2c1

void AHT20_Read(float* Temp, float* Humid)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	@ 0x28
 8000da4:	af04      	add	r7, sp, #16
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
	uint8_t dum[6];
	HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
 8000daa:	2364      	movs	r3, #100	@ 0x64
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	2301      	movs	r3, #1
 8000db0:	9301      	str	r3, [sp, #4]
 8000db2:	f107 0308 	add.w	r3, r7, #8
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2301      	movs	r3, #1
 8000dba:	2271      	movs	r2, #113	@ 0x71
 8000dbc:	2170      	movs	r1, #112	@ 0x70
 8000dbe:	484c      	ldr	r0, [pc, #304]	@ (8000ef0 <AHT20_Read+0x150>)
 8000dc0:	f001 fbac 	bl	800251c <HAL_I2C_Mem_Read>

	if(!(dum[0]&(1<<3)))
 8000dc4:	7a3b      	ldrb	r3, [r7, #8]
 8000dc6:	f003 0308 	and.w	r3, r3, #8
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d111      	bne.n	8000df2 <AHT20_Read+0x52>
	{
		dum[0] = 0xBE, dum[1] = 0x08, dum[2] = 0x00;
 8000dce:	23be      	movs	r3, #190	@ 0xbe
 8000dd0:	723b      	strb	r3, [r7, #8]
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	727b      	strb	r3, [r7, #9]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	72bb      	strb	r3, [r7, #10]
		HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
 8000dda:	f107 0208 	add.w	r2, r7, #8
 8000dde:	2364      	movs	r3, #100	@ 0x64
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2303      	movs	r3, #3
 8000de4:	2170      	movs	r1, #112	@ 0x70
 8000de6:	4842      	ldr	r0, [pc, #264]	@ (8000ef0 <AHT20_Read+0x150>)
 8000de8:	f001 f82e 	bl	8001e48 <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f000 fc19 	bl	8001624 <HAL_Delay>
	}

	dum[0] = 0xAC, dum[1] = 0x33, dum[2] = 0x00;
 8000df2:	23ac      	movs	r3, #172	@ 0xac
 8000df4:	723b      	strb	r3, [r7, #8]
 8000df6:	2333      	movs	r3, #51	@ 0x33
 8000df8:	727b      	strb	r3, [r7, #9]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	72bb      	strb	r3, [r7, #10]
	HAL_I2C_Master_Transmit(&HI2C, AHT_ADDR, dum, 3, 100);
 8000dfe:	f107 0208 	add.w	r2, r7, #8
 8000e02:	2364      	movs	r3, #100	@ 0x64
 8000e04:	9300      	str	r3, [sp, #0]
 8000e06:	2303      	movs	r3, #3
 8000e08:	2170      	movs	r1, #112	@ 0x70
 8000e0a:	4839      	ldr	r0, [pc, #228]	@ (8000ef0 <AHT20_Read+0x150>)
 8000e0c:	f001 f81c 	bl	8001e48 <HAL_I2C_Master_Transmit>
	HAL_Delay(80);
 8000e10:	2050      	movs	r0, #80	@ 0x50
 8000e12:	f000 fc07 	bl	8001624 <HAL_Delay>

	do {
		HAL_I2C_Mem_Read(&HI2C, AHT_ADDR, 0x71, 1, dum, 1, 100);
 8000e16:	2364      	movs	r3, #100	@ 0x64
 8000e18:	9302      	str	r3, [sp, #8]
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2301      	movs	r3, #1
 8000e26:	2271      	movs	r2, #113	@ 0x71
 8000e28:	2170      	movs	r1, #112	@ 0x70
 8000e2a:	4831      	ldr	r0, [pc, #196]	@ (8000ef0 <AHT20_Read+0x150>)
 8000e2c:	f001 fb76 	bl	800251c <HAL_I2C_Mem_Read>
		HAL_Delay(1);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f000 fbf7 	bl	8001624 <HAL_Delay>
	} while(dum[0]&(1<<7));
 8000e36:	7a3b      	ldrb	r3, [r7, #8]
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	dbeb      	blt.n	8000e16 <AHT20_Read+0x76>

	HAL_I2C_Master_Receive(&HI2C, AHT_ADDR, dum, 6, 100);
 8000e3e:	f107 0208 	add.w	r2, r7, #8
 8000e42:	2364      	movs	r3, #100	@ 0x64
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2306      	movs	r3, #6
 8000e48:	2170      	movs	r1, #112	@ 0x70
 8000e4a:	4829      	ldr	r0, [pc, #164]	@ (8000ef0 <AHT20_Read+0x150>)
 8000e4c:	f001 f8fa 	bl	8002044 <HAL_I2C_Master_Receive>
	uint32_t h20 = (dum[1])<<12 | (dum[2])<<4 | (dum[3]>>4);
 8000e50:	7a7b      	ldrb	r3, [r7, #9]
 8000e52:	031a      	lsls	r2, r3, #12
 8000e54:	7abb      	ldrb	r3, [r7, #10]
 8000e56:	011b      	lsls	r3, r3, #4
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	7afa      	ldrb	r2, [r7, #11]
 8000e5c:	0912      	lsrs	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	4313      	orrs	r3, r2
 8000e62:	617b      	str	r3, [r7, #20]
	uint32_t t20 = (dum[3]&0x0F)<<16 | (dum[4])<<8 | dum[5];
 8000e64:	7afb      	ldrb	r3, [r7, #11]
 8000e66:	041b      	lsls	r3, r3, #16
 8000e68:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8000e6c:	7b3b      	ldrb	r3, [r7, #12]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	4313      	orrs	r3, r2
 8000e72:	7b7a      	ldrb	r2, [r7, #13]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
	*Temp = (t20 / 1048576.0)*200.0 - 50.0;
 8000e78:	6938      	ldr	r0, [r7, #16]
 8000e7a:	f7ff fb5f 	bl	800053c <__aeabi_ui2d>
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <AHT20_Read+0x154>)
 8000e84:	f7ff fcfe 	bl	8000884 <__aeabi_ddiv>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <AHT20_Read+0x158>)
 8000e96:	f7ff fbcb 	bl	8000630 <__aeabi_dmul>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	4610      	mov	r0, r2
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f04f 0200 	mov.w	r2, #0
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <AHT20_Read+0x15c>)
 8000ea8:	f7ff fa0a 	bl	80002c0 <__aeabi_dsub>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f7ff fdee 	bl	8000a94 <__aeabi_d2f>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	601a      	str	r2, [r3, #0]
	*Humid = h20 / 10485.76;
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff fb3c 	bl	800053c <__aeabi_ui2d>
 8000ec4:	a308      	add	r3, pc, #32	@ (adr r3, 8000ee8 <AHT20_Read+0x148>)
 8000ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eca:	f7ff fcdb 	bl	8000884 <__aeabi_ddiv>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f7ff fddd 	bl	8000a94 <__aeabi_d2f>
 8000eda:	4602      	mov	r2, r0
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	47ae147b 	.word	0x47ae147b
 8000eec:	40c47ae1 	.word	0x40c47ae1
 8000ef0:	200001e8 	.word	0x200001e8
 8000ef4:	41300000 	.word	0x41300000
 8000ef8:	40690000 	.word	0x40690000
 8000efc:	40490000 	.word	0x40490000

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b0b1      	sub	sp, #196	@ 0xc4
 8000f04:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 fb2b 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 f93b 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f000 f9c1 	bl	8001294 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f12:	f000 f991 	bl	8001238 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000f16:	f008 faf5 	bl	8009504 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(2000);
 8000f1a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f1e:	f000 fb81 	bl	8001624 <HAL_Delay>
    uint8_t data[2];
    data[0] = 0x03;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
    data[1] = 0x00;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
    uint8_t receive[9];
    HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f34:	488e      	ldr	r0, [pc, #568]	@ (8001170 <main+0x270>)
 8000f36:	f000 fe2b 	bl	8001b90 <HAL_GPIO_WritePin>

    HAL_I2C_Master_Transmit(&hi2c1,0x54,data,2,0xFF);
 8000f3a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8000f3e:	23ff      	movs	r3, #255	@ 0xff
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2302      	movs	r3, #2
 8000f44:	2154      	movs	r1, #84	@ 0x54
 8000f46:	488b      	ldr	r0, [pc, #556]	@ (8001174 <main+0x274>)
 8000f48:	f000 ff7e 	bl	8001e48 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1,0x54,receive,9,0xFF);
 8000f4c:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000f50:	23ff      	movs	r3, #255	@ 0xff
 8000f52:	9300      	str	r3, [sp, #0]
 8000f54:	2309      	movs	r3, #9
 8000f56:	2154      	movs	r1, #84	@ 0x54
 8000f58:	4886      	ldr	r0, [pc, #536]	@ (8001174 <main+0x274>)
 8000f5a:	f001 f873 	bl	8002044 <HAL_I2C_Master_Receive>

	int co2 = receive[0];
 8000f5e:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8000f62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	co2 <<= 8;
 8000f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	co2 |= receive[1];
 8000f70:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8000f74:	461a      	mov	r2, r3
 8000f76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	co2 <<= 8;
 8000f80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	co2 |= receive[3];
 8000f8a:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000f8e:	461a      	mov	r2, r3
 8000f90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f94:	4313      	orrs	r3, r2
 8000f96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	co2 <<= 8;
 8000f9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000f9e:	021b      	lsls	r3, r3, #8
 8000fa0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	co2 |= receive[4];
 8000fa4:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	uint16_t temperature = receive[6] << 8 | receive[7];
 8000fb4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b21a      	sxth	r2, r3
 8000fbc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	b21b      	sxth	r3, r3
 8000fc6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
	temperature = (temperature - 3200) / 1.8;
 8000fca:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000fce:	f5a3 6348 	sub.w	r3, r3, #3200	@ 0xc80
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fac2 	bl	800055c <__aeabi_i2d>
 8000fd8:	a363      	add	r3, pc, #396	@ (adr r3, 8001168 <main+0x268>)
 8000fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fde:	f7ff fc51 	bl	8000884 <__aeabi_ddiv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fd33 	bl	8000a54 <__aeabi_d2uiz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e


//	data[0] = 0x00;
//	status = HAL_I2C_Master_Transmit(&hi2c1,0x34,data,1,0xFF);

	HAL_I2C_Master_Receive(&hi2c1,0x34,receive,5,0xFF);
 8000ff4:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 8000ff8:	23ff      	movs	r3, #255	@ 0xff
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2305      	movs	r3, #5
 8000ffe:	2134      	movs	r1, #52	@ 0x34
 8001000:	485c      	ldr	r0, [pc, #368]	@ (8001174 <main+0x274>)
 8001002:	f001 f81f 	bl	8002044 <HAL_I2C_Master_Receive>

	uint8_t tvocReady = (receive[0] & 1) == 0;
 8001006:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf0c      	ite	eq
 8001012:	2301      	moveq	r3, #1
 8001014:	2300      	movne	r3, #0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
	int tvoc = -1;
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	if(tvocReady){
 8001024:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8001028:	2b00      	cmp	r3, #0
 800102a:	d01d      	beq.n	8001068 <main+0x168>
		tvoc = receive[1];
 800102c:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 8001030:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		tvoc <<=8;
 8001034:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		tvoc |= receive[2];
 800103e:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001042:	461a      	mov	r2, r3
 8001044:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001048:	4313      	orrs	r3, r2
 800104a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		tvoc <<=8;
 800104e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		tvoc |= receive[3];
 8001058:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800105c:	461a      	mov	r2, r3
 800105e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001062:	4313      	orrs	r3, r2
 8001064:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	}
	float temp,humid;
	AHT20_Read(&temp,&humid);
 8001068:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800106c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fe94 	bl	8000da0 <AHT20_Read>


//	int t1 = temperature / 100;
//	int t2 = (temperature - t1) * 100;

	int v1 = tvoc / 1000;
 8001078:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800107c:	4a3e      	ldr	r2, [pc, #248]	@ (8001178 <main+0x278>)
 800107e:	fb82 1203 	smull	r1, r2, r2, r3
 8001082:	1192      	asrs	r2, r2, #6
 8001084:	17db      	asrs	r3, r3, #31
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	int v2 = (tvoc - v1) * 1000;
 800108c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8001090:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	int te1 = temp;
 80010a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fe53 	bl	8000d50 <__aeabi_f2iz>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	int te2 = (temp - te1) * 100;
 80010b0:	6efc      	ldr	r4, [r7, #108]	@ 0x6c
 80010b2:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80010b6:	f7ff fdf7 	bl	8000ca8 <__aeabi_i2f>
 80010ba:	4603      	mov	r3, r0
 80010bc:	4619      	mov	r1, r3
 80010be:	4620      	mov	r0, r4
 80010c0:	f7ff fd3c 	bl	8000b3c <__aeabi_fsub>
 80010c4:	4603      	mov	r3, r0
 80010c6:	492d      	ldr	r1, [pc, #180]	@ (800117c <main+0x27c>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff f841 	bl	8000150 <__aeabi_fmul>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fe3d 	bl	8000d50 <__aeabi_f2iz>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	int h1 = humid;
 80010dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fe36 	bl	8000d50 <__aeabi_f2iz>
 80010e4:	4603      	mov	r3, r0
 80010e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	int h2 = (humid - h1) * 100;
 80010ea:	6ebc      	ldr	r4, [r7, #104]	@ 0x68
 80010ec:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 80010f0:	f7ff fdda 	bl	8000ca8 <__aeabi_i2f>
 80010f4:	4603      	mov	r3, r0
 80010f6:	4619      	mov	r1, r3
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff fd1f 	bl	8000b3c <__aeabi_fsub>
 80010fe:	4603      	mov	r3, r0
 8001100:	491e      	ldr	r1, [pc, #120]	@ (800117c <main+0x27c>)
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f824 	bl	8000150 <__aeabi_fmul>
 8001108:	4603      	mov	r3, r0
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe20 	bl	8000d50 <__aeabi_f2iz>
 8001110:	4603      	mov	r3, r0
 8001112:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

	char buf[100];
	int len = sprintf(buf,"CO2:%d ppm TVOC:%d.%d ppm Temperature:%d.%d Humidity:%d.%d%%\n",
 8001116:	1d38      	adds	r0, r7, #4
 8001118:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800111c:	9304      	str	r3, [sp, #16]
 800111e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001122:	9303      	str	r3, [sp, #12]
 8001124:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800113a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800113e:	4910      	ldr	r1, [pc, #64]	@ (8001180 <main+0x280>)
 8001140:	f008 fe7c 	bl	8009e3c <siprintf>
 8001144:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
			co2,v1,v2,te1,te2,h1,h2);

	CDC_Transmit_FS(buf, len);
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800114e:	4618      	mov	r0, r3
 8001150:	f008 fa96 	bl	8009680 <CDC_Transmit_FS>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin,GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <main+0x270>)
 800115c:	f000 fd18 	bl	8001b90 <HAL_GPIO_WritePin>
  {
 8001160:	e6db      	b.n	8000f1a <main+0x1a>
 8001162:	bf00      	nop
 8001164:	f3af 8000 	nop.w
 8001168:	cccccccd 	.word	0xcccccccd
 800116c:	3ffccccc 	.word	0x3ffccccc
 8001170:	40011000 	.word	0x40011000
 8001174:	200001e8 	.word	0x200001e8
 8001178:	10624dd3 	.word	0x10624dd3
 800117c:	42c80000 	.word	0x42c80000
 8001180:	0800a7b4 	.word	0x0800a7b4

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b094      	sub	sp, #80	@ 0x50
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800118e:	2228      	movs	r2, #40	@ 0x28
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f008 fe72 	bl	8009e7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c2:	2301      	movs	r3, #1
 80011c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2302      	movs	r3, #2
 80011c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011d0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 fde0 	bl	8004da0 <HAL_RCC_OscConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011e6:	f000 f8ad 	bl	8001344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ea:	230f      	movs	r3, #15
 80011ec:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ee:	2302      	movs	r3, #2
 80011f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2102      	movs	r1, #2
 8001206:	4618      	mov	r0, r3
 8001208:	f004 f84c 	bl	80052a4 <HAL_RCC_ClockConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001212:	f000 f897 	bl	8001344 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001216:	2310      	movs	r3, #16
 8001218:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4618      	mov	r0, r3
 8001222:	f004 f9b9 	bl	8005598 <HAL_RCCEx_PeriphCLKConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800122c:	f000 f88a 	bl	8001344 <Error_Handler>
  }
}
 8001230:	bf00      	nop
 8001232:	3750      	adds	r7, #80	@ 0x50
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800123c:	4b13      	ldr	r3, [pc, #76]	@ (800128c <MX_I2C1_Init+0x54>)
 800123e:	4a14      	ldr	r2, [pc, #80]	@ (8001290 <MX_I2C1_Init+0x58>)
 8001240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 15000;
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <MX_I2C1_Init+0x54>)
 8001244:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001248:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <MX_I2C1_Init+0x54>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001250:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_I2C1_Init+0x54>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001256:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <MX_I2C1_Init+0x54>)
 8001258:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800125c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <MX_I2C1_Init+0x54>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001264:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_I2C1_Init+0x54>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <MX_I2C1_Init+0x54>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_I2C1_Init+0x54>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001276:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_I2C1_Init+0x54>)
 8001278:	f000 fca2 	bl	8001bc0 <HAL_I2C_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8001282:	f000 f85f 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200001e8 	.word	0x200001e8
 8001290:	40005400 	.word	0x40005400

08001294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129a:	f107 0310 	add.w	r3, r7, #16
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a8:	4b24      	ldr	r3, [pc, #144]	@ (800133c <MX_GPIO_Init+0xa8>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a23      	ldr	r2, [pc, #140]	@ (800133c <MX_GPIO_Init+0xa8>)
 80012ae:	f043 0310 	orr.w	r3, r3, #16
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <MX_GPIO_Init+0xa8>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0310 	and.w	r3, r3, #16
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c0:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <MX_GPIO_Init+0xa8>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a1d      	ldr	r2, [pc, #116]	@ (800133c <MX_GPIO_Init+0xa8>)
 80012c6:	f043 0320 	orr.w	r3, r3, #32
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <MX_GPIO_Init+0xa8>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0320 	and.w	r3, r3, #32
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b18      	ldr	r3, [pc, #96]	@ (800133c <MX_GPIO_Init+0xa8>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a17      	ldr	r2, [pc, #92]	@ (800133c <MX_GPIO_Init+0xa8>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b15      	ldr	r3, [pc, #84]	@ (800133c <MX_GPIO_Init+0xa8>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_GPIO_Init+0xa8>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	4a11      	ldr	r2, [pc, #68]	@ (800133c <MX_GPIO_Init+0xa8>)
 80012f6:	f043 0308 	orr.w	r3, r3, #8
 80012fa:	6193      	str	r3, [r2, #24]
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_GPIO_Init+0xa8>)
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	603b      	str	r3, [r7, #0]
 8001306:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800130e:	480c      	ldr	r0, [pc, #48]	@ (8001340 <MX_GPIO_Init+0xac>)
 8001310:	f000 fc3e 	bl	8001b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001314:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001318:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2302      	movs	r3, #2
 8001324:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0310 	add.w	r3, r7, #16
 800132a:	4619      	mov	r1, r3
 800132c:	4804      	ldr	r0, [pc, #16]	@ (8001340 <MX_GPIO_Init+0xac>)
 800132e:	f000 faab 	bl	8001888 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000
 8001340:	40011000 	.word	0x40011000

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <Error_Handler+0x8>

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <HAL_MspInit+0x5c>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	4a14      	ldr	r2, [pc, #80]	@ (80013ac <HAL_MspInit+0x5c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6193      	str	r3, [r2, #24]
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_MspInit+0x5c>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <HAL_MspInit+0x5c>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a0e      	ldr	r2, [pc, #56]	@ (80013ac <HAL_MspInit+0x5c>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <HAL_MspInit+0x5c>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001386:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <HAL_MspInit+0x60>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <HAL_MspInit+0x60>)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010000 	.word	0x40010000

080013b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a15      	ldr	r2, [pc, #84]	@ (8001424 <HAL_I2C_MspInit+0x70>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d123      	bne.n	800141c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d4:	4b14      	ldr	r3, [pc, #80]	@ (8001428 <HAL_I2C_MspInit+0x74>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a13      	ldr	r2, [pc, #76]	@ (8001428 <HAL_I2C_MspInit+0x74>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <HAL_I2C_MspInit+0x74>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ec:	23c0      	movs	r3, #192	@ 0xc0
 80013ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f0:	2312      	movs	r3, #18
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	4619      	mov	r1, r3
 80013fe:	480b      	ldr	r0, [pc, #44]	@ (800142c <HAL_I2C_MspInit+0x78>)
 8001400:	f000 fa42 	bl	8001888 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <HAL_I2C_MspInit+0x74>)
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	4a07      	ldr	r2, [pc, #28]	@ (8001428 <HAL_I2C_MspInit+0x74>)
 800140a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800140e:	61d3      	str	r3, [r2, #28]
 8001410:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <HAL_I2C_MspInit+0x74>)
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40005400 	.word	0x40005400
 8001428:	40021000 	.word	0x40021000
 800142c:	40010c00 	.word	0x40010c00

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <NMI_Handler+0x4>

08001438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <MemManage_Handler+0x4>

08001448 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <UsageFault_Handler+0x4>

08001458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr

0800147c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001480:	f000 f8b4 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800148e:	f002 f842 	bl	8003516 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000f0c 	.word	0x20000f0c

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f008 fcde 	bl	8009e8c <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20005000 	.word	0x20005000
 80014fc:	00000400 	.word	0x00000400
 8001500:	2000023c 	.word	0x2000023c
 8001504:	20001550 	.word	0x20001550

08001508 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001514:	f7ff fff8 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	@ (8001548 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800151a:	490c      	ldr	r1, [pc, #48]	@ (800154c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800151c:	4a0c      	ldr	r2, [pc, #48]	@ (8001550 <LoopFillZerobss+0x16>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a09      	ldr	r2, [pc, #36]	@ (8001554 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001530:	4c09      	ldr	r4, [pc, #36]	@ (8001558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153e:	f008 fcab 	bl	8009e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001542:	f7ff fcdd 	bl	8000f00 <main>
  bx lr
 8001546:	4770      	bx	lr
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001550:	0800a8a4 	.word	0x0800a8a4
  ldr r2, =_sbss
 8001554:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001558:	2000154c 	.word	0x2000154c

0800155c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC1_2_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <HAL_Init+0x28>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	@ (8001588 <HAL_Init+0x28>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f947 	bl	8001804 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fee8 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40022000 	.word	0x40022000

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	@ (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f95f 	bl	800186e <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295
 80015c8:	f000 f927 	bl	800181a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	@ (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000000 	.word	0x20000000
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000004 	.word	0x20000004

080015ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b05      	ldr	r3, [pc, #20]	@ (8001608 <HAL_IncTick+0x1c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b05      	ldr	r3, [pc, #20]	@ (800160c <HAL_IncTick+0x20>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a03      	ldr	r2, [pc, #12]	@ (800160c <HAL_IncTick+0x20>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000008 	.word	0x20000008
 800160c:	20000240 	.word	0x20000240

08001610 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b02      	ldr	r3, [pc, #8]	@ (8001620 <HAL_GetTick+0x10>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000240 	.word	0x20000240

08001624 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800162c:	f7ff fff0 	bl	8001610 <HAL_GetTick>
 8001630:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163c:	d005      	beq.n	800164a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800163e:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <HAL_Delay+0x44>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800164a:	bf00      	nop
 800164c:	f7ff ffe0 	bl	8001610 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	429a      	cmp	r2, r3
 800165a:	d8f7      	bhi.n	800164c <HAL_Delay+0x28>
  {
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008

0800166c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800166c:	b480      	push	{r7}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800167c:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001688:	4013      	ands	r3, r2
 800168a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001694:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800169c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169e:	4a04      	ldr	r2, [pc, #16]	@ (80016b0 <__NVIC_SetPriorityGrouping+0x44>)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	60d3      	str	r3, [r2, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b8:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <__NVIC_GetPriorityGrouping+0x18>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	0a1b      	lsrs	r3, r3, #8
 80016be:	f003 0307 	and.w	r3, r3, #7
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0b      	blt.n	80016fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4906      	ldr	r1, [pc, #24]	@ (8001704 <__NVIC_EnableIRQ+0x34>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	@ (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	@ (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	@ 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	@ 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017d0:	d301      	bcc.n	80017d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d2:	2301      	movs	r3, #1
 80017d4:	e00f      	b.n	80017f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <SysTick_Config+0x40>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017de:	210f      	movs	r1, #15
 80017e0:	f04f 30ff 	mov.w	r0, #4294967295
 80017e4:	f7ff ff90 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <SysTick_Config+0x40>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ee:	4b04      	ldr	r3, [pc, #16]	@ (8001800 <SysTick_Config+0x40>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	e000e010 	.word	0xe000e010

08001804 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff2d 	bl	800166c <__NVIC_SetPriorityGrouping>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182c:	f7ff ff42 	bl	80016b4 <__NVIC_GetPriorityGrouping>
 8001830:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	68b9      	ldr	r1, [r7, #8]
 8001836:	6978      	ldr	r0, [r7, #20]
 8001838:	f7ff ff90 	bl	800175c <NVIC_EncodePriority>
 800183c:	4602      	mov	r2, r0
 800183e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001842:	4611      	mov	r1, r2
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff5f 	bl	8001708 <__NVIC_SetPriority>
}
 800184a:	bf00      	nop
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff35 	bl	80016d0 <__NVIC_EnableIRQ>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffa2 	bl	80017c0 <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001888:	b480      	push	{r7}
 800188a:	b08b      	sub	sp, #44	@ 0x2c
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e169      	b.n	8001b70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800189c:	2201      	movs	r2, #1
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	f040 8158 	bne.w	8001b6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4a9a      	ldr	r2, [pc, #616]	@ (8001b28 <HAL_GPIO_Init+0x2a0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d05e      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018c4:	4a98      	ldr	r2, [pc, #608]	@ (8001b28 <HAL_GPIO_Init+0x2a0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d875      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018ca:	4a98      	ldr	r2, [pc, #608]	@ (8001b2c <HAL_GPIO_Init+0x2a4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d058      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018d0:	4a96      	ldr	r2, [pc, #600]	@ (8001b2c <HAL_GPIO_Init+0x2a4>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d86f      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018d6:	4a96      	ldr	r2, [pc, #600]	@ (8001b30 <HAL_GPIO_Init+0x2a8>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d052      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018dc:	4a94      	ldr	r2, [pc, #592]	@ (8001b30 <HAL_GPIO_Init+0x2a8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d869      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018e2:	4a94      	ldr	r2, [pc, #592]	@ (8001b34 <HAL_GPIO_Init+0x2ac>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d04c      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018e8:	4a92      	ldr	r2, [pc, #584]	@ (8001b34 <HAL_GPIO_Init+0x2ac>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d863      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018ee:	4a92      	ldr	r2, [pc, #584]	@ (8001b38 <HAL_GPIO_Init+0x2b0>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d046      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
 80018f4:	4a90      	ldr	r2, [pc, #576]	@ (8001b38 <HAL_GPIO_Init+0x2b0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d85d      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 80018fa:	2b12      	cmp	r3, #18
 80018fc:	d82a      	bhi.n	8001954 <HAL_GPIO_Init+0xcc>
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d859      	bhi.n	80019b6 <HAL_GPIO_Init+0x12e>
 8001902:	a201      	add	r2, pc, #4	@ (adr r2, 8001908 <HAL_GPIO_Init+0x80>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001983 	.word	0x08001983
 800190c:	0800195d 	.word	0x0800195d
 8001910:	0800196f 	.word	0x0800196f
 8001914:	080019b1 	.word	0x080019b1
 8001918:	080019b7 	.word	0x080019b7
 800191c:	080019b7 	.word	0x080019b7
 8001920:	080019b7 	.word	0x080019b7
 8001924:	080019b7 	.word	0x080019b7
 8001928:	080019b7 	.word	0x080019b7
 800192c:	080019b7 	.word	0x080019b7
 8001930:	080019b7 	.word	0x080019b7
 8001934:	080019b7 	.word	0x080019b7
 8001938:	080019b7 	.word	0x080019b7
 800193c:	080019b7 	.word	0x080019b7
 8001940:	080019b7 	.word	0x080019b7
 8001944:	080019b7 	.word	0x080019b7
 8001948:	080019b7 	.word	0x080019b7
 800194c:	08001965 	.word	0x08001965
 8001950:	08001979 	.word	0x08001979
 8001954:	4a79      	ldr	r2, [pc, #484]	@ (8001b3c <HAL_GPIO_Init+0x2b4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800195a:	e02c      	b.n	80019b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e029      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	3304      	adds	r3, #4
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e024      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	3308      	adds	r3, #8
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e01f      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	330c      	adds	r3, #12
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e01a      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198a:	2304      	movs	r3, #4
 800198c:	623b      	str	r3, [r7, #32]
          break;
 800198e:	e013      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001998:	2308      	movs	r3, #8
 800199a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	611a      	str	r2, [r3, #16]
          break;
 80019a2:	e009      	b.n	80019b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	615a      	str	r2, [r3, #20]
          break;
 80019ae:	e003      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x130>
          break;
 80019b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	2bff      	cmp	r3, #255	@ 0xff
 80019bc:	d801      	bhi.n	80019c2 <HAL_GPIO_Init+0x13a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	e001      	b.n	80019c6 <HAL_GPIO_Init+0x13e>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3304      	adds	r3, #4
 80019c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2bff      	cmp	r3, #255	@ 0xff
 80019cc:	d802      	bhi.n	80019d4 <HAL_GPIO_Init+0x14c>
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	e002      	b.n	80019da <HAL_GPIO_Init+0x152>
 80019d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d6:	3b08      	subs	r3, #8
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	210f      	movs	r1, #15
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	401a      	ands	r2, r3
 80019ec:	6a39      	ldr	r1, [r7, #32]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	fa01 f303 	lsl.w	r3, r1, r3
 80019f4:	431a      	orrs	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 80b1 	beq.w	8001b6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a08:	4b4d      	ldr	r3, [pc, #308]	@ (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b4a      	ldr	r3, [pc, #296]	@ (8001b40 <HAL_GPIO_Init+0x2b8>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a20:	4a48      	ldr	r2, [pc, #288]	@ (8001b44 <HAL_GPIO_Init+0x2bc>)
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	089b      	lsrs	r3, r3, #2
 8001a26:	3302      	adds	r3, #2
 8001a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	220f      	movs	r2, #15
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4013      	ands	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a40      	ldr	r2, [pc, #256]	@ (8001b48 <HAL_GPIO_Init+0x2c0>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d013      	beq.n	8001a74 <HAL_GPIO_Init+0x1ec>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b4c <HAL_GPIO_Init+0x2c4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d00d      	beq.n	8001a70 <HAL_GPIO_Init+0x1e8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3e      	ldr	r2, [pc, #248]	@ (8001b50 <HAL_GPIO_Init+0x2c8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d007      	beq.n	8001a6c <HAL_GPIO_Init+0x1e4>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	4a3d      	ldr	r2, [pc, #244]	@ (8001b54 <HAL_GPIO_Init+0x2cc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d101      	bne.n	8001a68 <HAL_GPIO_Init+0x1e0>
 8001a64:	2303      	movs	r3, #3
 8001a66:	e006      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a68:	2304      	movs	r3, #4
 8001a6a:	e004      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	e002      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_GPIO_Init+0x1ee>
 8001a74:	2300      	movs	r3, #0
 8001a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a78:	f002 0203 	and.w	r2, r2, #3
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	4093      	lsls	r3, r2
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a86:	492f      	ldr	r1, [pc, #188]	@ (8001b44 <HAL_GPIO_Init+0x2bc>)
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	089b      	lsrs	r3, r3, #2
 8001a8c:	3302      	adds	r3, #2
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d006      	beq.n	8001aae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aa0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	492c      	ldr	r1, [pc, #176]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	608b      	str	r3, [r1, #8]
 8001aac:	e006      	b.n	8001abc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aae:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	4928      	ldr	r1, [pc, #160]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d006      	beq.n	8001ad6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	4922      	ldr	r1, [pc, #136]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60cb      	str	r3, [r1, #12]
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ad6:	4b20      	ldr	r3, [pc, #128]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	68da      	ldr	r2, [r3, #12]
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	491e      	ldr	r1, [pc, #120]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001af0:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4918      	ldr	r1, [pc, #96]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
 8001afc:	e006      	b.n	8001b0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001afe:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	43db      	mvns	r3, r3
 8001b06:	4914      	ldr	r1, [pc, #80]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d021      	beq.n	8001b5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b18:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	490e      	ldr	r1, [pc, #56]	@ (8001b58 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e021      	b.n	8001b6a <HAL_GPIO_Init+0x2e2>
 8001b26:	bf00      	nop
 8001b28:	10320000 	.word	0x10320000
 8001b2c:	10310000 	.word	0x10310000
 8001b30:	10220000 	.word	0x10220000
 8001b34:	10210000 	.word	0x10210000
 8001b38:	10120000 	.word	0x10120000
 8001b3c:	10110000 	.word	0x10110000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	40010800 	.word	0x40010800
 8001b4c:	40010c00 	.word	0x40010c00
 8001b50:	40011000 	.word	0x40011000
 8001b54:	40011400 	.word	0x40011400
 8001b58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b8c <HAL_GPIO_Init+0x304>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	4909      	ldr	r1, [pc, #36]	@ (8001b8c <HAL_GPIO_Init+0x304>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f47f ae8e 	bne.w	800189c <HAL_GPIO_Init+0x14>
  }
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	372c      	adds	r7, #44	@ 0x2c
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	40010400 	.word	0x40010400

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bac:	e003      	b.n	8001bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	611a      	str	r2, [r3, #16]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e12b      	b.n	8001e2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff fbe4 	bl	80013b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2224      	movs	r2, #36	@ 0x24
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c24:	f003 fc86 	bl	8005534 <HAL_RCC_GetPCLK1Freq>
 8001c28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a81      	ldr	r2, [pc, #516]	@ (8001e34 <HAL_I2C_Init+0x274>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d807      	bhi.n	8001c44 <HAL_I2C_Init+0x84>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4a80      	ldr	r2, [pc, #512]	@ (8001e38 <HAL_I2C_Init+0x278>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	bf94      	ite	ls
 8001c3c:	2301      	movls	r3, #1
 8001c3e:	2300      	movhi	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	e006      	b.n	8001c52 <HAL_I2C_Init+0x92>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a7d      	ldr	r2, [pc, #500]	@ (8001e3c <HAL_I2C_Init+0x27c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	bf94      	ite	ls
 8001c4c:	2301      	movls	r3, #1
 8001c4e:	2300      	movhi	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e0e7      	b.n	8001e2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4a78      	ldr	r2, [pc, #480]	@ (8001e40 <HAL_I2C_Init+0x280>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	0c9b      	lsrs	r3, r3, #18
 8001c64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a6a      	ldr	r2, [pc, #424]	@ (8001e34 <HAL_I2C_Init+0x274>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d802      	bhi.n	8001c94 <HAL_I2C_Init+0xd4>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	3301      	adds	r3, #1
 8001c92:	e009      	b.n	8001ca8 <HAL_I2C_Init+0xe8>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	4a69      	ldr	r2, [pc, #420]	@ (8001e44 <HAL_I2C_Init+0x284>)
 8001ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca4:	099b      	lsrs	r3, r3, #6
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6812      	ldr	r2, [r2, #0]
 8001cac:	430b      	orrs	r3, r1
 8001cae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	495c      	ldr	r1, [pc, #368]	@ (8001e34 <HAL_I2C_Init+0x274>)
 8001cc4:	428b      	cmp	r3, r1
 8001cc6:	d819      	bhi.n	8001cfc <HAL_I2C_Init+0x13c>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	1e59      	subs	r1, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cd6:	1c59      	adds	r1, r3, #1
 8001cd8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001cdc:	400b      	ands	r3, r1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_I2C_Init+0x138>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1e59      	subs	r1, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf6:	e051      	b.n	8001d9c <HAL_I2C_Init+0x1dc>
 8001cf8:	2304      	movs	r3, #4
 8001cfa:	e04f      	b.n	8001d9c <HAL_I2C_Init+0x1dc>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d111      	bne.n	8001d28 <HAL_I2C_Init+0x168>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	1e58      	subs	r0, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	440b      	add	r3, r1
 8001d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d16:	3301      	adds	r3, #1
 8001d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf0c      	ite	eq
 8001d20:	2301      	moveq	r3, #1
 8001d22:	2300      	movne	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e012      	b.n	8001d4e <HAL_I2C_Init+0x18e>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	1e58      	subs	r0, r3, #1
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6859      	ldr	r1, [r3, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	0099      	lsls	r1, r3, #2
 8001d38:	440b      	add	r3, r1
 8001d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Init+0x196>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e022      	b.n	8001d9c <HAL_I2C_Init+0x1dc>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10e      	bne.n	8001d7c <HAL_I2C_Init+0x1bc>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1e58      	subs	r0, r3, #1
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6859      	ldr	r1, [r3, #4]
 8001d66:	460b      	mov	r3, r1
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	440b      	add	r3, r1
 8001d6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d70:	3301      	adds	r3, #1
 8001d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d7a:	e00f      	b.n	8001d9c <HAL_I2C_Init+0x1dc>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1e58      	subs	r0, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	0099      	lsls	r1, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d92:	3301      	adds	r3, #1
 8001d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	6809      	ldr	r1, [r1, #0]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	69da      	ldr	r2, [r3, #28]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001dca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6911      	ldr	r1, [r2, #16]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	68d2      	ldr	r2, [r2, #12]
 8001dd6:	4311      	orrs	r1, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	430b      	orrs	r3, r1
 8001dde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	000186a0 	.word	0x000186a0
 8001e38:	001e847f 	.word	0x001e847f
 8001e3c:	003d08ff 	.word	0x003d08ff
 8001e40:	431bde83 	.word	0x431bde83
 8001e44:	10624dd3 	.word	0x10624dd3

08001e48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	461a      	mov	r2, r3
 8001e54:	460b      	mov	r3, r1
 8001e56:	817b      	strh	r3, [r7, #10]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff fbd8 	bl	8001610 <HAL_GetTick>
 8001e60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b20      	cmp	r3, #32
 8001e6c:	f040 80e0 	bne.w	8002030 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	2319      	movs	r3, #25
 8001e76:	2201      	movs	r2, #1
 8001e78:	4970      	ldr	r1, [pc, #448]	@ (800203c <HAL_I2C_Master_Transmit+0x1f4>)
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 fffa 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e86:	2302      	movs	r3, #2
 8001e88:	e0d3      	b.n	8002032 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_I2C_Master_Transmit+0x50>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e0cc      	b.n	8002032 <HAL_I2C_Master_Transmit+0x1ea>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d007      	beq.n	8001ebe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ecc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2221      	movs	r2, #33	@ 0x21
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2210      	movs	r2, #16
 8001eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	893a      	ldrh	r2, [r7, #8]
 8001eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4a50      	ldr	r2, [pc, #320]	@ (8002040 <HAL_I2C_Master_Transmit+0x1f8>)
 8001efe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f00:	8979      	ldrh	r1, [r7, #10]
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	6a3a      	ldr	r2, [r7, #32]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 fd7c 	bl	8002a04 <I2C_MasterRequestWrite>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e08d      	b.n	8002032 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	613b      	str	r3, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f2c:	e066      	b.n	8001ffc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	6a39      	ldr	r1, [r7, #32]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f001 f8b8 	bl	80030a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00d      	beq.n	8001f5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d107      	bne.n	8001f56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e06b      	b.n	8002032 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f82:	3b01      	subs	r3, #1
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d11b      	bne.n	8001fd0 <HAL_I2C_Master_Transmit+0x188>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d017      	beq.n	8001fd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	781a      	ldrb	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	6a39      	ldr	r1, [r7, #32]
 8001fd4:	68f8      	ldr	r0, [r7, #12]
 8001fd6:	f001 f8af 	bl	8003138 <I2C_WaitOnBTFFlagUntilTimeout>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00d      	beq.n	8001ffc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d107      	bne.n	8001ff8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ff6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e01a      	b.n	8002032 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002000:	2b00      	cmp	r3, #0
 8002002:	d194      	bne.n	8001f2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	00100002 	.word	0x00100002
 8002040:	ffff0000 	.word	0xffff0000

08002044 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	@ 0x30
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	607a      	str	r2, [r7, #4]
 800204e:	461a      	mov	r2, r3
 8002050:	460b      	mov	r3, r1
 8002052:	817b      	strh	r3, [r7, #10]
 8002054:	4613      	mov	r3, r2
 8002056:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff fad8 	bl	8001610 <HAL_GetTick>
 8002060:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b20      	cmp	r3, #32
 800206c:	f040 824b 	bne.w	8002506 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	2319      	movs	r3, #25
 8002076:	2201      	movs	r2, #1
 8002078:	497f      	ldr	r1, [pc, #508]	@ (8002278 <HAL_I2C_Master_Receive+0x234>)
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f000 fefa 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
 8002088:	e23e      	b.n	8002508 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_I2C_Master_Receive+0x54>
 8002094:	2302      	movs	r3, #2
 8002096:	e237      	b.n	8002508 <HAL_I2C_Master_Receive+0x4c4>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d007      	beq.n	80020be <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0201 	orr.w	r2, r2, #1
 80020bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2222      	movs	r2, #34	@ 0x22
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2210      	movs	r2, #16
 80020da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	893a      	ldrh	r2, [r7, #8]
 80020ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4a5f      	ldr	r2, [pc, #380]	@ (800227c <HAL_I2C_Master_Receive+0x238>)
 80020fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002100:	8979      	ldrh	r1, [r7, #10]
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f000 fcfe 	bl	8002b08 <I2C_MasterRequestRead>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e1f8      	b.n	8002508 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211a:	2b00      	cmp	r3, #0
 800211c:	d113      	bne.n	8002146 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e1cc      	b.n	80024e0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800214a:	2b01      	cmp	r3, #1
 800214c:	d11e      	bne.n	800218c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800215c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800215e:	b672      	cpsid	i
}
 8002160:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	61bb      	str	r3, [r7, #24]
 8002176:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002186:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002188:	b662      	cpsie	i
}
 800218a:	e035      	b.n	80021f8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002190:	2b02      	cmp	r3, #2
 8002192:	d11e      	bne.n	80021d2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021a4:	b672      	cpsid	i
}
 80021a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021ce:	b662      	cpsie	i
}
 80021d0:	e012      	b.n	80021f8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80021f8:	e172      	b.n	80024e0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fe:	2b03      	cmp	r3, #3
 8002200:	f200 811f 	bhi.w	8002442 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002208:	2b01      	cmp	r3, #1
 800220a:	d123      	bne.n	8002254 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800220e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002210:	68f8      	ldr	r0, [r7, #12]
 8002212:	f000 ffd9 	bl	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e173      	b.n	8002508 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691a      	ldr	r2, [r3, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002248:	b29b      	uxth	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002252:	e145      	b.n	80024e0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002258:	2b02      	cmp	r3, #2
 800225a:	d152      	bne.n	8002302 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800225c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002262:	2200      	movs	r2, #0
 8002264:	4906      	ldr	r1, [pc, #24]	@ (8002280 <HAL_I2C_Master_Receive+0x23c>)
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 fe04 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d008      	beq.n	8002284 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e148      	b.n	8002508 <HAL_I2C_Master_Receive+0x4c4>
 8002276:	bf00      	nop
 8002278:	00100002 	.word	0x00100002
 800227c:	ffff0000 	.word	0xffff0000
 8002280:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002284:	b672      	cpsid	i
}
 8002286:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002296:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022ca:	b662      	cpsie	i
}
 80022cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002300:	e0ee      	b.n	80024e0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002308:	2200      	movs	r2, #0
 800230a:	4981      	ldr	r1, [pc, #516]	@ (8002510 <HAL_I2C_Master_Receive+0x4cc>)
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 fdb1 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e0f5      	b.n	8002508 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800232a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800232c:	b672      	cpsid	i
}
 800232e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002362:	4b6c      	ldr	r3, [pc, #432]	@ (8002514 <HAL_I2C_Master_Receive+0x4d0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	08db      	lsrs	r3, r3, #3
 8002368:	4a6b      	ldr	r2, [pc, #428]	@ (8002518 <HAL_I2C_Master_Receive+0x4d4>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	0a1a      	lsrs	r2, r3, #8
 8002370:	4613      	mov	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4413      	add	r3, r2
 8002376:	00da      	lsls	r2, r3, #3
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	3b01      	subs	r3, #1
 8002380:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d118      	bne.n	80023ba <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	f043 0220 	orr.w	r2, r3, #32
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80023aa:	b662      	cpsie	i
}
 80023ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0a6      	b.n	8002508 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d1d9      	bne.n	800237c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29a      	uxth	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800240a:	b662      	cpsie	i
}
 800240c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	691a      	ldr	r2, [r3, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	1c5a      	adds	r2, r3, #1
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002436:	b29b      	uxth	r3, r3
 8002438:	3b01      	subs	r3, #1
 800243a:	b29a      	uxth	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002440:	e04e      	b.n	80024e0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002444:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 febe 	bl	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e058      	b.n	8002508 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b04      	cmp	r3, #4
 8002494:	d124      	bne.n	80024e0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249a:	2b03      	cmp	r3, #3
 800249c:	d107      	bne.n	80024ae <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024ac:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f47f ae88 	bne.w	80021fa <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
  }
}
 8002508:	4618      	mov	r0, r3
 800250a:	3728      	adds	r7, #40	@ 0x28
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	00010004 	.word	0x00010004
 8002514:	20000000 	.word	0x20000000
 8002518:	14f8b589 	.word	0x14f8b589

0800251c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	@ 0x30
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	4608      	mov	r0, r1
 8002526:	4611      	mov	r1, r2
 8002528:	461a      	mov	r2, r3
 800252a:	4603      	mov	r3, r0
 800252c:	817b      	strh	r3, [r7, #10]
 800252e:	460b      	mov	r3, r1
 8002530:	813b      	strh	r3, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800253a:	f7ff f869 	bl	8001610 <HAL_GetTick>
 800253e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b20      	cmp	r3, #32
 800254a:	f040 8250 	bne.w	80029ee <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2319      	movs	r3, #25
 8002554:	2201      	movs	r2, #1
 8002556:	4982      	ldr	r1, [pc, #520]	@ (8002760 <HAL_I2C_Mem_Read+0x244>)
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fc8b 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002564:	2302      	movs	r3, #2
 8002566:	e243      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_I2C_Mem_Read+0x5a>
 8002572:	2302      	movs	r3, #2
 8002574:	e23c      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4d4>
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b01      	cmp	r3, #1
 800258a:	d007      	beq.n	800259c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f042 0201 	orr.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2222      	movs	r2, #34	@ 0x22
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2240      	movs	r2, #64	@ 0x40
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2200      	movs	r2, #0
 80025c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80025cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4a62      	ldr	r2, [pc, #392]	@ (8002764 <HAL_I2C_Mem_Read+0x248>)
 80025dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025de:	88f8      	ldrh	r0, [r7, #6]
 80025e0:	893a      	ldrh	r2, [r7, #8]
 80025e2:	8979      	ldrh	r1, [r7, #10]
 80025e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e6:	9301      	str	r3, [sp, #4]
 80025e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	4603      	mov	r3, r0
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 fb58 	bl	8002ca4 <I2C_RequestMemoryRead>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e1f8      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002602:	2b00      	cmp	r3, #0
 8002604:	d113      	bne.n	800262e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e1cc      	b.n	80029c8 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002632:	2b01      	cmp	r3, #1
 8002634:	d11e      	bne.n	8002674 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002644:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002646:	b672      	cpsid	i
}
 8002648:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	61bb      	str	r3, [r7, #24]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800266e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002670:	b662      	cpsie	i
}
 8002672:	e035      	b.n	80026e0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002678:	2b02      	cmp	r3, #2
 800267a:	d11e      	bne.n	80026ba <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800268a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800268c:	b672      	cpsid	i
}
 800268e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026b6:	b662      	cpsie	i
}
 80026b8:	e012      	b.n	80026e0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026c8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80026e0:	e172      	b.n	80029c8 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e6:	2b03      	cmp	r3, #3
 80026e8:	f200 811f 	bhi.w	800292a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d123      	bne.n	800273c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 fd65 	bl	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e173      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002730:	b29b      	uxth	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800273a:	e145      	b.n	80029c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002740:	2b02      	cmp	r3, #2
 8002742:	d152      	bne.n	80027ea <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800274a:	2200      	movs	r2, #0
 800274c:	4906      	ldr	r1, [pc, #24]	@ (8002768 <HAL_I2C_Mem_Read+0x24c>)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fb90 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e148      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4d4>
 800275e:	bf00      	nop
 8002760:	00100002 	.word	0x00100002
 8002764:	ffff0000 	.word	0xffff0000
 8002768:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800276c:	b672      	cpsid	i
}
 800276e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800277e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800279c:	3b01      	subs	r3, #1
 800279e:	b29a      	uxth	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80027b2:	b662      	cpsie	i
}
 80027b4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027e8:	e0ee      	b.n	80029c8 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	9300      	str	r3, [sp, #0]
 80027ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f0:	2200      	movs	r2, #0
 80027f2:	4981      	ldr	r1, [pc, #516]	@ (80029f8 <HAL_I2C_Mem_Read+0x4dc>)
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fb3d 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0f5      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002812:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002814:	b672      	cpsid	i
}
 8002816:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002834:	3b01      	subs	r3, #1
 8002836:	b29a      	uxth	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002840:	b29b      	uxth	r3, r3
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800284a:	4b6c      	ldr	r3, [pc, #432]	@ (80029fc <HAL_I2C_Mem_Read+0x4e0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	08db      	lsrs	r3, r3, #3
 8002850:	4a6b      	ldr	r2, [pc, #428]	@ (8002a00 <HAL_I2C_Mem_Read+0x4e4>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0a1a      	lsrs	r2, r3, #8
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	00da      	lsls	r2, r3, #3
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	3b01      	subs	r3, #1
 8002868:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d118      	bne.n	80028a2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	f043 0220 	orr.w	r2, r3, #32
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002892:	b662      	cpsie	i
}
 8002894:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e0a6      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d1d9      	bne.n	8002864 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691a      	ldr	r2, [r3, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d2:	1c5a      	adds	r2, r3, #1
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028f2:	b662      	cpsie	i
}
 80028f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002928:	e04e      	b.n	80029c8 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800292c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fc4a 	bl	80031c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e058      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	691a      	ldr	r2, [r3, #16]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d124      	bne.n	80029c8 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002982:	2b03      	cmp	r3, #3
 8002984:	d107      	bne.n	8002996 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002994:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	691a      	ldr	r2, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	b2d2      	uxtb	r2, r2
 80029a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029be:	b29b      	uxth	r3, r3
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f47f ae88 	bne.w	80026e2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80029ee:	2302      	movs	r3, #2
  }
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3728      	adds	r7, #40	@ 0x28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	00010004 	.word	0x00010004
 80029fc:	20000000 	.word	0x20000000
 8002a00:	14f8b589 	.word	0x14f8b589

08002a04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	460b      	mov	r3, r1
 8002a12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d006      	beq.n	8002a2e <I2C_MasterRequestWrite+0x2a>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d003      	beq.n	8002a2e <I2C_MasterRequestWrite+0x2a>
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a2c:	d108      	bne.n	8002a40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	e00b      	b.n	8002a58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a44:	2b12      	cmp	r3, #18
 8002a46:	d107      	bne.n	8002a58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fa05 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00d      	beq.n	8002a8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a7e:	d103      	bne.n	8002a88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e035      	b.n	8002af8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a94:	d108      	bne.n	8002aa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a96:	897b      	ldrh	r3, [r7, #10]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002aa4:	611a      	str	r2, [r3, #16]
 8002aa6:	e01b      	b.n	8002ae0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002aa8:	897b      	ldrh	r3, [r7, #10]
 8002aaa:	11db      	asrs	r3, r3, #7
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	f003 0306 	and.w	r3, r3, #6
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	f063 030f 	orn	r3, r3, #15
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	490e      	ldr	r1, [pc, #56]	@ (8002b00 <I2C_MasterRequestWrite+0xfc>)
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fa4e 	bl	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e010      	b.n	8002af8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ad6:	897b      	ldrh	r3, [r7, #10]
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4907      	ldr	r1, [pc, #28]	@ (8002b04 <I2C_MasterRequestWrite+0x100>)
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fa3e 	bl	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	00010008 	.word	0x00010008
 8002b04:	00010002 	.word	0x00010002

08002b08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	607a      	str	r2, [r7, #4]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	460b      	mov	r3, r1
 8002b16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d006      	beq.n	8002b42 <I2C_MasterRequestRead+0x3a>
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d003      	beq.n	8002b42 <I2C_MasterRequestRead+0x3a>
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b40:	d108      	bne.n	8002b54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	e00b      	b.n	8002b6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	2b11      	cmp	r3, #17
 8002b5a:	d107      	bne.n	8002b6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 f97b 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00d      	beq.n	8002ba0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b92:	d103      	bne.n	8002b9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e079      	b.n	8002c94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ba8:	d108      	bne.n	8002bbc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002baa:	897b      	ldrh	r3, [r7, #10]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	611a      	str	r2, [r3, #16]
 8002bba:	e05f      	b.n	8002c7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bbc:	897b      	ldrh	r3, [r7, #10]
 8002bbe:	11db      	asrs	r3, r3, #7
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	f003 0306 	and.w	r3, r3, #6
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f063 030f 	orn	r3, r3, #15
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4930      	ldr	r1, [pc, #192]	@ (8002c9c <I2C_MasterRequestRead+0x194>)
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f9c4 	bl	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e054      	b.n	8002c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bea:	897b      	ldrh	r3, [r7, #10]
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4929      	ldr	r1, [pc, #164]	@ (8002ca0 <I2C_MasterRequestRead+0x198>)
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f9b4 	bl	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e044      	b.n	8002c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f919 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c56:	d103      	bne.n	8002c60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c5e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e017      	b.n	8002c94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002c64:	897b      	ldrh	r3, [r7, #10]
 8002c66:	11db      	asrs	r3, r3, #7
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f003 0306 	and.w	r3, r3, #6
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	f063 030e 	orn	r3, r3, #14
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4907      	ldr	r1, [pc, #28]	@ (8002ca0 <I2C_MasterRequestRead+0x198>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f970 	bl	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	00010008 	.word	0x00010008
 8002ca0:	00010002 	.word	0x00010002

08002ca4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	4608      	mov	r0, r1
 8002cae:	4611      	mov	r1, r2
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	817b      	strh	r3, [r7, #10]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	813b      	strh	r3, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ccc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 f8c2 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00d      	beq.n	8002d12 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d04:	d103      	bne.n	8002d0e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d0c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e0aa      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d12:	897b      	ldrh	r3, [r7, #10]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d20:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	6a3a      	ldr	r2, [r7, #32]
 8002d26:	4952      	ldr	r1, [pc, #328]	@ (8002e70 <I2C_RequestMemoryRead+0x1cc>)
 8002d28:	68f8      	ldr	r0, [r7, #12]
 8002d2a:	f000 f91d 	bl	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d001      	beq.n	8002d38 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e097      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	617b      	str	r3, [r7, #20]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d50:	6a39      	ldr	r1, [r7, #32]
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f000 f9a8 	bl	80030a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00d      	beq.n	8002d7a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	d107      	bne.n	8002d76 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d74:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e076      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d105      	bne.n	8002d8c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d80:	893b      	ldrh	r3, [r7, #8]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	611a      	str	r2, [r3, #16]
 8002d8a:	e021      	b.n	8002dd0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d8c:	893b      	ldrh	r3, [r7, #8]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9c:	6a39      	ldr	r1, [r7, #32]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f982 	bl	80030a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00d      	beq.n	8002dc6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d107      	bne.n	8002dc2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e050      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dc6:	893b      	ldrh	r3, [r7, #8]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd2:	6a39      	ldr	r1, [r7, #32]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f967 	bl	80030a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00d      	beq.n	8002dfc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d107      	bne.n	8002df8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002df6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e035      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f82b 	bl	8002e74 <I2C_WaitOnFlagUntilTimeout>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e32:	d103      	bne.n	8002e3c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e013      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e40:	897b      	ldrh	r3, [r7, #10]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	6a3a      	ldr	r2, [r7, #32]
 8002e54:	4906      	ldr	r1, [pc, #24]	@ (8002e70 <I2C_RequestMemoryRead+0x1cc>)
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 f886 	bl	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	00010002 	.word	0x00010002

08002e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	603b      	str	r3, [r7, #0]
 8002e80:	4613      	mov	r3, r2
 8002e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e84:	e048      	b.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8c:	d044      	beq.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e8e:	f7fe fbbf 	bl	8001610 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d302      	bcc.n	8002ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d139      	bne.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	0c1b      	lsrs	r3, r3, #16
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d10d      	bne.n	8002eca <I2C_WaitOnFlagUntilTimeout+0x56>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	e00c      	b.n	8002ee4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	43da      	mvns	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d116      	bne.n	8002f18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e023      	b.n	8002f60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	0c1b      	lsrs	r3, r3, #16
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d10d      	bne.n	8002f3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	e00c      	b.n	8002f58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	43da      	mvns	r2, r3
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf0c      	ite	eq
 8002f50:	2301      	moveq	r3, #1
 8002f52:	2300      	movne	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d093      	beq.n	8002e86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f76:	e071      	b.n	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f86:	d123      	bne.n	8002fd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	f043 0204 	orr.w	r2, r3, #4
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e067      	b.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d041      	beq.n	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd8:	f7fe fb1a 	bl	8001610 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d302      	bcc.n	8002fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d136      	bne.n	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d10c      	bne.n	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	43da      	mvns	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4013      	ands	r3, r2
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf14      	ite	ne
 800300a:	2301      	movne	r3, #1
 800300c:	2300      	moveq	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	e00b      	b.n	800302a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	43da      	mvns	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4013      	ands	r3, r2
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf14      	ite	ne
 8003024:	2301      	movne	r3, #1
 8003026:	2300      	moveq	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d016      	beq.n	800305c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e021      	b.n	80030a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	0c1b      	lsrs	r3, r3, #16
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b01      	cmp	r3, #1
 8003064:	d10c      	bne.n	8003080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	43da      	mvns	r2, r3
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4013      	ands	r3, r2
 8003072:	b29b      	uxth	r3, r3
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf14      	ite	ne
 8003078:	2301      	movne	r3, #1
 800307a:	2300      	moveq	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	e00b      	b.n	8003098 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	43da      	mvns	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	4013      	ands	r3, r2
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	f47f af6d 	bne.w	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b4:	e034      	b.n	8003120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f8e3 	bl	8003282 <I2C_IsAcknowledgeFailed>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e034      	b.n	8003130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030cc:	d028      	beq.n	8003120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ce:	f7fe fa9f 	bl	8001610 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d302      	bcc.n	80030e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d11d      	bne.n	8003120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ee:	2b80      	cmp	r3, #128	@ 0x80
 80030f0:	d016      	beq.n	8003120 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310c:	f043 0220 	orr.w	r2, r3, #32
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e007      	b.n	8003130 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800312a:	2b80      	cmp	r3, #128	@ 0x80
 800312c:	d1c3      	bne.n	80030b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3710      	adds	r7, #16
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003144:	e034      	b.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f89b 	bl	8003282 <I2C_IsAcknowledgeFailed>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e034      	b.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315c:	d028      	beq.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315e:	f7fe fa57 	bl	8001610 <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	429a      	cmp	r2, r3
 800316c:	d302      	bcc.n	8003174 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d11d      	bne.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b04      	cmp	r3, #4
 8003180:	d016      	beq.n	80031b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f043 0220 	orr.w	r2, r3, #32
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e007      	b.n	80031c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d1c3      	bne.n	8003146 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031d4:	e049      	b.n	800326a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0310 	and.w	r3, r3, #16
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d119      	bne.n	8003218 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0210 	mvn.w	r2, #16
 80031ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e030      	b.n	800327a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003218:	f7fe f9fa 	bl	8001610 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	429a      	cmp	r2, r3
 8003226:	d302      	bcc.n	800322e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d11d      	bne.n	800326a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003238:	2b40      	cmp	r3, #64	@ 0x40
 800323a:	d016      	beq.n	800326a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f043 0220 	orr.w	r2, r3, #32
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e007      	b.n	800327a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003274:	2b40      	cmp	r3, #64	@ 0x40
 8003276:	d1ae      	bne.n	80031d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003278:	2300      	movs	r3, #0
}
 800327a:	4618      	mov	r0, r3
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003294:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003298:	d11b      	bne.n	80032d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	f043 0204 	orr.w	r2, r3, #4
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b084      	sub	sp, #16
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0e8      	b.n	80034c2 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d106      	bne.n	800330a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f006 faef 	bl	80098e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2203      	movs	r2, #3
 800330e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f002 fa14 	bl	800574a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3304      	adds	r3, #4
 800332a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800332c:	f002 f9ea 	bl	8005704 <USB_CoreInit>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0bf      	b.n	80034c2 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f002 fa18 	bl	800577e <USB_SetCurrentMode>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0b0      	b.n	80034c2 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003360:	2300      	movs	r3, #0
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	e03e      	b.n	80033e4 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	440b      	add	r3, r1
 8003374:	3311      	adds	r3, #17
 8003376:	2201      	movs	r2, #1
 8003378:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	3310      	adds	r3, #16
 800338a:	7bfa      	ldrb	r2, [r7, #15]
 800338c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	440b      	add	r3, r1
 800339c:	3313      	adds	r3, #19
 800339e:	2200      	movs	r2, #0
 80033a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	440b      	add	r3, r1
 80033b0:	3320      	adds	r3, #32
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	440b      	add	r3, r1
 80033c4:	3324      	adds	r3, #36	@ 0x24
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	440b      	add	r3, r1
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	3301      	adds	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	791b      	ldrb	r3, [r3, #4]
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d3bb      	bcc.n	8003366 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ee:	2300      	movs	r3, #0
 80033f0:	73fb      	strb	r3, [r7, #15]
 80033f2:	e044      	b.n	800347e <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033f4:	7bfa      	ldrb	r2, [r7, #15]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003406:	2200      	movs	r2, #0
 8003408:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800340a:	7bfa      	ldrb	r2, [r7, #15]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	440b      	add	r3, r1
 8003418:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003420:	7bfa      	ldrb	r2, [r7, #15]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	440b      	add	r3, r1
 800342e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	440b      	add	r3, r1
 800345a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	440b      	add	r3, r1
 8003470:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003478:	7bfb      	ldrb	r3, [r7, #15]
 800347a:	3301      	adds	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	791b      	ldrb	r3, [r3, #4]
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	429a      	cmp	r2, r3
 8003486:	d3b5      	bcc.n	80033f4 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3304      	adds	r3, #4
 8003490:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003492:	f002 f980 	bl	8005796 <USB_DevInit>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e00c      	b.n	80034c2 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f004 fbff 	bl	8007cbe <USB_DevDisconnect>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b082      	sub	sp, #8
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_PCD_Start+0x16>
 80034dc:	2302      	movs	r3, #2
 80034de:	e016      	b.n	800350e <HAL_PCD_Start+0x44>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f002 f916 	bl	800571e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80034f2:	2101      	movs	r1, #1
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f006 fc6a 	bl	8009dce <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f004 fbd3 	bl	8007caa <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b088      	sub	sp, #32
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f004 fbd5 	bl	8007cd2 <USB_ReadInterrupts>
 8003528:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fb1a 	bl	8003b6e <PCD_EP_ISR_Handler>

    return;
 800353a:	e119      	b.n	8003770 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003542:	2b00      	cmp	r3, #0
 8003544:	d013      	beq.n	800356e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800354e:	b29a      	uxth	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003558:	b292      	uxth	r2, r2
 800355a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f006 fa3d 	bl	80099de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003564:	2100      	movs	r1, #0
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f905 	bl	8003776 <HAL_PCD_SetAddress>

    return;
 800356c:	e100      	b.n	8003770 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00c      	beq.n	8003592 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003580:	b29a      	uxth	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800358a:	b292      	uxth	r2, r2
 800358c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003590:	e0ee      	b.n	8003770 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00c      	beq.n	80035b6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ae:	b292      	uxth	r2, r2
 80035b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80035b4:	e0dc      	b.n	8003770 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d027      	beq.n	8003610 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0204 	bic.w	r2, r2, #4
 80035d2:	b292      	uxth	r2, r2
 80035d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0208 	bic.w	r2, r2, #8
 80035ea:	b292      	uxth	r2, r2
 80035ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f006 fa2d 	bl	8009a50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035fe:	b29a      	uxth	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003608:	b292      	uxth	r2, r2
 800360a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800360e:	e0af      	b.n	8003770 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8083 	beq.w	8003722 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	77fb      	strb	r3, [r7, #31]
 8003620:	e010      	b.n	8003644 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	461a      	mov	r2, r3
 8003628:	7ffb      	ldrb	r3, [r7, #31]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	441a      	add	r2, r3
 800362e:	7ffb      	ldrb	r3, [r7, #31]
 8003630:	8812      	ldrh	r2, [r2, #0]
 8003632:	b292      	uxth	r2, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	3320      	adds	r3, #32
 8003638:	443b      	add	r3, r7
 800363a:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800363e:	7ffb      	ldrb	r3, [r7, #31]
 8003640:	3301      	adds	r3, #1
 8003642:	77fb      	strb	r3, [r7, #31]
 8003644:	7ffb      	ldrb	r3, [r7, #31]
 8003646:	2b07      	cmp	r3, #7
 8003648:	d9eb      	bls.n	8003622 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003652:	b29a      	uxth	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	b292      	uxth	r2, r2
 800365e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	b292      	uxth	r2, r2
 8003676:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800367a:	bf00      	nop
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003684:	b29b      	uxth	r3, r3
 8003686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0f6      	beq.n	800367c <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a0:	b292      	uxth	r2, r2
 80036a2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e00f      	b.n	80036cc <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80036ac:	7ffb      	ldrb	r3, [r7, #31]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	4611      	mov	r1, r2
 80036b4:	7ffa      	ldrb	r2, [r7, #31]
 80036b6:	0092      	lsls	r2, r2, #2
 80036b8:	440a      	add	r2, r1
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	3320      	adds	r3, #32
 80036be:	443b      	add	r3, r7
 80036c0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80036c4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80036c6:	7ffb      	ldrb	r3, [r7, #31]
 80036c8:	3301      	adds	r3, #1
 80036ca:	77fb      	strb	r3, [r7, #31]
 80036cc:	7ffb      	ldrb	r3, [r7, #31]
 80036ce:	2b07      	cmp	r3, #7
 80036d0:	d9ec      	bls.n	80036ac <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036da:	b29a      	uxth	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0208 	orr.w	r2, r2, #8
 80036e4:	b292      	uxth	r2, r2
 80036e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036fc:	b292      	uxth	r2, r2
 80036fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0204 	orr.w	r2, r2, #4
 8003714:	b292      	uxth	r2, r2
 8003716:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f006 f97e 	bl	8009a1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003720:	e026      	b.n	8003770 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00f      	beq.n	800374c <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003734:	b29a      	uxth	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800373e:	b292      	uxth	r2, r2
 8003740:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f006 f93c 	bl	80099c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800374a:	e011      	b.n	8003770 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00c      	beq.n	8003770 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800375e:	b29a      	uxth	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003768:	b292      	uxth	r2, r2
 800376a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800376e:	bf00      	nop
  }
}
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_PCD_SetAddress+0x1a>
 800378c:	2302      	movs	r3, #2
 800378e:	e012      	b.n	80037b6 <HAL_PCD_SetAddress+0x40>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	78fa      	ldrb	r2, [r7, #3]
 800379c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f004 fa6c 	bl	8007c84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
 80037c6:	4608      	mov	r0, r1
 80037c8:	4611      	mov	r1, r2
 80037ca:	461a      	mov	r2, r3
 80037cc:	4603      	mov	r3, r0
 80037ce:	70fb      	strb	r3, [r7, #3]
 80037d0:	460b      	mov	r3, r1
 80037d2:	803b      	strh	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	da0e      	bge.n	8003802 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	f003 0207 	and.w	r2, r3, #7
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	3310      	adds	r3, #16
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4413      	add	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	705a      	strb	r2, [r3, #1]
 8003800:	e00e      	b.n	8003820 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	f003 0207 	and.w	r2, r3, #7
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	4413      	add	r3, r2
 8003818:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003820:	78fb      	ldrb	r3, [r7, #3]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	b2da      	uxtb	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800382c:	883a      	ldrh	r2, [r7, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	78ba      	ldrb	r2, [r7, #2]
 8003836:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003838:	78bb      	ldrb	r3, [r7, #2]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d102      	bne.n	8003844 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_PCD_EP_Open+0x94>
 800384e:	2302      	movs	r3, #2
 8003850:	e00e      	b.n	8003870 <HAL_PCD_EP_Open+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68f9      	ldr	r1, [r7, #12]
 8003860:	4618      	mov	r0, r3
 8003862:	f001 ffb5 	bl	80057d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800386e:	7afb      	ldrb	r3, [r7, #11]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003888:	2b00      	cmp	r3, #0
 800388a:	da0e      	bge.n	80038aa <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	f003 0207 	and.w	r2, r3, #7
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	3310      	adds	r3, #16
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	4413      	add	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	705a      	strb	r2, [r3, #1]
 80038a8:	e00e      	b.n	80038c8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	f003 0207 	and.w	r2, r3, #7
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	4413      	add	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d101      	bne.n	80038e2 <HAL_PCD_EP_Close+0x6a>
 80038de:	2302      	movs	r3, #2
 80038e0:	e00e      	b.n	8003900 <HAL_PCD_EP_Close+0x88>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68f9      	ldr	r1, [r7, #12]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f002 fb2d 	bl	8005f50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	603b      	str	r3, [r7, #0]
 8003914:	460b      	mov	r3, r1
 8003916:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003918:	7afb      	ldrb	r3, [r7, #11]
 800391a:	f003 0207 	and.w	r2, r3, #7
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2200      	movs	r2, #0
 8003940:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003948:	7afb      	ldrb	r3, [r7, #11]
 800394a:	f003 0307 	and.w	r3, r3, #7
 800394e:	b2da      	uxtb	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6979      	ldr	r1, [r7, #20]
 800395a:	4618      	mov	r0, r3
 800395c:	f002 fce4 	bl	8006328 <USB_EPStartXfer>

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	460b      	mov	r3, r1
 8003974:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	f003 0207 	and.w	r2, r3, #7
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	440b      	add	r3, r1
 8003988:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800398c:	681b      	ldr	r3, [r3, #0]
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	460b      	mov	r3, r1
 80039a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039a8:	7afb      	ldrb	r3, [r7, #11]
 80039aa:	f003 0207 	and.w	r2, r3, #7
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	3310      	adds	r3, #16
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2200      	movs	r2, #0
 80039dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2201      	movs	r2, #1
 80039e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039e4:	7afb      	ldrb	r3, [r7, #11]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6979      	ldr	r1, [r7, #20]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f002 fc96 	bl	8006328 <USB_EPStartXfer>

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	7912      	ldrb	r2, [r2, #4]
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e04c      	b.n	8003abe <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	da0e      	bge.n	8003a4a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	f003 0207 	and.w	r2, r3, #7
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	3310      	adds	r3, #16
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4413      	add	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2201      	movs	r2, #1
 8003a46:	705a      	strb	r2, [r3, #1]
 8003a48:	e00c      	b.n	8003a64 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	b2da      	uxtb	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_PCD_EP_SetStall+0x7e>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e01c      	b.n	8003abe <HAL_PCD_EP_SetStall+0xb8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68f9      	ldr	r1, [r7, #12]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f003 fff9 	bl	8007a8a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a98:	78fb      	ldrb	r3, [r7, #3]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d108      	bne.n	8003ab4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003aac:	4619      	mov	r1, r3
 8003aae:	4610      	mov	r0, r2
 8003ab0:	f004 f91e 	bl	8007cf0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	b084      	sub	sp, #16
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	7912      	ldrb	r2, [r2, #4]
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e040      	b.n	8003b66 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	da0e      	bge.n	8003b0a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	f003 0207 	and.w	r2, r3, #7
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	3310      	adds	r3, #16
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	4413      	add	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2201      	movs	r2, #1
 8003b06:	705a      	strb	r2, [r3, #1]
 8003b08:	e00e      	b.n	8003b28 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b0a:	78fb      	ldrb	r3, [r7, #3]
 8003b0c:	f003 0207 	and.w	r2, r3, #7
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	4413      	add	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_PCD_EP_ClrStall+0x82>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e00e      	b.n	8003b66 <HAL_PCD_EP_ClrStall+0xa0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68f9      	ldr	r1, [r7, #12]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f003 ffe7 	bl	8007b2a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b096      	sub	sp, #88	@ 0x58
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b76:	e3bb      	b.n	80042f0 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b80:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003b92:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f040 8175 	bne.w	8003e86 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d14e      	bne.n	8003c46 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003bb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bb8:	81fb      	strh	r3, [r7, #14]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	89fb      	ldrh	r3, [r7, #14]
 8003bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3310      	adds	r3, #16
 8003bd0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	3302      	adds	r3, #2
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bfc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003bfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c00:	695a      	ldr	r2, [r3, #20]
 8003c02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	441a      	add	r2, r3
 8003c08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c0a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f005 febd 	bl	800998e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	7b5b      	ldrb	r3, [r3, #13]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8368 	beq.w	80042f0 <PCD_EP_ISR_Handler+0x782>
 8003c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f040 8363 	bne.w	80042f0 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	7b5b      	ldrb	r3, [r3, #13]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	735a      	strb	r2, [r3, #13]
 8003c44:	e354      	b.n	80042f0 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c4c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d034      	beq.n	8003cce <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	4413      	add	r3, r2
 8003c78:	3306      	adds	r3, #6
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6812      	ldr	r2, [r2, #0]
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c8e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c9c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f004 f874 	bl	8007d90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	823b      	strh	r3, [r7, #16]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	8a3a      	ldrh	r2, [r7, #16]
 8003cbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cc2:	b292      	uxth	r2, r2
 8003cc4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f005 fe34 	bl	8009934 <HAL_PCD_SetupStageCallback>
 8003ccc:	e310      	b.n	80042f0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003cce:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f280 830c 	bge.w	80042f0 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	83fb      	strh	r3, [r7, #30]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	8bfa      	ldrh	r2, [r7, #30]
 8003cee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	461a      	mov	r2, r3
 8003d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	00db      	lsls	r3, r3, #3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3306      	adds	r3, #6
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d20:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d019      	beq.n	8003d5e <PCD_EP_ISR_Handler+0x1f0>
 8003d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2c:	695b      	ldr	r3, [r3, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d015      	beq.n	8003d5e <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d38:	6959      	ldr	r1, [r3, #20]
 8003d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d3c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d40:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	f004 f824 	bl	8007d90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003d48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4a:	695a      	ldr	r2, [r3, #20]
 8003d4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	441a      	add	r2, r3
 8003d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d54:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003d56:	2100      	movs	r1, #0
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f005 fdfd 	bl	8009958 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003d68:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 82bd 	bne.w	80042f0 <PCD_EP_ISR_Handler+0x782>
 8003d76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003d7a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d7e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d82:	f000 82b5 	beq.w	80042f0 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	61bb      	str	r3, [r7, #24]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	461a      	mov	r2, r3
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	801a      	strh	r2, [r3, #0]
 8003db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b3e      	cmp	r3, #62	@ 0x3e
 8003dbc:	d91d      	bls.n	8003dfa <PCD_EP_ISR_Handler+0x28c>
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d102      	bne.n	8003dd8 <PCD_EP_ISR_Handler+0x26a>
 8003dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	029b      	lsls	r3, r3, #10
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	4313      	orrs	r3, r2
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	801a      	strh	r2, [r3, #0]
 8003df8:	e026      	b.n	8003e48 <PCD_EP_ISR_Handler+0x2da>
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10a      	bne.n	8003e18 <PCD_EP_ISR_Handler+0x2aa>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	801a      	strh	r2, [r3, #0]
 8003e16:	e017      	b.n	8003e48 <PCD_EP_ISR_Handler+0x2da>
 8003e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	085b      	lsrs	r3, r3, #1
 8003e1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <PCD_EP_ISR_Handler+0x2c4>
 8003e2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e2e:	3301      	adds	r3, #1
 8003e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	029b      	lsls	r3, r3, #10
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	4313      	orrs	r3, r2
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e58:	827b      	strh	r3, [r7, #18]
 8003e5a:	8a7b      	ldrh	r3, [r7, #18]
 8003e5c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003e60:	827b      	strh	r3, [r7, #18]
 8003e62:	8a7b      	ldrh	r3, [r7, #18]
 8003e64:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e68:	827b      	strh	r3, [r7, #18]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	8a7b      	ldrh	r3, [r7, #18]
 8003e70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	8013      	strh	r3, [r2, #0]
 8003e84:	e234      	b.n	80042f0 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	4413      	add	r3, r2
 8003e94:	881b      	ldrh	r3, [r3, #0]
 8003e96:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e9a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f280 80fc 	bge.w	800409c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003eba:	4013      	ands	r3, r2
 8003ebc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003ed2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ed6:	b292      	uxth	r2, r2
 8003ed8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003eda:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	4413      	add	r3, r2
 8003eee:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ef2:	7b1b      	ldrb	r3, [r3, #12]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d125      	bne.n	8003f44 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3306      	adds	r3, #6
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f20:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003f24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 8092 	beq.w	8004052 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f34:	6959      	ldr	r1, [r3, #20]
 8003f36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f38:	88da      	ldrh	r2, [r3, #6]
 8003f3a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f3e:	f003 ff27 	bl	8007d90 <USB_ReadPMA>
 8003f42:	e086      	b.n	8004052 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003f44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f46:	78db      	ldrb	r3, [r3, #3]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d10a      	bne.n	8003f62 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003f4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f50:	461a      	mov	r2, r3
 8003f52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f9d9 	bl	800430c <HAL_PCD_EP_DB_Receive>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003f60:	e077      	b.n	8004052 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	441a      	add	r2, r3
 8003f8e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003f92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d024      	beq.n	800400a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fe2:	881b      	ldrh	r3, [r3, #0]
 8003fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fe8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003fec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d02e      	beq.n	8004052 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffa:	6959      	ldr	r1, [r3, #20]
 8003ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffe:	891a      	ldrh	r2, [r3, #8]
 8004000:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004004:	f003 fec4 	bl	8007d90 <USB_ReadPMA>
 8004008:	e023      	b.n	8004052 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004012:	b29b      	uxth	r3, r3
 8004014:	461a      	mov	r2, r3
 8004016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	3306      	adds	r3, #6
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6812      	ldr	r2, [r2, #0]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004032:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004036:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004044:	6959      	ldr	r1, [r3, #20]
 8004046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004048:	895a      	ldrh	r2, [r3, #10]
 800404a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800404e:	f003 fe9f 	bl	8007d90 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004054:	69da      	ldr	r2, [r3, #28]
 8004056:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800405a:	441a      	add	r2, r3
 800405c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800405e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004068:	441a      	add	r2, r3
 800406a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800406e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <PCD_EP_ISR_Handler+0x514>
 8004076:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800407a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	429a      	cmp	r2, r3
 8004080:	d206      	bcs.n	8004090 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	4619      	mov	r1, r3
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f005 fc65 	bl	8009958 <HAL_PCD_DataOutStageCallback>
 800408e:	e005      	b.n	800409c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004096:	4618      	mov	r0, r3
 8004098:	f002 f946 	bl	8006328 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800409c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80040a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8123 	beq.w	80042f0 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80040aa:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	3310      	adds	r3, #16
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	4413      	add	r3, r2
 80040bc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80040d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040d8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80040ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80040fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040fc:	78db      	ldrb	r3, [r3, #3]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	f040 80a2 	bne.w	8004248 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004104:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004106:	2200      	movs	r2, #0
 8004108:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800410a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800410c:	7b1b      	ldrb	r3, [r3, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8093 	beq.w	800423a <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004114:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d046      	beq.n	80041ae <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004122:	785b      	ldrb	r3, [r3, #1]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d126      	bne.n	8004176 <PCD_EP_ISR_Handler+0x608>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	627b      	str	r3, [r7, #36]	@ 0x24
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004136:	b29b      	uxth	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	4413      	add	r3, r2
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	011a      	lsls	r2, r3, #4
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	4413      	add	r3, r2
 800414a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800414e:	623b      	str	r3, [r7, #32]
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	b29b      	uxth	r3, r3
 8004156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800415a:	b29a      	uxth	r2, r3
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	801a      	strh	r2, [r3, #0]
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800416a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800416e:	b29a      	uxth	r2, r3
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	801a      	strh	r2, [r3, #0]
 8004174:	e061      	b.n	800423a <PCD_EP_ISR_Handler+0x6cc>
 8004176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004178:	785b      	ldrb	r3, [r3, #1]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d15d      	bne.n	800423a <PCD_EP_ISR_Handler+0x6cc>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800418c:	b29b      	uxth	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004192:	4413      	add	r3, r2
 8004194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	011a      	lsls	r2, r3, #4
 800419c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419e:	4413      	add	r3, r2
 80041a0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80041a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a8:	2200      	movs	r2, #0
 80041aa:	801a      	strh	r2, [r3, #0]
 80041ac:	e045      	b.n	800423a <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b6:	785b      	ldrb	r3, [r3, #1]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d126      	bne.n	800420a <PCD_EP_ISR_Handler+0x69c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d0:	4413      	add	r3, r2
 80041d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80041d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	011a      	lsls	r2, r3, #4
 80041da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041dc:	4413      	add	r3, r2
 80041de:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80041e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f2:	801a      	strh	r2, [r3, #0]
 80041f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004202:	b29a      	uxth	r2, r3
 8004204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004206:	801a      	strh	r2, [r3, #0]
 8004208:	e017      	b.n	800423a <PCD_EP_ISR_Handler+0x6cc>
 800420a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420c:	785b      	ldrb	r3, [r3, #1]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d113      	bne.n	800423a <PCD_EP_ISR_Handler+0x6cc>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800421a:	b29b      	uxth	r3, r3
 800421c:	461a      	mov	r2, r3
 800421e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004220:	4413      	add	r3, r2
 8004222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	011a      	lsls	r2, r3, #4
 800422a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800422c:	4413      	add	r3, r2
 800422e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004232:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004236:	2200      	movs	r2, #0
 8004238:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800423a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	4619      	mov	r1, r3
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f005 fba4 	bl	800998e <HAL_PCD_DataInStageCallback>
 8004246:	e053      	b.n	80042f0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004248:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800424c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d146      	bne.n	80042e2 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800425c:	b29b      	uxth	r3, r3
 800425e:	461a      	mov	r2, r3
 8004260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	4413      	add	r3, r2
 8004268:	3302      	adds	r3, #2
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	4413      	add	r3, r2
 8004272:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800427c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004282:	699a      	ldr	r2, [r3, #24]
 8004284:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004288:	429a      	cmp	r2, r3
 800428a:	d907      	bls.n	800429c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800428c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004294:	1ad2      	subs	r2, r2, r3
 8004296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004298:	619a      	str	r2, [r3, #24]
 800429a:	e002      	b.n	80042a2 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800429c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800429e:	2200      	movs	r2, #0
 80042a0:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80042a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d106      	bne.n	80042b8 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80042aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	4619      	mov	r1, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f005 fb6c 	bl	800998e <HAL_PCD_DataInStageCallback>
 80042b6:	e01b      	b.n	80042f0 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80042b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80042c0:	441a      	add	r2, r3
 80042c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80042c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042c8:	69da      	ldr	r2, [r3, #28]
 80042ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80042ce:	441a      	add	r2, r3
 80042d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042d2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042da:	4618      	mov	r0, r3
 80042dc:	f002 f824 	bl	8006328 <USB_EPStartXfer>
 80042e0:	e006      	b.n	80042f0 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80042e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80042e6:	461a      	mov	r2, r3
 80042e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f91b 	bl	8004526 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	b21b      	sxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f6ff ac3b 	blt.w	8003b78 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3758      	adds	r7, #88	@ 0x58
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	4613      	mov	r3, r2
 8004318:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d07e      	beq.n	8004422 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800432c:	b29b      	uxth	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	3302      	adds	r3, #2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	6812      	ldr	r2, [r2, #0]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800434c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	699a      	ldr	r2, [r3, #24]
 8004352:	8b7b      	ldrh	r3, [r7, #26]
 8004354:	429a      	cmp	r2, r3
 8004356:	d306      	bcc.n	8004366 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	8b7b      	ldrh	r3, [r7, #26]
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	619a      	str	r2, [r3, #24]
 8004364:	e002      	b.n	800436c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2200      	movs	r2, #0
 800436a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d123      	bne.n	80043bc <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800438a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438e:	833b      	strh	r3, [r7, #24]
 8004390:	8b3b      	ldrh	r3, [r7, #24]
 8004392:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004396:	833b      	strh	r3, [r7, #24]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	8b3b      	ldrh	r3, [r7, #24]
 80043a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043bc:	88fb      	ldrh	r3, [r7, #6]
 80043be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d01f      	beq.n	8004406 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e0:	82fb      	strh	r3, [r7, #22]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	461a      	mov	r2, r3
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	441a      	add	r2, r3
 80043f0:	8afb      	ldrh	r3, [r7, #22]
 80043f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004402:	b29b      	uxth	r3, r3
 8004404:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004406:	8b7b      	ldrh	r3, [r7, #26]
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8087 	beq.w	800451c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	6959      	ldr	r1, [r3, #20]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	891a      	ldrh	r2, [r3, #8]
 800441a:	8b7b      	ldrh	r3, [r7, #26]
 800441c:	f003 fcb8 	bl	8007d90 <USB_ReadPMA>
 8004420:	e07c      	b.n	800451c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800442a:	b29b      	uxth	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	4413      	add	r3, r2
 8004436:	3306      	adds	r3, #6
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800444a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	8b7b      	ldrh	r3, [r7, #26]
 8004452:	429a      	cmp	r2, r3
 8004454:	d306      	bcc.n	8004464 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	8b7b      	ldrh	r3, [r7, #26]
 800445c:	1ad2      	subs	r2, r2, r3
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	619a      	str	r2, [r3, #24]
 8004462:	e002      	b.n	800446a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d123      	bne.n	80044ba <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	461a      	mov	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004488:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800448c:	83fb      	strh	r3, [r7, #30]
 800448e:	8bfb      	ldrh	r3, [r7, #30]
 8004490:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004494:	83fb      	strh	r3, [r7, #30]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	441a      	add	r2, r3
 80044a4:	8bfb      	ldrh	r3, [r7, #30]
 80044a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80044ba:	88fb      	ldrh	r3, [r7, #6]
 80044bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d11f      	bne.n	8004504 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044de:	83bb      	strh	r3, [r7, #28]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	8bbb      	ldrh	r3, [r7, #28]
 80044f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80044f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80044f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004500:	b29b      	uxth	r3, r3
 8004502:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004504:	8b7b      	ldrh	r3, [r7, #26]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d008      	beq.n	800451c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	6959      	ldr	r1, [r3, #20]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	895a      	ldrh	r2, [r3, #10]
 8004516:	8b7b      	ldrh	r3, [r7, #26]
 8004518:	f003 fc3a 	bl	8007d90 <USB_ReadPMA>
    }
  }

  return count;
 800451c:	8b7b      	ldrh	r3, [r7, #26]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b0a4      	sub	sp, #144	@ 0x90
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	4613      	mov	r3, r2
 8004532:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004534:	88fb      	ldrh	r3, [r7, #6]
 8004536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 81dd 	beq.w	80048fa <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004548:	b29b      	uxth	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4413      	add	r3, r2
 8004554:	3302      	adds	r3, #2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004568:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	699a      	ldr	r2, [r3, #24]
 8004570:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004574:	429a      	cmp	r2, r3
 8004576:	d907      	bls.n	8004588 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	699a      	ldr	r2, [r3, #24]
 800457c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004580:	1ad2      	subs	r2, r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	619a      	str	r2, [r3, #24]
 8004586:	e002      	b.n	800458e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2200      	movs	r2, #0
 800458c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	2b00      	cmp	r3, #0
 8004594:	f040 80b9 	bne.w	800470a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d126      	bne.n	80045ee <HAL_PCD_EP_DB_Transmit+0xc8>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b4:	4413      	add	r3, r2
 80045b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	011a      	lsls	r2, r3, #4
 80045be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045c0:	4413      	add	r3, r2
 80045c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80045c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ea:	801a      	strh	r2, [r3, #0]
 80045ec:	e01a      	b.n	8004624 <HAL_PCD_EP_DB_Transmit+0xfe>
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	785b      	ldrb	r3, [r3, #1]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d116      	bne.n	8004624 <HAL_PCD_EP_DB_Transmit+0xfe>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004604:	b29b      	uxth	r3, r3
 8004606:	461a      	mov	r2, r3
 8004608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460a:	4413      	add	r3, r2
 800460c:	637b      	str	r3, [r7, #52]	@ 0x34
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	011a      	lsls	r2, r3, #4
 8004614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004616:	4413      	add	r3, r2
 8004618:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800461c:	633b      	str	r3, [r7, #48]	@ 0x30
 800461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004620:	2200      	movs	r2, #0
 8004622:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	627b      	str	r3, [r7, #36]	@ 0x24
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	785b      	ldrb	r3, [r3, #1]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d126      	bne.n	8004680 <HAL_PCD_EP_DB_Transmit+0x15a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004640:	b29b      	uxth	r3, r3
 8004642:	461a      	mov	r2, r3
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	4413      	add	r3, r2
 8004648:	61fb      	str	r3, [r7, #28]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	011a      	lsls	r2, r3, #4
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	4413      	add	r3, r2
 8004654:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004664:	b29a      	uxth	r2, r3
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	801a      	strh	r2, [r3, #0]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	b29b      	uxth	r3, r3
 8004670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004678:	b29a      	uxth	r2, r3
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	801a      	strh	r2, [r3, #0]
 800467e:	e017      	b.n	80046b0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d113      	bne.n	80046b0 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004690:	b29b      	uxth	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	4413      	add	r3, r2
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	011a      	lsls	r2, r3, #4
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	4413      	add	r3, r2
 80046a4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80046a8:	623b      	str	r3, [r7, #32]
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	2200      	movs	r2, #0
 80046ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f005 f969 	bl	800998e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 82fc 	beq.w	8004cc0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e2:	82fb      	strh	r3, [r7, #22]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	441a      	add	r2, r3
 80046f2:	8afb      	ldrh	r3, [r7, #22]
 80046f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004704:	b29b      	uxth	r3, r3
 8004706:	8013      	strh	r3, [r2, #0]
 8004708:	e2da      	b.n	8004cc0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d021      	beq.n	8004758 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	b29b      	uxth	r3, r3
 8004726:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800472a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800472e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	461a      	mov	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	441a      	add	r2, r3
 8004740:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800474c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004754:	b29b      	uxth	r3, r3
 8004756:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800475e:	2b01      	cmp	r3, #1
 8004760:	f040 82ae 	bne.w	8004cc0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	695a      	ldr	r2, [r3, #20]
 8004768:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800476c:	441a      	add	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	69da      	ldr	r2, [r3, #28]
 8004776:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800477a:	441a      	add	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	6a1a      	ldr	r2, [r3, #32]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	429a      	cmp	r2, r3
 800478a:	d30b      	bcc.n	80047a4 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6a1a      	ldr	r2, [r3, #32]
 8004798:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800479c:	1ad2      	subs	r2, r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	621a      	str	r2, [r3, #32]
 80047a2:	e017      	b.n	80047d4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d108      	bne.n	80047be <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80047ac:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80047b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80047bc:	e00a      	b.n	80047d4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2200      	movs	r2, #0
 80047d2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	785b      	ldrb	r3, [r3, #1]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d165      	bne.n	80048a8 <HAL_PCD_EP_DB_Transmit+0x382>
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047f0:	4413      	add	r3, r2
 80047f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	011a      	lsls	r2, r3, #4
 80047fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047fc:	4413      	add	r3, r2
 80047fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004802:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800480e:	b29a      	uxth	r2, r3
 8004810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004818:	2b3e      	cmp	r3, #62	@ 0x3e
 800481a:	d91d      	bls.n	8004858 <HAL_PCD_EP_DB_Transmit+0x332>
 800481c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004824:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004828:	f003 031f 	and.w	r3, r3, #31
 800482c:	2b00      	cmp	r3, #0
 800482e:	d102      	bne.n	8004836 <HAL_PCD_EP_DB_Transmit+0x310>
 8004830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004832:	3b01      	subs	r3, #1
 8004834:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004838:	881b      	ldrh	r3, [r3, #0]
 800483a:	b29a      	uxth	r2, r3
 800483c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800483e:	b29b      	uxth	r3, r3
 8004840:	029b      	lsls	r3, r3, #10
 8004842:	b29b      	uxth	r3, r3
 8004844:	4313      	orrs	r3, r2
 8004846:	b29b      	uxth	r3, r3
 8004848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004850:	b29a      	uxth	r2, r3
 8004852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004854:	801a      	strh	r2, [r3, #0]
 8004856:	e044      	b.n	80048e2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004858:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <HAL_PCD_EP_DB_Transmit+0x350>
 8004860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800486a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486e:	b29a      	uxth	r2, r3
 8004870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004872:	801a      	strh	r2, [r3, #0]
 8004874:	e035      	b.n	80048e2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004876:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800487a:	085b      	lsrs	r3, r3, #1
 800487c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800487e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_PCD_EP_DB_Transmit+0x36a>
 800488a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800488c:	3301      	adds	r3, #1
 800488e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29a      	uxth	r2, r3
 8004896:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004898:	b29b      	uxth	r3, r3
 800489a:	029b      	lsls	r3, r3, #10
 800489c:	b29b      	uxth	r3, r3
 800489e:	4313      	orrs	r3, r2
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048a4:	801a      	strh	r2, [r3, #0]
 80048a6:	e01c      	b.n	80048e2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d118      	bne.n	80048e2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048be:	b29b      	uxth	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048c4:	4413      	add	r3, r2
 80048c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	011a      	lsls	r2, r3, #4
 80048ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048d0:	4413      	add	r3, r2
 80048d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80048d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80048d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048dc:	b29a      	uxth	r2, r3
 80048de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048e0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6818      	ldr	r0, [r3, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	6959      	ldr	r1, [r3, #20]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	891a      	ldrh	r2, [r3, #8]
 80048ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	f003 fa07 	bl	8007d06 <USB_WritePMA>
 80048f8:	e1e2      	b.n	8004cc0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004902:	b29b      	uxth	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	4413      	add	r3, r2
 800490e:	3306      	adds	r3, #6
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004922:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800492e:	429a      	cmp	r2, r3
 8004930:	d307      	bcc.n	8004942 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	699a      	ldr	r2, [r3, #24]
 8004936:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800493a:	1ad2      	subs	r2, r2, r3
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	619a      	str	r2, [r3, #24]
 8004940:	e002      	b.n	8004948 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2200      	movs	r2, #0
 8004946:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f040 80c0 	bne.w	8004ad2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	785b      	ldrb	r3, [r3, #1]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d126      	bne.n	80049a8 <HAL_PCD_EP_DB_Transmit+0x482>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004968:	b29b      	uxth	r3, r3
 800496a:	461a      	mov	r2, r3
 800496c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800496e:	4413      	add	r3, r2
 8004970:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	011a      	lsls	r2, r3, #4
 8004978:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800497a:	4413      	add	r3, r2
 800497c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004980:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004982:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004984:	881b      	ldrh	r3, [r3, #0]
 8004986:	b29b      	uxth	r3, r3
 8004988:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800498c:	b29a      	uxth	r2, r3
 800498e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004990:	801a      	strh	r2, [r3, #0]
 8004992:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800499c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	e01a      	b.n	80049de <HAL_PCD_EP_DB_Transmit+0x4b8>
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	785b      	ldrb	r3, [r3, #1]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d116      	bne.n	80049de <HAL_PCD_EP_DB_Transmit+0x4b8>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049be:	b29b      	uxth	r3, r3
 80049c0:	461a      	mov	r2, r3
 80049c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049c4:	4413      	add	r3, r2
 80049c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	011a      	lsls	r2, r3, #4
 80049ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049d0:	4413      	add	r3, r2
 80049d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80049d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80049d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049da:	2200      	movs	r2, #0
 80049dc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	785b      	ldrb	r3, [r3, #1]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d12b      	bne.n	8004a44 <HAL_PCD_EP_DB_Transmit+0x51e>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a00:	4413      	add	r3, r2
 8004a02:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	011a      	lsls	r2, r3, #4
 8004a0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a28:	801a      	strh	r2, [r3, #0]
 8004a2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a40:	801a      	strh	r2, [r3, #0]
 8004a42:	e017      	b.n	8004a74 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d113      	bne.n	8004a74 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a5a:	4413      	add	r3, r2
 8004a5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	011a      	lsls	r2, r3, #4
 8004a64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a66:	4413      	add	r3, r2
 8004a68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004a6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a70:	2200      	movs	r2, #0
 8004a72:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f004 ff87 	bl	800998e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 811a 	bne.w	8004cc0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	881b      	ldrh	r3, [r3, #0]
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aa6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	441a      	add	r2, r3
 8004ab8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004abc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ac0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ac8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	8013      	strh	r3, [r2, #0]
 8004ad0:	e0f6      	b.n	8004cc0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004ad2:	88fb      	ldrh	r3, [r7, #6]
 8004ad4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d121      	bne.n	8004b20 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	b29b      	uxth	r3, r3
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004af6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	441a      	add	r2, r3
 8004b08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004b0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	f040 80ca 	bne.w	8004cc0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	695a      	ldr	r2, [r3, #20]
 8004b30:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b34:	441a      	add	r2, r3
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	69da      	ldr	r2, [r3, #28]
 8004b3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b42:	441a      	add	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	6a1a      	ldr	r2, [r3, #32]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d30b      	bcc.n	8004b6c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	6a1a      	ldr	r2, [r3, #32]
 8004b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b64:	1ad2      	subs	r2, r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	621a      	str	r2, [r3, #32]
 8004b6a:	e017      	b.n	8004b9c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d108      	bne.n	8004b86 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004b74:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004b78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004b84:	e00a      	b.n	8004b9c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2200      	movs	r2, #0
 8004b92:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	785b      	ldrb	r3, [r3, #1]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d165      	bne.n	8004c76 <HAL_PCD_EP_DB_Transmit+0x750>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bbe:	4413      	add	r3, r2
 8004bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	011a      	lsls	r2, r3, #4
 8004bc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004bca:	4413      	add	r3, r2
 8004bcc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004be0:	801a      	strh	r2, [r3, #0]
 8004be2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004be6:	2b3e      	cmp	r3, #62	@ 0x3e
 8004be8:	d91d      	bls.n	8004c26 <HAL_PCD_EP_DB_Transmit+0x700>
 8004bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d102      	bne.n	8004c04 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004bfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c00:	3b01      	subs	r3, #1
 8004c02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	029b      	lsls	r3, r3, #10
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	4313      	orrs	r3, r2
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c22:	801a      	strh	r2, [r3, #0]
 8004c24:	e041      	b.n	8004caa <HAL_PCD_EP_DB_Transmit+0x784>
 8004c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004c2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c30:	881b      	ldrh	r3, [r3, #0]
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c40:	801a      	strh	r2, [r3, #0]
 8004c42:	e032      	b.n	8004caa <HAL_PCD_EP_DB_Transmit+0x784>
 8004c44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d002      	beq.n	8004c5e <HAL_PCD_EP_DB_Transmit+0x738>
 8004c58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c60:	881b      	ldrh	r3, [r3, #0]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	029b      	lsls	r3, r3, #10
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c72:	801a      	strh	r2, [r3, #0]
 8004c74:	e019      	b.n	8004caa <HAL_PCD_EP_DB_Transmit+0x784>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d115      	bne.n	8004caa <HAL_PCD_EP_DB_Transmit+0x784>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c8c:	4413      	add	r3, r2
 8004c8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	011a      	lsls	r2, r3, #4
 8004c96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c98:	4413      	add	r3, r2
 8004c9a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ca8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6959      	ldr	r1, [r3, #20]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	895a      	ldrh	r2, [r3, #10]
 8004cb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f003 f823 	bl	8007d06 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	881b      	ldrh	r3, [r3, #0]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cda:	82bb      	strh	r3, [r7, #20]
 8004cdc:	8abb      	ldrh	r3, [r7, #20]
 8004cde:	f083 0310 	eor.w	r3, r3, #16
 8004ce2:	82bb      	strh	r3, [r7, #20]
 8004ce4:	8abb      	ldrh	r3, [r7, #20]
 8004ce6:	f083 0320 	eor.w	r3, r3, #32
 8004cea:	82bb      	strh	r3, [r7, #20]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	441a      	add	r2, r3
 8004cfa:	8abb      	ldrh	r3, [r7, #20]
 8004cfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3790      	adds	r7, #144	@ 0x90
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b087      	sub	sp, #28
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	60f8      	str	r0, [r7, #12]
 8004d22:	607b      	str	r3, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	817b      	strh	r3, [r7, #10]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004d2c:	897b      	ldrh	r3, [r7, #10]
 8004d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00b      	beq.n	8004d50 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d38:	897b      	ldrh	r3, [r7, #10]
 8004d3a:	f003 0207 	and.w	r2, r3, #7
 8004d3e:	4613      	mov	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	3310      	adds	r3, #16
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	e009      	b.n	8004d64 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d50:	897a      	ldrh	r2, [r7, #10]
 8004d52:	4613      	mov	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004d64:	893b      	ldrh	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d107      	bne.n	8004d7a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	80da      	strh	r2, [r3, #6]
 8004d78:	e00b      	b.n	8004d92 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	0c1b      	lsrs	r3, r3, #16
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bc80      	pop	{r7}
 8004d9c:	4770      	bx	lr
	...

08004da0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b086      	sub	sp, #24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e272      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8087 	beq.w	8004ece <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dc0:	4b92      	ldr	r3, [pc, #584]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 030c 	and.w	r3, r3, #12
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d00c      	beq.n	8004de6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004dcc:	4b8f      	ldr	r3, [pc, #572]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f003 030c 	and.w	r3, r3, #12
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d112      	bne.n	8004dfe <HAL_RCC_OscConfig+0x5e>
 8004dd8:	4b8c      	ldr	r3, [pc, #560]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de4:	d10b      	bne.n	8004dfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de6:	4b89      	ldr	r3, [pc, #548]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d06c      	beq.n	8004ecc <HAL_RCC_OscConfig+0x12c>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d168      	bne.n	8004ecc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e24c      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e06:	d106      	bne.n	8004e16 <HAL_RCC_OscConfig+0x76>
 8004e08:	4b80      	ldr	r3, [pc, #512]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a7f      	ldr	r2, [pc, #508]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	e02e      	b.n	8004e74 <HAL_RCC_OscConfig+0xd4>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10c      	bne.n	8004e38 <HAL_RCC_OscConfig+0x98>
 8004e1e:	4b7b      	ldr	r3, [pc, #492]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a7a      	ldr	r2, [pc, #488]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e28:	6013      	str	r3, [r2, #0]
 8004e2a:	4b78      	ldr	r3, [pc, #480]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a77      	ldr	r2, [pc, #476]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	e01d      	b.n	8004e74 <HAL_RCC_OscConfig+0xd4>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCC_OscConfig+0xbc>
 8004e42:	4b72      	ldr	r3, [pc, #456]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a71      	ldr	r2, [pc, #452]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e4c:	6013      	str	r3, [r2, #0]
 8004e4e:	4b6f      	ldr	r3, [pc, #444]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a6e      	ldr	r2, [pc, #440]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e58:	6013      	str	r3, [r2, #0]
 8004e5a:	e00b      	b.n	8004e74 <HAL_RCC_OscConfig+0xd4>
 8004e5c:	4b6b      	ldr	r3, [pc, #428]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a6a      	ldr	r2, [pc, #424]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	4b68      	ldr	r3, [pc, #416]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a67      	ldr	r2, [pc, #412]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d013      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fc fbc8 	bl	8001610 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e84:	f7fc fbc4 	bl	8001610 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b64      	cmp	r3, #100	@ 0x64
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e200      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e96:	4b5d      	ldr	r3, [pc, #372]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d0f0      	beq.n	8004e84 <HAL_RCC_OscConfig+0xe4>
 8004ea2:	e014      	b.n	8004ece <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fc fbb4 	bl	8001610 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eac:	f7fc fbb0 	bl	8001610 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	@ 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e1ec      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ebe:	4b53      	ldr	r3, [pc, #332]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <HAL_RCC_OscConfig+0x10c>
 8004eca:	e000      	b.n	8004ece <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d063      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004eda:	4b4c      	ldr	r3, [pc, #304]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f003 030c 	and.w	r3, r3, #12
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00b      	beq.n	8004efe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004ee6:	4b49      	ldr	r3, [pc, #292]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f003 030c 	and.w	r3, r3, #12
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d11c      	bne.n	8004f2c <HAL_RCC_OscConfig+0x18c>
 8004ef2:	4b46      	ldr	r3, [pc, #280]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d116      	bne.n	8004f2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004efe:	4b43      	ldr	r3, [pc, #268]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d005      	beq.n	8004f16 <HAL_RCC_OscConfig+0x176>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d001      	beq.n	8004f16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e1c0      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f16:	4b3d      	ldr	r3, [pc, #244]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4939      	ldr	r1, [pc, #228]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2a:	e03a      	b.n	8004fa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d020      	beq.n	8004f76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f34:	4b36      	ldr	r3, [pc, #216]	@ (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f36:	2201      	movs	r2, #1
 8004f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3a:	f7fc fb69 	bl	8001610 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f42:	f7fc fb65 	bl	8001610 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e1a1      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f54:	4b2d      	ldr	r3, [pc, #180]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f60:	4b2a      	ldr	r3, [pc, #168]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	4927      	ldr	r1, [pc, #156]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	600b      	str	r3, [r1, #0]
 8004f74:	e015      	b.n	8004fa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f76:	4b26      	ldr	r3, [pc, #152]	@ (8005010 <HAL_RCC_OscConfig+0x270>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7fc fb48 	bl	8001610 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f84:	f7fc fb44 	bl	8001610 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e180      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f96:	4b1d      	ldr	r3, [pc, #116]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1f0      	bne.n	8004f84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d03a      	beq.n	8005024 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d019      	beq.n	8004fea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fb6:	4b17      	ldr	r3, [pc, #92]	@ (8005014 <HAL_RCC_OscConfig+0x274>)
 8004fb8:	2201      	movs	r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fbc:	f7fc fb28 	bl	8001610 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fc4:	f7fc fb24 	bl	8001610 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e160      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800500c <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d0f0      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	f000 faba 	bl	800555c <RCC_Delay>
 8004fe8:	e01c      	b.n	8005024 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fea:	4b0a      	ldr	r3, [pc, #40]	@ (8005014 <HAL_RCC_OscConfig+0x274>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff0:	f7fc fb0e 	bl	8001610 <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff6:	e00f      	b.n	8005018 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff8:	f7fc fb0a 	bl	8001610 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d908      	bls.n	8005018 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e146      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
 800500a:	bf00      	nop
 800500c:	40021000 	.word	0x40021000
 8005010:	42420000 	.word	0x42420000
 8005014:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005018:	4b92      	ldr	r3, [pc, #584]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1e9      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 80a6 	beq.w	800517e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005032:	2300      	movs	r3, #0
 8005034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005036:	4b8b      	ldr	r3, [pc, #556]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10d      	bne.n	800505e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005042:	4b88      	ldr	r3, [pc, #544]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	4a87      	ldr	r2, [pc, #540]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 8005048:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800504c:	61d3      	str	r3, [r2, #28]
 800504e:	4b85      	ldr	r3, [pc, #532]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005056:	60bb      	str	r3, [r7, #8]
 8005058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800505a:	2301      	movs	r3, #1
 800505c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505e:	4b82      	ldr	r3, [pc, #520]	@ (8005268 <HAL_RCC_OscConfig+0x4c8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005066:	2b00      	cmp	r3, #0
 8005068:	d118      	bne.n	800509c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800506a:	4b7f      	ldr	r3, [pc, #508]	@ (8005268 <HAL_RCC_OscConfig+0x4c8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a7e      	ldr	r2, [pc, #504]	@ (8005268 <HAL_RCC_OscConfig+0x4c8>)
 8005070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005076:	f7fc facb 	bl	8001610 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800507e:	f7fc fac7 	bl	8001610 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b64      	cmp	r3, #100	@ 0x64
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e103      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005090:	4b75      	ldr	r3, [pc, #468]	@ (8005268 <HAL_RCC_OscConfig+0x4c8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0f0      	beq.n	800507e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d106      	bne.n	80050b2 <HAL_RCC_OscConfig+0x312>
 80050a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	4a6e      	ldr	r2, [pc, #440]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80050aa:	f043 0301 	orr.w	r3, r3, #1
 80050ae:	6213      	str	r3, [r2, #32]
 80050b0:	e02d      	b.n	800510e <HAL_RCC_OscConfig+0x36e>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10c      	bne.n	80050d4 <HAL_RCC_OscConfig+0x334>
 80050ba:	4b6a      	ldr	r3, [pc, #424]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	4a69      	ldr	r2, [pc, #420]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80050c0:	f023 0301 	bic.w	r3, r3, #1
 80050c4:	6213      	str	r3, [r2, #32]
 80050c6:	4b67      	ldr	r3, [pc, #412]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	4a66      	ldr	r2, [pc, #408]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80050cc:	f023 0304 	bic.w	r3, r3, #4
 80050d0:	6213      	str	r3, [r2, #32]
 80050d2:	e01c      	b.n	800510e <HAL_RCC_OscConfig+0x36e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	2b05      	cmp	r3, #5
 80050da:	d10c      	bne.n	80050f6 <HAL_RCC_OscConfig+0x356>
 80050dc:	4b61      	ldr	r3, [pc, #388]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	4a60      	ldr	r2, [pc, #384]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80050e2:	f043 0304 	orr.w	r3, r3, #4
 80050e6:	6213      	str	r3, [r2, #32]
 80050e8:	4b5e      	ldr	r3, [pc, #376]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	4a5d      	ldr	r2, [pc, #372]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	6213      	str	r3, [r2, #32]
 80050f4:	e00b      	b.n	800510e <HAL_RCC_OscConfig+0x36e>
 80050f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	4a5a      	ldr	r2, [pc, #360]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	6213      	str	r3, [r2, #32]
 8005102:	4b58      	ldr	r3, [pc, #352]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	4a57      	ldr	r2, [pc, #348]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 8005108:	f023 0304 	bic.w	r3, r3, #4
 800510c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d015      	beq.n	8005142 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005116:	f7fc fa7b 	bl	8001610 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511c:	e00a      	b.n	8005134 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800511e:	f7fc fa77 	bl	8001610 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800512c:	4293      	cmp	r3, r2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e0b1      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005134:	4b4b      	ldr	r3, [pc, #300]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ee      	beq.n	800511e <HAL_RCC_OscConfig+0x37e>
 8005140:	e014      	b.n	800516c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005142:	f7fc fa65 	bl	8001610 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fc fa61 	bl	8001610 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e09b      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005160:	4b40      	ldr	r3, [pc, #256]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1ee      	bne.n	800514a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d105      	bne.n	800517e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005172:	4b3c      	ldr	r3, [pc, #240]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	4a3b      	ldr	r2, [pc, #236]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 8005178:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800517c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8087 	beq.w	8005296 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005188:	4b36      	ldr	r3, [pc, #216]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f003 030c 	and.w	r3, r3, #12
 8005190:	2b08      	cmp	r3, #8
 8005192:	d061      	beq.n	8005258 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	2b02      	cmp	r3, #2
 800519a:	d146      	bne.n	800522a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519c:	4b33      	ldr	r3, [pc, #204]	@ (800526c <HAL_RCC_OscConfig+0x4cc>)
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a2:	f7fc fa35 	bl	8001610 <HAL_GetTick>
 80051a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a8:	e008      	b.n	80051bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051aa:	f7fc fa31 	bl	8001610 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e06d      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051bc:	4b29      	ldr	r3, [pc, #164]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f0      	bne.n	80051aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d0:	d108      	bne.n	80051e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80051d2:	4b24      	ldr	r3, [pc, #144]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4921      	ldr	r1, [pc, #132]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a19      	ldr	r1, [r3, #32]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	430b      	orrs	r3, r1
 80051f6:	491b      	ldr	r1, [pc, #108]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051fc:	4b1b      	ldr	r3, [pc, #108]	@ (800526c <HAL_RCC_OscConfig+0x4cc>)
 80051fe:	2201      	movs	r2, #1
 8005200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005202:	f7fc fa05 	bl	8001610 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005208:	e008      	b.n	800521c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800520a:	f7fc fa01 	bl	8001610 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	2b02      	cmp	r3, #2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e03d      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800521c:	4b11      	ldr	r3, [pc, #68]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0f0      	beq.n	800520a <HAL_RCC_OscConfig+0x46a>
 8005228:	e035      	b.n	8005296 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522a:	4b10      	ldr	r3, [pc, #64]	@ (800526c <HAL_RCC_OscConfig+0x4cc>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005230:	f7fc f9ee 	bl	8001610 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005238:	f7fc f9ea 	bl	8001610 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e026      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800524a:	4b06      	ldr	r3, [pc, #24]	@ (8005264 <HAL_RCC_OscConfig+0x4c4>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x498>
 8005256:	e01e      	b.n	8005296 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d107      	bne.n	8005270 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e019      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
 8005264:	40021000 	.word	0x40021000
 8005268:	40007000 	.word	0x40007000
 800526c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005270:	4b0b      	ldr	r3, [pc, #44]	@ (80052a0 <HAL_RCC_OscConfig+0x500>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	429a      	cmp	r2, r3
 8005282:	d106      	bne.n	8005292 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528e:	429a      	cmp	r2, r3
 8005290:	d001      	beq.n	8005296 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40021000 	.word	0x40021000

080052a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0d0      	b.n	800545a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005464 <HAL_RCC_ClockConfig+0x1c0>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d910      	bls.n	80052e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052c6:	4b67      	ldr	r3, [pc, #412]	@ (8005464 <HAL_RCC_ClockConfig+0x1c0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f023 0207 	bic.w	r2, r3, #7
 80052ce:	4965      	ldr	r1, [pc, #404]	@ (8005464 <HAL_RCC_ClockConfig+0x1c0>)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d6:	4b63      	ldr	r3, [pc, #396]	@ (8005464 <HAL_RCC_ClockConfig+0x1c0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d001      	beq.n	80052e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0b8      	b.n	800545a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d020      	beq.n	8005336 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005300:	4b59      	ldr	r3, [pc, #356]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	4a58      	ldr	r2, [pc, #352]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005306:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800530a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005318:	4b53      	ldr	r3, [pc, #332]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4a52      	ldr	r2, [pc, #328]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 800531e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005322:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005324:	4b50      	ldr	r3, [pc, #320]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	494d      	ldr	r1, [pc, #308]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005332:	4313      	orrs	r3, r2
 8005334:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d040      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d107      	bne.n	800535a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534a:	4b47      	ldr	r3, [pc, #284]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d115      	bne.n	8005382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e07f      	b.n	800545a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b02      	cmp	r3, #2
 8005360:	d107      	bne.n	8005372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005362:	4b41      	ldr	r3, [pc, #260]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d109      	bne.n	8005382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e073      	b.n	800545a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005372:	4b3d      	ldr	r3, [pc, #244]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e06b      	b.n	800545a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005382:	4b39      	ldr	r3, [pc, #228]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f023 0203 	bic.w	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	4936      	ldr	r1, [pc, #216]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005390:	4313      	orrs	r3, r2
 8005392:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005394:	f7fc f93c 	bl	8001610 <HAL_GetTick>
 8005398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800539c:	f7fc f938 	bl	8001610 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e053      	b.n	800545a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f003 020c 	and.w	r2, r3, #12
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d1eb      	bne.n	800539c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053c4:	4b27      	ldr	r3, [pc, #156]	@ (8005464 <HAL_RCC_ClockConfig+0x1c0>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d210      	bcs.n	80053f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d2:	4b24      	ldr	r3, [pc, #144]	@ (8005464 <HAL_RCC_ClockConfig+0x1c0>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f023 0207 	bic.w	r2, r3, #7
 80053da:	4922      	ldr	r1, [pc, #136]	@ (8005464 <HAL_RCC_ClockConfig+0x1c0>)
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	4313      	orrs	r3, r2
 80053e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e2:	4b20      	ldr	r3, [pc, #128]	@ (8005464 <HAL_RCC_ClockConfig+0x1c0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d001      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e032      	b.n	800545a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005400:	4b19      	ldr	r3, [pc, #100]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	4916      	ldr	r1, [pc, #88]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 800540e:	4313      	orrs	r3, r2
 8005410:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0308 	and.w	r3, r3, #8
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800541e:	4b12      	ldr	r3, [pc, #72]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	490e      	ldr	r1, [pc, #56]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 800542e:	4313      	orrs	r3, r2
 8005430:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005432:	f000 f821 	bl	8005478 <HAL_RCC_GetSysClockFreq>
 8005436:	4602      	mov	r2, r0
 8005438:	4b0b      	ldr	r3, [pc, #44]	@ (8005468 <HAL_RCC_ClockConfig+0x1c4>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	091b      	lsrs	r3, r3, #4
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	490a      	ldr	r1, [pc, #40]	@ (800546c <HAL_RCC_ClockConfig+0x1c8>)
 8005444:	5ccb      	ldrb	r3, [r1, r3]
 8005446:	fa22 f303 	lsr.w	r3, r2, r3
 800544a:	4a09      	ldr	r2, [pc, #36]	@ (8005470 <HAL_RCC_ClockConfig+0x1cc>)
 800544c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800544e:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <HAL_RCC_ClockConfig+0x1d0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f7fc f89a 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40022000 	.word	0x40022000
 8005468:	40021000 	.word	0x40021000
 800546c:	0800a83c 	.word	0x0800a83c
 8005470:	20000000 	.word	0x20000000
 8005474:	20000004 	.word	0x20000004

08005478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	2300      	movs	r3, #0
 8005484:	60bb      	str	r3, [r7, #8]
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	2300      	movs	r3, #0
 800548c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005492:	4b1e      	ldr	r3, [pc, #120]	@ (800550c <HAL_RCC_GetSysClockFreq+0x94>)
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 030c 	and.w	r3, r3, #12
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d002      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0x30>
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d003      	beq.n	80054ae <HAL_RCC_GetSysClockFreq+0x36>
 80054a6:	e027      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80054a8:	4b19      	ldr	r3, [pc, #100]	@ (8005510 <HAL_RCC_GetSysClockFreq+0x98>)
 80054aa:	613b      	str	r3, [r7, #16]
      break;
 80054ac:	e027      	b.n	80054fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	0c9b      	lsrs	r3, r3, #18
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	4a17      	ldr	r2, [pc, #92]	@ (8005514 <HAL_RCC_GetSysClockFreq+0x9c>)
 80054b8:	5cd3      	ldrb	r3, [r2, r3]
 80054ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d010      	beq.n	80054e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80054c6:	4b11      	ldr	r3, [pc, #68]	@ (800550c <HAL_RCC_GetSysClockFreq+0x94>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	0c5b      	lsrs	r3, r3, #17
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	4a11      	ldr	r2, [pc, #68]	@ (8005518 <HAL_RCC_GetSysClockFreq+0xa0>)
 80054d2:	5cd3      	ldrb	r3, [r2, r3]
 80054d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a0d      	ldr	r2, [pc, #52]	@ (8005510 <HAL_RCC_GetSysClockFreq+0x98>)
 80054da:	fb03 f202 	mul.w	r2, r3, r2
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	e004      	b.n	80054f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a0c      	ldr	r2, [pc, #48]	@ (800551c <HAL_RCC_GetSysClockFreq+0xa4>)
 80054ec:	fb02 f303 	mul.w	r3, r2, r3
 80054f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	613b      	str	r3, [r7, #16]
      break;
 80054f6:	e002      	b.n	80054fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80054f8:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <HAL_RCC_GetSysClockFreq+0x98>)
 80054fa:	613b      	str	r3, [r7, #16]
      break;
 80054fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054fe:	693b      	ldr	r3, [r7, #16]
}
 8005500:	4618      	mov	r0, r3
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	bc80      	pop	{r7}
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40021000 	.word	0x40021000
 8005510:	007a1200 	.word	0x007a1200
 8005514:	0800a854 	.word	0x0800a854
 8005518:	0800a864 	.word	0x0800a864
 800551c:	003d0900 	.word	0x003d0900

08005520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005524:	4b02      	ldr	r3, [pc, #8]	@ (8005530 <HAL_RCC_GetHCLKFreq+0x10>)
 8005526:	681b      	ldr	r3, [r3, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	bc80      	pop	{r7}
 800552e:	4770      	bx	lr
 8005530:	20000000 	.word	0x20000000

08005534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005538:	f7ff fff2 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 800553c:	4602      	mov	r2, r0
 800553e:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	0a1b      	lsrs	r3, r3, #8
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	4903      	ldr	r1, [pc, #12]	@ (8005558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800554a:	5ccb      	ldrb	r3, [r1, r3]
 800554c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005550:	4618      	mov	r0, r3
 8005552:	bd80      	pop	{r7, pc}
 8005554:	40021000 	.word	0x40021000
 8005558:	0800a84c 	.word	0x0800a84c

0800555c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005564:	4b0a      	ldr	r3, [pc, #40]	@ (8005590 <RCC_Delay+0x34>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a0a      	ldr	r2, [pc, #40]	@ (8005594 <RCC_Delay+0x38>)
 800556a:	fba2 2303 	umull	r2, r3, r2, r3
 800556e:	0a5b      	lsrs	r3, r3, #9
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005578:	bf00      	nop
  }
  while (Delay --);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1e5a      	subs	r2, r3, #1
 800557e:	60fa      	str	r2, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1f9      	bne.n	8005578 <RCC_Delay+0x1c>
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr
 8005590:	20000000 	.word	0x20000000
 8005594:	10624dd3 	.word	0x10624dd3

08005598 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80055a0:	2300      	movs	r3, #0
 80055a2:	613b      	str	r3, [r7, #16]
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d07d      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80055b4:	2300      	movs	r3, #0
 80055b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055b8:	4b4f      	ldr	r3, [pc, #316]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ba:	69db      	ldr	r3, [r3, #28]
 80055bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10d      	bne.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c4:	4b4c      	ldr	r3, [pc, #304]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c6:	69db      	ldr	r3, [r3, #28]
 80055c8:	4a4b      	ldr	r2, [pc, #300]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ce:	61d3      	str	r3, [r2, #28]
 80055d0:	4b49      	ldr	r3, [pc, #292]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055dc:	2301      	movs	r3, #1
 80055de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e0:	4b46      	ldr	r3, [pc, #280]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d118      	bne.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055ec:	4b43      	ldr	r3, [pc, #268]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a42      	ldr	r2, [pc, #264]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80055f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055f8:	f7fc f80a 	bl	8001610 <HAL_GetTick>
 80055fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fe:	e008      	b.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005600:	f7fc f806 	bl	8001610 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b64      	cmp	r3, #100	@ 0x64
 800560c:	d901      	bls.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e06d      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005612:	4b3a      	ldr	r3, [pc, #232]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800561e:	4b36      	ldr	r3, [pc, #216]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005626:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d02e      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	429a      	cmp	r2, r3
 800563a:	d027      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800563c:	4b2e      	ldr	r3, [pc, #184]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005644:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005646:	4b2e      	ldr	r3, [pc, #184]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005648:	2201      	movs	r2, #1
 800564a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800564c:	4b2c      	ldr	r3, [pc, #176]	@ (8005700 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800564e:	2200      	movs	r2, #0
 8005650:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005652:	4a29      	ldr	r2, [pc, #164]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d014      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005662:	f7fb ffd5 	bl	8001610 <HAL_GetTick>
 8005666:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005668:	e00a      	b.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566a:	f7fb ffd1 	bl	8001610 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005678:	4293      	cmp	r3, r2
 800567a:	d901      	bls.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e036      	b.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005680:	4b1d      	ldr	r3, [pc, #116]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0ee      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800568c:	4b1a      	ldr	r3, [pc, #104]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568e:	6a1b      	ldr	r3, [r3, #32]
 8005690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	4917      	ldr	r1, [pc, #92]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800569a:	4313      	orrs	r3, r2
 800569c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800569e:	7dfb      	ldrb	r3, [r7, #23]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d105      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a4:	4b14      	ldr	r3, [pc, #80]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	4a13      	ldr	r2, [pc, #76]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056bc:	4b0e      	ldr	r3, [pc, #56]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	490b      	ldr	r1, [pc, #44]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0310 	and.w	r3, r3, #16
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d008      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056da:	4b07      	ldr	r3, [pc, #28]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	4904      	ldr	r1, [pc, #16]	@ (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40021000 	.word	0x40021000
 80056fc:	40007000 	.word	0x40007000
 8005700:	42420440 	.word	0x42420440

08005704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	4638      	mov	r0, r7
 800570e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	bc80      	pop	{r7}
 800571c:	4770      	bx	lr

0800571e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800572e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005732:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	b29a      	uxth	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800573e:	2300      	movs	r3, #0
}
 8005740:	4618      	mov	r0, r3
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr

0800574a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800574a:	b480      	push	{r7}
 800574c:	b085      	sub	sp, #20
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005752:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005756:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800575e:	b29a      	uxth	r2, r3
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	b29b      	uxth	r3, r3
 8005764:	43db      	mvns	r3, r3
 8005766:	b29b      	uxth	r3, r3
 8005768:	4013      	ands	r3, r2
 800576a:	b29a      	uxth	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr

0800577e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	460b      	mov	r3, r1
 8005788:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr

08005796 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	4638      	mov	r0, r7
 80057a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bc80      	pop	{r7}
 80057ce:	4770      	bx	lr

080057d0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b09d      	sub	sp, #116	@ 0x74
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80057f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	78db      	ldrb	r3, [r3, #3]
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d81f      	bhi.n	8005842 <USB_ActivateEndpoint+0x72>
 8005802:	a201      	add	r2, pc, #4	@ (adr r2, 8005808 <USB_ActivateEndpoint+0x38>)
 8005804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005808:	08005819 	.word	0x08005819
 800580c:	08005835 	.word	0x08005835
 8005810:	0800584b 	.word	0x0800584b
 8005814:	08005827 	.word	0x08005827
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005818:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800581c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005820:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005824:	e012      	b.n	800584c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005826:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800582a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800582e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005832:	e00b      	b.n	800584c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005834:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005838:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800583c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005840:	e004      	b.n	800584c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005848:	e000      	b.n	800584c <USB_ActivateEndpoint+0x7c>
      break;
 800584a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	441a      	add	r2, r3
 8005856:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800585a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800585e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005862:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800586a:	b29b      	uxth	r3, r3
 800586c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	b29b      	uxth	r3, r3
 800587c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005880:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005884:	b29b      	uxth	r3, r3
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	7812      	ldrb	r2, [r2, #0]
 800588a:	4313      	orrs	r3, r2
 800588c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	441a      	add	r2, r3
 800589a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800589e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	7b1b      	ldrb	r3, [r3, #12]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f040 8178 	bne.w	8005bac <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8084 	beq.w	80059ce <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	461a      	mov	r2, r3
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	4413      	add	r3, r2
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	011a      	lsls	r2, r3, #4
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	88db      	ldrh	r3, [r3, #6]
 80058ee:	085b      	lsrs	r3, r3, #1
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	827b      	strh	r3, [r7, #18]
 8005908:	8a7b      	ldrh	r3, [r7, #18]
 800590a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d01b      	beq.n	800594a <USB_ActivateEndpoint+0x17a>
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	b29b      	uxth	r3, r3
 8005920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005928:	823b      	strh	r3, [r7, #16]
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	441a      	add	r2, r3
 8005934:	8a3b      	ldrh	r3, [r7, #16]
 8005936:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800593a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800593e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005942:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005946:	b29b      	uxth	r3, r3
 8005948:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	78db      	ldrb	r3, [r3, #3]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d020      	beq.n	8005994 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4413      	add	r3, r2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29b      	uxth	r3, r3
 8005960:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005968:	81bb      	strh	r3, [r7, #12]
 800596a:	89bb      	ldrh	r3, [r7, #12]
 800596c:	f083 0320 	eor.w	r3, r3, #32
 8005970:	81bb      	strh	r3, [r7, #12]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	441a      	add	r2, r3
 800597c:	89bb      	ldrh	r3, [r7, #12]
 800597e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800598a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800598e:	b29b      	uxth	r3, r3
 8005990:	8013      	strh	r3, [r2, #0]
 8005992:	e2d5      	b.n	8005f40 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	881b      	ldrh	r3, [r3, #0]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059aa:	81fb      	strh	r3, [r7, #14]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	441a      	add	r2, r3
 80059b6:	89fb      	ldrh	r3, [r7, #14]
 80059b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	8013      	strh	r3, [r2, #0]
 80059cc:	e2b8      	b.n	8005f40 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059d8:	b29b      	uxth	r3, r3
 80059da:	461a      	mov	r2, r3
 80059dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059de:	4413      	add	r3, r2
 80059e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	011a      	lsls	r2, r3, #4
 80059e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80059f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	88db      	ldrh	r3, [r3, #6]
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a00:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	4413      	add	r3, r2
 8005a14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	011a      	lsls	r2, r3, #4
 8005a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1e:	4413      	add	r3, r2
 8005a20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	881b      	ldrh	r3, [r3, #0]
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	801a      	strh	r2, [r3, #0]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a3c:	d91d      	bls.n	8005a7a <USB_ActivateEndpoint+0x2aa>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d102      	bne.n	8005a58 <USB_ActivateEndpoint+0x288>
 8005a52:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a54:	3b01      	subs	r3, #1
 8005a56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	029b      	lsls	r3, r3, #10
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	4313      	orrs	r3, r2
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	e026      	b.n	8005ac8 <USB_ActivateEndpoint+0x2f8>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <USB_ActivateEndpoint+0x2c8>
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	e017      	b.n	8005ac8 <USB_ActivateEndpoint+0x2f8>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <USB_ActivateEndpoint+0x2e2>
 8005aac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aae:	3301      	adds	r3, #1
 8005ab0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	029b      	lsls	r3, r3, #10
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005ad6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005ad8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01b      	beq.n	8005b18 <USB_ActivateEndpoint+0x348>
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005af2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005af6:	843b      	strh	r3, [r7, #32]
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	8c3b      	ldrh	r3, [r7, #32]
 8005b04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d124      	bne.n	8005b6a <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	881b      	ldrh	r3, [r3, #0]
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b36:	83bb      	strh	r3, [r7, #28]
 8005b38:	8bbb      	ldrh	r3, [r7, #28]
 8005b3a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b3e:	83bb      	strh	r3, [r7, #28]
 8005b40:	8bbb      	ldrh	r3, [r7, #28]
 8005b42:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b46:	83bb      	strh	r3, [r7, #28]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	441a      	add	r2, r3
 8005b52:	8bbb      	ldrh	r3, [r7, #28]
 8005b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	8013      	strh	r3, [r2, #0]
 8005b68:	e1ea      	b.n	8005f40 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b80:	83fb      	strh	r3, [r7, #30]
 8005b82:	8bfb      	ldrh	r3, [r7, #30]
 8005b84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b88:	83fb      	strh	r3, [r7, #30]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	441a      	add	r2, r3
 8005b94:	8bfb      	ldrh	r3, [r7, #30]
 8005b96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	8013      	strh	r3, [r2, #0]
 8005baa:	e1c9      	b.n	8005f40 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	78db      	ldrb	r3, [r3, #3]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d11e      	bne.n	8005bf2 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bca:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	441a      	add	r2, r3
 8005bd8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005bdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005be0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005be4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	8013      	strh	r3, [r2, #0]
 8005bf0:	e01d      	b.n	8005c2e <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c08:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	441a      	add	r2, r3
 8005c16:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005c1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c3e:	4413      	add	r3, r2
 8005c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	011a      	lsls	r2, r3, #4
 8005c48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	891b      	ldrh	r3, [r3, #8]
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	005b      	lsls	r3, r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c72:	4413      	add	r3, r2
 8005c74:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	011a      	lsls	r2, r3, #4
 8005c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005c84:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	895b      	ldrh	r3, [r3, #10]
 8005c8a:	085b      	lsrs	r3, r3, #1
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	005b      	lsls	r3, r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c94:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	785b      	ldrb	r3, [r3, #1]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f040 8093 	bne.w	8005dc6 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005cb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01b      	beq.n	8005cf4 <USB_ActivateEndpoint+0x524>
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	881b      	ldrh	r3, [r3, #0]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005ce0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ce4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ce8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	881b      	ldrh	r3, [r3, #0]
 8005d00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005d02:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01b      	beq.n	8005d44 <USB_ActivateEndpoint+0x574>
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d22:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005d30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d5a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d5e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005d62:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d64:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d66:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d6a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	4413      	add	r3, r2
 8005d96:	881b      	ldrh	r3, [r3, #0]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005da2:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	441a      	add	r2, r3
 8005dae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005db0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005db4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005db8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	8013      	strh	r3, [r2, #0]
 8005dc4:	e0bc      	b.n	8005f40 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	881b      	ldrh	r3, [r3, #0]
 8005dd2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005dd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d01d      	beq.n	8005e1e <USB_ActivateEndpoint+0x64e>
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005df4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	441a      	add	r2, r3
 8005e06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005e0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	881b      	ldrh	r3, [r3, #0]
 8005e2a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005e2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01d      	beq.n	8005e76 <USB_ActivateEndpoint+0x6a6>
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e50:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	441a      	add	r2, r3
 8005e5e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005e62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	78db      	ldrb	r3, [r3, #3]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d024      	beq.n	8005ec8 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	881b      	ldrh	r3, [r3, #0]
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e94:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005e98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005e9c:	f083 0320 	eor.w	r3, r3, #32
 8005ea0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	441a      	add	r2, r3
 8005eae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005eb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	8013      	strh	r3, [r2, #0]
 8005ec6:	e01d      	b.n	8005f04 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	4413      	add	r3, r2
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ede:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	441a      	add	r2, r3
 8005eec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005ef0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ef4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f1a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	441a      	add	r2, r3
 8005f28:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005f2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005f40:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3774      	adds	r7, #116	@ 0x74
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bc80      	pop	{r7}
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop

08005f50 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b08d      	sub	sp, #52	@ 0x34
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	7b1b      	ldrb	r3, [r3, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f040 808e 	bne.w	8006080 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d044      	beq.n	8005ff6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4413      	add	r3, r2
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	81bb      	strh	r3, [r7, #12]
 8005f7a:	89bb      	ldrh	r3, [r7, #12]
 8005f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01b      	beq.n	8005fbc <USB_DeactivateEndpoint+0x6c>
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f9a:	817b      	strh	r3, [r7, #10]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	441a      	add	r2, r3
 8005fa6:	897b      	ldrh	r3, [r7, #10]
 8005fa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fb4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fd2:	813b      	strh	r3, [r7, #8]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	893b      	ldrh	r3, [r7, #8]
 8005fe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	8013      	strh	r3, [r2, #0]
 8005ff4:	e192      	b.n	800631c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	827b      	strh	r3, [r7, #18]
 8006004:	8a7b      	ldrh	r3, [r7, #18]
 8006006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d01b      	beq.n	8006046 <USB_DeactivateEndpoint+0xf6>
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29b      	uxth	r3, r3
 800601c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006024:	823b      	strh	r3, [r7, #16]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	441a      	add	r2, r3
 8006030:	8a3b      	ldrh	r3, [r7, #16]
 8006032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800603a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800603e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006042:	b29b      	uxth	r3, r3
 8006044:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29b      	uxth	r3, r3
 8006054:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006058:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800605c:	81fb      	strh	r3, [r7, #14]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	441a      	add	r2, r3
 8006068:	89fb      	ldrh	r3, [r7, #14]
 800606a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800606e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800607a:	b29b      	uxth	r3, r3
 800607c:	8013      	strh	r3, [r2, #0]
 800607e:	e14d      	b.n	800631c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	2b00      	cmp	r3, #0
 8006086:	f040 80a5 	bne.w	80061d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	881b      	ldrh	r3, [r3, #0]
 8006096:	843b      	strh	r3, [r7, #32]
 8006098:	8c3b      	ldrh	r3, [r7, #32]
 800609a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d01b      	beq.n	80060da <USB_DeactivateEndpoint+0x18a>
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b8:	83fb      	strh	r3, [r7, #30]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	441a      	add	r2, r3
 80060c4:	8bfb      	ldrh	r3, [r7, #30]
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	83bb      	strh	r3, [r7, #28]
 80060e8:	8bbb      	ldrh	r3, [r7, #28]
 80060ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01b      	beq.n	800612a <USB_DeactivateEndpoint+0x1da>
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006108:	837b      	strh	r3, [r7, #26]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	441a      	add	r2, r3
 8006114:	8b7b      	ldrh	r3, [r7, #26]
 8006116:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800611a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800611e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006122:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006126:	b29b      	uxth	r3, r3
 8006128:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29b      	uxth	r3, r3
 8006138:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800613c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006140:	833b      	strh	r3, [r7, #24]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	441a      	add	r2, r3
 800614c:	8b3b      	ldrh	r3, [r7, #24]
 800614e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006152:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006156:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800615a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800615e:	b29b      	uxth	r3, r3
 8006160:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4413      	add	r3, r2
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006174:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006178:	82fb      	strh	r3, [r7, #22]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	441a      	add	r2, r3
 8006184:	8afb      	ldrh	r3, [r7, #22]
 8006186:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800618a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800618e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006196:	b29b      	uxth	r3, r3
 8006198:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061b0:	82bb      	strh	r3, [r7, #20]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	441a      	add	r2, r3
 80061bc:	8abb      	ldrh	r3, [r7, #20]
 80061be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	8013      	strh	r3, [r2, #0]
 80061d2:	e0a3      	b.n	800631c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80061e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80061e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01b      	beq.n	8006224 <USB_DeactivateEndpoint+0x2d4>
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006202:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	441a      	add	r2, r3
 800620e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006210:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006214:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006218:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800621c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006220:	b29b      	uxth	r3, r3
 8006222:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006232:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01b      	beq.n	8006274 <USB_DeactivateEndpoint+0x324>
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800624e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006252:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800626c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006270:	b29b      	uxth	r3, r3
 8006272:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800628a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	441a      	add	r2, r3
 8006296:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800629c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	441a      	add	r2, r3
 80062ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	441a      	add	r2, r3
 8006306:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006308:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800630c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006318:	b29b      	uxth	r3, r3
 800631a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3734      	adds	r7, #52	@ 0x34
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b0c2      	sub	sp, #264	@ 0x108
 800632c:	af00      	add	r7, sp, #0
 800632e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006332:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006336:	6018      	str	r0, [r3, #0]
 8006338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800633c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006340:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	2b01      	cmp	r3, #1
 8006350:	f040 86b7 	bne.w	80070c2 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699a      	ldr	r2, [r3, #24]
 8006360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	429a      	cmp	r2, r3
 800636e:	d908      	bls.n	8006382 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006380:	e007      	b.n	8006392 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	7b1b      	ldrb	r3, [r3, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d13a      	bne.n	8006418 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80063a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6959      	ldr	r1, [r3, #20]
 80063ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	88da      	ldrh	r2, [r3, #6]
 80063ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063be:	b29b      	uxth	r3, r3
 80063c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80063c8:	6800      	ldr	r0, [r0, #0]
 80063ca:	f001 fc9c 	bl	8007d06 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	461a      	mov	r2, r3
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	4413      	add	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
 80063f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	011a      	lsls	r2, r3, #4
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	4413      	add	r3, r2
 8006404:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006408:	60fb      	str	r3, [r7, #12]
 800640a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800640e:	b29a      	uxth	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	801a      	strh	r2, [r3, #0]
 8006414:	f000 be1f 	b.w	8007056 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800641c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	78db      	ldrb	r3, [r3, #3]
 8006424:	2b02      	cmp	r3, #2
 8006426:	f040 8462 	bne.w	8006cee <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800642a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800642e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6a1a      	ldr	r2, [r3, #32]
 8006436:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	429a      	cmp	r2, r3
 8006444:	f240 83df 	bls.w	8006c06 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800644c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29b      	uxth	r3, r3
 8006466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800646a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800646e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006476:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006490:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006494:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006498:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800649c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80064a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6a1a      	ldr	r2, [r3, #32]
 80064b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064b4:	1ad2      	subs	r2, r2, r3
 80064b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80064c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 81c7 	beq.w	8006878 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80064ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80064f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	785b      	ldrb	r3, [r3, #1]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d177      	bne.n	80065f6 <USB_EPStartXfer+0x2ce>
 8006506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006516:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006520:	b29b      	uxth	r3, r3
 8006522:	461a      	mov	r2, r3
 8006524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006526:	4413      	add	r3, r2
 8006528:	62bb      	str	r3, [r7, #40]	@ 0x28
 800652a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	011a      	lsls	r2, r3, #4
 8006538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653a:	4413      	add	r3, r2
 800653c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006540:	627b      	str	r3, [r7, #36]	@ 0x24
 8006542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	b29b      	uxth	r3, r3
 8006548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800654c:	b29a      	uxth	r2, r3
 800654e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006550:	801a      	strh	r2, [r3, #0]
 8006552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006556:	2b3e      	cmp	r3, #62	@ 0x3e
 8006558:	d921      	bls.n	800659e <USB_EPStartXfer+0x276>
 800655a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	2b00      	cmp	r3, #0
 800656e:	d104      	bne.n	800657a <USB_EPStartXfer+0x252>
 8006570:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006574:	3b01      	subs	r3, #1
 8006576:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	881b      	ldrh	r3, [r3, #0]
 800657e:	b29a      	uxth	r2, r3
 8006580:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006584:	b29b      	uxth	r3, r3
 8006586:	029b      	lsls	r3, r3, #10
 8006588:	b29b      	uxth	r3, r3
 800658a:	4313      	orrs	r3, r2
 800658c:	b29b      	uxth	r3, r3
 800658e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006596:	b29a      	uxth	r2, r3
 8006598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659a:	801a      	strh	r2, [r3, #0]
 800659c:	e050      	b.n	8006640 <USB_EPStartXfer+0x318>
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <USB_EPStartXfer+0x294>
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	801a      	strh	r2, [r3, #0]
 80065ba:	e041      	b.n	8006640 <USB_EPStartXfer+0x318>
 80065bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065c0:	085b      	lsrs	r3, r3, #1
 80065c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80065c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d004      	beq.n	80065dc <USB_EPStartXfer+0x2b4>
 80065d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80065d6:	3301      	adds	r3, #1
 80065d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	881b      	ldrh	r3, [r3, #0]
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	029b      	lsls	r3, r3, #10
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	4313      	orrs	r3, r2
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	e024      	b.n	8006640 <USB_EPStartXfer+0x318>
 80065f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d11c      	bne.n	8006640 <USB_EPStartXfer+0x318>
 8006606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006614:	b29b      	uxth	r3, r3
 8006616:	461a      	mov	r2, r3
 8006618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661a:	4413      	add	r3, r2
 800661c:	633b      	str	r3, [r7, #48]	@ 0x30
 800661e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	011a      	lsls	r2, r3, #4
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	4413      	add	r3, r2
 8006630:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800663a:	b29a      	uxth	r2, r3
 800663c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	895b      	ldrh	r3, [r3, #10]
 800664c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6959      	ldr	r1, [r3, #20]
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006660:	b29b      	uxth	r3, r3
 8006662:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006666:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800666a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800666e:	6800      	ldr	r0, [r0, #0]
 8006670:	f001 fb49 	bl	8007d06 <USB_WritePMA>
            ep->xfer_buff += len;
 8006674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695a      	ldr	r2, [r3, #20]
 8006680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006684:	441a      	add	r2, r3
 8006686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6a1a      	ldr	r2, [r3, #32]
 800669e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d90f      	bls.n	80066ce <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80066ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6a1a      	ldr	r2, [r3, #32]
 80066ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	621a      	str	r2, [r3, #32]
 80066cc:	e00e      	b.n	80066ec <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80066ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80066de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2200      	movs	r2, #0
 80066ea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80066ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	785b      	ldrb	r3, [r3, #1]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d177      	bne.n	80067ec <USB_EPStartXfer+0x4c4>
 80066fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	61bb      	str	r3, [r7, #24]
 8006708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006716:	b29b      	uxth	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	4413      	add	r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	011a      	lsls	r2, r3, #4
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	4413      	add	r3, r2
 8006732:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	b29b      	uxth	r3, r3
 800673e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006742:	b29a      	uxth	r2, r3
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	801a      	strh	r2, [r3, #0]
 8006748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674c:	2b3e      	cmp	r3, #62	@ 0x3e
 800674e:	d921      	bls.n	8006794 <USB_EPStartXfer+0x46c>
 8006750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006754:	095b      	lsrs	r3, r3, #5
 8006756:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800675a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	2b00      	cmp	r3, #0
 8006764:	d104      	bne.n	8006770 <USB_EPStartXfer+0x448>
 8006766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800676a:	3b01      	subs	r3, #1
 800676c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29a      	uxth	r2, r3
 8006776:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800677a:	b29b      	uxth	r3, r3
 800677c:	029b      	lsls	r3, r3, #10
 800677e:	b29b      	uxth	r3, r3
 8006780:	4313      	orrs	r3, r2
 8006782:	b29b      	uxth	r3, r3
 8006784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800678c:	b29a      	uxth	r2, r3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	801a      	strh	r2, [r3, #0]
 8006792:	e056      	b.n	8006842 <USB_EPStartXfer+0x51a>
 8006794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10a      	bne.n	80067b2 <USB_EPStartXfer+0x48a>
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	881b      	ldrh	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	801a      	strh	r2, [r3, #0]
 80067b0:	e047      	b.n	8006842 <USB_EPStartXfer+0x51a>
 80067b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b6:	085b      	lsrs	r3, r3, #1
 80067b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d004      	beq.n	80067d2 <USB_EPStartXfer+0x4aa>
 80067c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067cc:	3301      	adds	r3, #1
 80067ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	b29a      	uxth	r2, r3
 80067d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067dc:	b29b      	uxth	r3, r3
 80067de:	029b      	lsls	r3, r3, #10
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	4313      	orrs	r3, r2
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	801a      	strh	r2, [r3, #0]
 80067ea:	e02a      	b.n	8006842 <USB_EPStartXfer+0x51a>
 80067ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d122      	bne.n	8006842 <USB_EPStartXfer+0x51a>
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	623b      	str	r3, [r7, #32]
 8006808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006816:	b29b      	uxth	r3, r3
 8006818:	461a      	mov	r2, r3
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	4413      	add	r3, r2
 800681e:	623b      	str	r3, [r7, #32]
 8006820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	011a      	lsls	r2, r3, #4
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	4413      	add	r3, r2
 8006832:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683c:	b29a      	uxth	r2, r3
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	891b      	ldrh	r3, [r3, #8]
 800684e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006856:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6959      	ldr	r1, [r3, #20]
 800685e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006862:	b29b      	uxth	r3, r3
 8006864:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006868:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800686c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006870:	6800      	ldr	r0, [r0, #0]
 8006872:	f001 fa48 	bl	8007d06 <USB_WritePMA>
 8006876:	e3ee      	b.n	8007056 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d177      	bne.n	8006978 <USB_EPStartXfer+0x650>
 8006888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006898:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068a8:	4413      	add	r3, r2
 80068aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	011a      	lsls	r2, r3, #4
 80068ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068bc:	4413      	add	r3, r2
 80068be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80068c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068c6:	881b      	ldrh	r3, [r3, #0]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068d2:	801a      	strh	r2, [r3, #0]
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80068da:	d921      	bls.n	8006920 <USB_EPStartXfer+0x5f8>
 80068dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e0:	095b      	lsrs	r3, r3, #5
 80068e2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ea:	f003 031f 	and.w	r3, r3, #31
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d104      	bne.n	80068fc <USB_EPStartXfer+0x5d4>
 80068f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80068f6:	3b01      	subs	r3, #1
 80068f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29a      	uxth	r2, r3
 8006902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006906:	b29b      	uxth	r3, r3
 8006908:	029b      	lsls	r3, r3, #10
 800690a:	b29b      	uxth	r3, r3
 800690c:	4313      	orrs	r3, r2
 800690e:	b29b      	uxth	r3, r3
 8006910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006918:	b29a      	uxth	r2, r3
 800691a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800691c:	801a      	strh	r2, [r3, #0]
 800691e:	e056      	b.n	80069ce <USB_EPStartXfer+0x6a6>
 8006920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10a      	bne.n	800693e <USB_EPStartXfer+0x616>
 8006928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006936:	b29a      	uxth	r2, r3
 8006938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e047      	b.n	80069ce <USB_EPStartXfer+0x6a6>
 800693e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006942:	085b      	lsrs	r3, r3, #1
 8006944:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d004      	beq.n	800695e <USB_EPStartXfer+0x636>
 8006954:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006958:	3301      	adds	r3, #1
 800695a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800695e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006960:	881b      	ldrh	r3, [r3, #0]
 8006962:	b29a      	uxth	r2, r3
 8006964:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006968:	b29b      	uxth	r3, r3
 800696a:	029b      	lsls	r3, r3, #10
 800696c:	b29b      	uxth	r3, r3
 800696e:	4313      	orrs	r3, r2
 8006970:	b29a      	uxth	r2, r3
 8006972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006974:	801a      	strh	r2, [r3, #0]
 8006976:	e02a      	b.n	80069ce <USB_EPStartXfer+0x6a6>
 8006978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	785b      	ldrb	r3, [r3, #1]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d122      	bne.n	80069ce <USB_EPStartXfer+0x6a6>
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	653b      	str	r3, [r7, #80]	@ 0x50
 8006994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006998:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	461a      	mov	r2, r3
 80069a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069a8:	4413      	add	r3, r2
 80069aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80069ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	011a      	lsls	r2, r3, #4
 80069ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069bc:	4413      	add	r3, r2
 80069be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	891b      	ldrh	r3, [r3, #8]
 80069da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6959      	ldr	r1, [r3, #20]
 80069ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80069f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80069f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80069fc:	6800      	ldr	r0, [r0, #0]
 80069fe:	f001 f982 	bl	8007d06 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695a      	ldr	r2, [r3, #20]
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a12:	441a      	add	r2, r3
 8006a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	d90f      	bls.n	8006a5c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	6a1a      	ldr	r2, [r3, #32]
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4c:	1ad2      	subs	r2, r2, r3
 8006a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	621a      	str	r2, [r3, #32]
 8006a5a:	e00e      	b.n	8006a7a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006a6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2200      	movs	r2, #0
 8006a78:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d177      	bne.n	8006b86 <USB_EPStartXfer+0x85e>
 8006a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab6:	4413      	add	r3, r2
 8006ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	011a      	lsls	r2, r3, #4
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aca:	4413      	add	r3, r2
 8006acc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ae8:	d921      	bls.n	8006b2e <USB_EPStartXfer+0x806>
 8006aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af8:	f003 031f 	and.w	r3, r3, #31
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d104      	bne.n	8006b0a <USB_EPStartXfer+0x7e2>
 8006b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b04:	3b01      	subs	r3, #1
 8006b06:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	029b      	lsls	r3, r3, #10
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e050      	b.n	8006bd0 <USB_EPStartXfer+0x8a8>
 8006b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d10a      	bne.n	8006b4c <USB_EPStartXfer+0x824>
 8006b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b48:	801a      	strh	r2, [r3, #0]
 8006b4a:	e041      	b.n	8006bd0 <USB_EPStartXfer+0x8a8>
 8006b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b50:	085b      	lsrs	r3, r3, #1
 8006b52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <USB_EPStartXfer+0x844>
 8006b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b66:	3301      	adds	r3, #1
 8006b68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	029b      	lsls	r3, r3, #10
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	e024      	b.n	8006bd0 <USB_EPStartXfer+0x8a8>
 8006b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d11c      	bne.n	8006bd0 <USB_EPStartXfer+0x8a8>
 8006b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006baa:	4413      	add	r3, r2
 8006bac:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	011a      	lsls	r2, r3, #4
 8006bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	895b      	ldrh	r3, [r3, #10]
 8006bdc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006be0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006be4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6959      	ldr	r1, [r3, #20]
 8006bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006bf6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006bfa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006bfe:	6800      	ldr	r0, [r0, #0]
 8006c00:	f001 f881 	bl	8007d06 <USB_WritePMA>
 8006c04:	e227      	b.n	8007056 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6a1b      	ldr	r3, [r3, #32]
 8006c12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c3c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006c40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	441a      	add	r2, r3
 8006c5a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006c5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	461a      	mov	r2, r3
 8006c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c92:	4413      	add	r3, r2
 8006c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	011a      	lsls	r2, r3, #4
 8006ca4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ca6:	4413      	add	r3, r2
 8006ca8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cb6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	891b      	ldrh	r3, [r3, #8]
 8006cc4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6959      	ldr	r1, [r3, #20]
 8006cd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cde:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ce2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ce6:	6800      	ldr	r0, [r0, #0]
 8006ce8:	f001 f80d 	bl	8007d06 <USB_WritePMA>
 8006cec:	e1b3      	b.n	8007056 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006cee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6a1a      	ldr	r2, [r3, #32]
 8006cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cfe:	1ad2      	subs	r2, r2, r3
 8006d00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 80c6 	beq.w	8006ec0 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d177      	bne.n	8006e40 <USB_EPStartXfer+0xb18>
 8006d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d70:	4413      	add	r3, r2
 8006d72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	011a      	lsls	r2, r3, #4
 8006d82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d84:	4413      	add	r3, r2
 8006d86:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d8a:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006da2:	d921      	bls.n	8006de8 <USB_EPStartXfer+0xac0>
 8006da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da8:	095b      	lsrs	r3, r3, #5
 8006daa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db2:	f003 031f 	and.w	r3, r3, #31
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d104      	bne.n	8006dc4 <USB_EPStartXfer+0xa9c>
 8006dba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006dc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	029b      	lsls	r3, r3, #10
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006de4:	801a      	strh	r2, [r3, #0]
 8006de6:	e050      	b.n	8006e8a <USB_EPStartXfer+0xb62>
 8006de8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10a      	bne.n	8006e06 <USB_EPStartXfer+0xade>
 8006df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e02:	801a      	strh	r2, [r3, #0]
 8006e04:	e041      	b.n	8006e8a <USB_EPStartXfer+0xb62>
 8006e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0a:	085b      	lsrs	r3, r3, #1
 8006e0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d004      	beq.n	8006e26 <USB_EPStartXfer+0xafe>
 8006e1c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e20:	3301      	adds	r3, #1
 8006e22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	029b      	lsls	r3, r3, #10
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	4313      	orrs	r3, r2
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e3c:	801a      	strh	r2, [r3, #0]
 8006e3e:	e024      	b.n	8006e8a <USB_EPStartXfer+0xb62>
 8006e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d11c      	bne.n	8006e8a <USB_EPStartXfer+0xb62>
 8006e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e64:	4413      	add	r3, r2
 8006e66:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	011a      	lsls	r2, r3, #4
 8006e76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e78:	4413      	add	r3, r2
 8006e7a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	895b      	ldrh	r3, [r3, #10]
 8006e96:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6959      	ldr	r1, [r3, #20]
 8006ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006eb0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006eb4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006eb8:	6800      	ldr	r0, [r0, #0]
 8006eba:	f000 ff24 	bl	8007d06 <USB_WritePMA>
 8006ebe:	e0ca      	b.n	8007056 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	785b      	ldrb	r3, [r3, #1]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d177      	bne.n	8006fc0 <USB_EPStartXfer+0xc98>
 8006ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ef0:	4413      	add	r3, r2
 8006ef2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	011a      	lsls	r2, r3, #4
 8006f02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f04:	4413      	add	r3, r2
 8006f06:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f0a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f20:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f22:	d921      	bls.n	8006f68 <USB_EPStartXfer+0xc40>
 8006f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d104      	bne.n	8006f44 <USB_EPStartXfer+0xc1c>
 8006f3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f46:	881b      	ldrh	r3, [r3, #0]
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	029b      	lsls	r3, r3, #10
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	4313      	orrs	r3, r2
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f64:	801a      	strh	r2, [r3, #0]
 8006f66:	e05c      	b.n	8007022 <USB_EPStartXfer+0xcfa>
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10a      	bne.n	8006f86 <USB_EPStartXfer+0xc5e>
 8006f70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f82:	801a      	strh	r2, [r3, #0]
 8006f84:	e04d      	b.n	8007022 <USB_EPStartXfer+0xcfa>
 8006f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f8a:	085b      	lsrs	r3, r3, #1
 8006f8c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d004      	beq.n	8006fa6 <USB_EPStartXfer+0xc7e>
 8006f9c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006fa6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	029b      	lsls	r3, r3, #10
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fbc:	801a      	strh	r2, [r3, #0]
 8006fbe:	e030      	b.n	8007022 <USB_EPStartXfer+0xcfa>
 8006fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	785b      	ldrb	r3, [r3, #1]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d128      	bne.n	8007022 <USB_EPStartXfer+0xcfa>
 8006fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ff4:	4413      	add	r3, r2
 8006ff6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	011a      	lsls	r2, r3, #4
 8007008:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800700c:	4413      	add	r3, r2
 800700e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007012:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800701a:	b29a      	uxth	r2, r3
 800701c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007020:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007026:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	891b      	ldrh	r3, [r3, #8]
 800702e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007032:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007036:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6959      	ldr	r1, [r3, #20]
 800703e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007042:	b29b      	uxth	r3, r3
 8007044:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007048:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800704c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007050:	6800      	ldr	r0, [r0, #0]
 8007052:	f000 fe58 	bl	8007d06 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800705a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	b29b      	uxth	r3, r3
 8007074:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800707c:	817b      	strh	r3, [r7, #10]
 800707e:	897b      	ldrh	r3, [r7, #10]
 8007080:	f083 0310 	eor.w	r3, r3, #16
 8007084:	817b      	strh	r3, [r7, #10]
 8007086:	897b      	ldrh	r3, [r7, #10]
 8007088:	f083 0320 	eor.w	r3, r3, #32
 800708c:	817b      	strh	r3, [r7, #10]
 800708e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007092:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800709c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	441a      	add	r2, r3
 80070a8:	897b      	ldrh	r3, [r7, #10]
 80070aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	8013      	strh	r3, [r2, #0]
 80070be:	f000 bcde 	b.w	8007a7e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80070c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	7b1b      	ldrb	r3, [r3, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 80bb 	bne.w	800724a <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80070d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	699a      	ldr	r2, [r3, #24]
 80070e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d917      	bls.n	8007120 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80070f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007110:	1ad2      	subs	r2, r2, r3
 8007112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	619a      	str	r2, [r3, #24]
 800711e:	e00e      	b.n	800713e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007124:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2200      	movs	r2, #0
 800713c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800713e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007142:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800714c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800715a:	b29b      	uxth	r3, r3
 800715c:	461a      	mov	r2, r3
 800715e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007162:	4413      	add	r3, r2
 8007164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	011a      	lsls	r2, r3, #4
 8007176:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800717a:	4413      	add	r3, r2
 800717c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007180:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007184:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007188:	881b      	ldrh	r3, [r3, #0]
 800718a:	b29b      	uxth	r3, r3
 800718c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007190:	b29a      	uxth	r2, r3
 8007192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007196:	801a      	strh	r2, [r3, #0]
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719c:	2b3e      	cmp	r3, #62	@ 0x3e
 800719e:	d924      	bls.n	80071ea <USB_EPStartXfer+0xec2>
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a4:	095b      	lsrs	r3, r3, #5
 80071a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ae:	f003 031f 	and.w	r3, r3, #31
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d104      	bne.n	80071c0 <USB_EPStartXfer+0xe98>
 80071b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071ba:	3b01      	subs	r3, #1
 80071bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	029b      	lsls	r3, r3, #10
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	4313      	orrs	r3, r2
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071de:	b29a      	uxth	r2, r3
 80071e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071e4:	801a      	strh	r2, [r3, #0]
 80071e6:	f000 bc10 	b.w	8007a0a <USB_EPStartXfer+0x16e2>
 80071ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10c      	bne.n	800720c <USB_EPStartXfer+0xee4>
 80071f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007202:	b29a      	uxth	r2, r3
 8007204:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e3fe      	b.n	8007a0a <USB_EPStartXfer+0x16e2>
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007210:	085b      	lsrs	r3, r3, #1
 8007212:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <USB_EPStartXfer+0xf04>
 8007222:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007226:	3301      	adds	r3, #1
 8007228:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800722c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	b29a      	uxth	r2, r3
 8007234:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007238:	b29b      	uxth	r3, r3
 800723a:	029b      	lsls	r3, r3, #10
 800723c:	b29b      	uxth	r3, r3
 800723e:	4313      	orrs	r3, r2
 8007240:	b29a      	uxth	r2, r3
 8007242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	e3df      	b.n	8007a0a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800724a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	78db      	ldrb	r3, [r3, #3]
 8007256:	2b02      	cmp	r3, #2
 8007258:	f040 8218 	bne.w	800768c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800725c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b00      	cmp	r3, #0
 800726a:	f040 809d 	bne.w	80073a8 <USB_EPStartXfer+0x1080>
 800726e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007272:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800727c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800728a:	b29b      	uxth	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007292:	4413      	add	r3, r2
 8007294:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	011a      	lsls	r2, r3, #4
 80072a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072aa:	4413      	add	r3, r2
 80072ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072c0:	b29a      	uxth	r2, r3
 80072c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80072d6:	d92b      	bls.n	8007330 <USB_EPStartXfer+0x1008>
 80072d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	095b      	lsrs	r3, r3, #5
 80072e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	691b      	ldr	r3, [r3, #16]
 80072f6:	f003 031f 	and.w	r3, r3, #31
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d104      	bne.n	8007308 <USB_EPStartXfer+0xfe0>
 80072fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007302:	3b01      	subs	r3, #1
 8007304:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007308:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800730c:	881b      	ldrh	r3, [r3, #0]
 800730e:	b29a      	uxth	r2, r3
 8007310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007314:	b29b      	uxth	r3, r3
 8007316:	029b      	lsls	r3, r3, #10
 8007318:	b29b      	uxth	r3, r3
 800731a:	4313      	orrs	r3, r2
 800731c:	b29b      	uxth	r3, r3
 800731e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007326:	b29a      	uxth	r2, r3
 8007328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800732c:	801a      	strh	r2, [r3, #0]
 800732e:	e070      	b.n	8007412 <USB_EPStartXfer+0x10ea>
 8007330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10c      	bne.n	800735a <USB_EPStartXfer+0x1032>
 8007340:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800734c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007350:	b29a      	uxth	r2, r3
 8007352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e05b      	b.n	8007412 <USB_EPStartXfer+0x10ea>
 800735a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800735e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	085b      	lsrs	r3, r3, #1
 8007368:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800736c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <USB_EPStartXfer+0x1062>
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007384:	3301      	adds	r3, #1
 8007386:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800738a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	b29a      	uxth	r2, r3
 8007392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007396:	b29b      	uxth	r3, r3
 8007398:	029b      	lsls	r3, r3, #10
 800739a:	b29b      	uxth	r3, r3
 800739c:	4313      	orrs	r3, r2
 800739e:	b29a      	uxth	r2, r3
 80073a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073a4:	801a      	strh	r2, [r3, #0]
 80073a6:	e034      	b.n	8007412 <USB_EPStartXfer+0x10ea>
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	785b      	ldrb	r3, [r3, #1]
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d12c      	bne.n	8007412 <USB_EPStartXfer+0x10ea>
 80073b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	461a      	mov	r2, r3
 80073d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073dc:	4413      	add	r3, r2
 80073de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	011a      	lsls	r2, r3, #4
 80073f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073f4:	4413      	add	r3, r2
 80073f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80073fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	b29a      	uxth	r2, r3
 800740c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007410:	801a      	strh	r2, [r3, #0]
 8007412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	785b      	ldrb	r3, [r3, #1]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f040 809d 	bne.w	800756c <USB_EPStartXfer+0x1244>
 8007432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800744e:	b29b      	uxth	r3, r3
 8007450:	461a      	mov	r2, r3
 8007452:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007456:	4413      	add	r3, r2
 8007458:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800745c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	011a      	lsls	r2, r3, #4
 800746a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800746e:	4413      	add	r3, r2
 8007470:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007478:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800747c:	881b      	ldrh	r3, [r3, #0]
 800747e:	b29b      	uxth	r3, r3
 8007480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007484:	b29a      	uxth	r2, r3
 8007486:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800748a:	801a      	strh	r2, [r3, #0]
 800748c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	2b3e      	cmp	r3, #62	@ 0x3e
 800749a:	d92b      	bls.n	80074f4 <USB_EPStartXfer+0x11cc>
 800749c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	095b      	lsrs	r3, r3, #5
 80074aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f003 031f 	and.w	r3, r3, #31
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d104      	bne.n	80074cc <USB_EPStartXfer+0x11a4>
 80074c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c6:	3b01      	subs	r3, #1
 80074c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074d8:	b29b      	uxth	r3, r3
 80074da:	029b      	lsls	r3, r3, #10
 80074dc:	b29b      	uxth	r3, r3
 80074de:	4313      	orrs	r3, r2
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074f0:	801a      	strh	r2, [r3, #0]
 80074f2:	e069      	b.n	80075c8 <USB_EPStartXfer+0x12a0>
 80074f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10c      	bne.n	800751e <USB_EPStartXfer+0x11f6>
 8007504:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007514:	b29a      	uxth	r2, r3
 8007516:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	e054      	b.n	80075c8 <USB_EPStartXfer+0x12a0>
 800751e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	085b      	lsrs	r3, r3, #1
 800752c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	f003 0301 	and.w	r3, r3, #1
 8007540:	2b00      	cmp	r3, #0
 8007542:	d004      	beq.n	800754e <USB_EPStartXfer+0x1226>
 8007544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007548:	3301      	adds	r3, #1
 800754a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800754e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	b29a      	uxth	r2, r3
 8007556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800755a:	b29b      	uxth	r3, r3
 800755c:	029b      	lsls	r3, r3, #10
 800755e:	b29b      	uxth	r3, r3
 8007560:	4313      	orrs	r3, r2
 8007562:	b29a      	uxth	r2, r3
 8007564:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007568:	801a      	strh	r2, [r3, #0]
 800756a:	e02d      	b.n	80075c8 <USB_EPStartXfer+0x12a0>
 800756c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	785b      	ldrb	r3, [r3, #1]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d125      	bne.n	80075c8 <USB_EPStartXfer+0x12a0>
 800757c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007580:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800758a:	b29b      	uxth	r3, r3
 800758c:	461a      	mov	r2, r3
 800758e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007592:	4413      	add	r3, r2
 8007594:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800759c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	011a      	lsls	r2, r3, #4
 80075a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075aa:	4413      	add	r3, r2
 80075ac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075c6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80075c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 8218 	beq.w	8007a0a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80075da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	4413      	add	r3, r2
 80075f4:	881b      	ldrh	r3, [r3, #0]
 80075f6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80075fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80075fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d005      	beq.n	8007612 <USB_EPStartXfer+0x12ea>
 8007606:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800760a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10d      	bne.n	800762e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007612:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800761a:	2b00      	cmp	r3, #0
 800761c:	f040 81f5 	bne.w	8007a0a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007620:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007628:	2b00      	cmp	r3, #0
 800762a:	f040 81ee 	bne.w	8007a0a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800762e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	b29b      	uxth	r3, r3
 800764c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007650:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007654:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	441a      	add	r2, r3
 8007672:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800767a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800767e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007682:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007686:	b29b      	uxth	r3, r3
 8007688:	8013      	strh	r3, [r2, #0]
 800768a:	e1be      	b.n	8007a0a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800768c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	78db      	ldrb	r3, [r3, #3]
 8007698:	2b01      	cmp	r3, #1
 800769a:	f040 81b4 	bne.w	8007a06 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800769e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699a      	ldr	r2, [r3, #24]
 80076aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d917      	bls.n	80076ea <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80076ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80076ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076da:	1ad2      	subs	r2, r2, r3
 80076dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	619a      	str	r2, [r3, #24]
 80076e8:	e00e      	b.n	8007708 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80076ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80076fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2200      	movs	r2, #0
 8007706:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	785b      	ldrb	r3, [r3, #1]
 8007714:	2b00      	cmp	r3, #0
 8007716:	f040 8085 	bne.w	8007824 <USB_EPStartXfer+0x14fc>
 800771a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007736:	b29b      	uxth	r3, r3
 8007738:	461a      	mov	r2, r3
 800773a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800773e:	4413      	add	r3, r2
 8007740:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	011a      	lsls	r2, r3, #4
 8007752:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007756:	4413      	add	r3, r2
 8007758:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800775c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007760:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	b29b      	uxth	r3, r3
 8007768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800776c:	b29a      	uxth	r2, r3
 800776e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007772:	801a      	strh	r2, [r3, #0]
 8007774:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007778:	2b3e      	cmp	r3, #62	@ 0x3e
 800777a:	d923      	bls.n	80077c4 <USB_EPStartXfer+0x149c>
 800777c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007780:	095b      	lsrs	r3, r3, #5
 8007782:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778a:	f003 031f 	and.w	r3, r3, #31
 800778e:	2b00      	cmp	r3, #0
 8007790:	d104      	bne.n	800779c <USB_EPStartXfer+0x1474>
 8007792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007796:	3b01      	subs	r3, #1
 8007798:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800779c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077a0:	881b      	ldrh	r3, [r3, #0]
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	029b      	lsls	r3, r3, #10
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	4313      	orrs	r3, r2
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077c0:	801a      	strh	r2, [r3, #0]
 80077c2:	e060      	b.n	8007886 <USB_EPStartXfer+0x155e>
 80077c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10c      	bne.n	80077e6 <USB_EPStartXfer+0x14be>
 80077cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077dc:	b29a      	uxth	r2, r3
 80077de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	e04f      	b.n	8007886 <USB_EPStartXfer+0x155e>
 80077e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <USB_EPStartXfer+0x14de>
 80077fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007800:	3301      	adds	r3, #1
 8007802:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	b29a      	uxth	r2, r3
 800780e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007812:	b29b      	uxth	r3, r3
 8007814:	029b      	lsls	r3, r3, #10
 8007816:	b29b      	uxth	r3, r3
 8007818:	4313      	orrs	r3, r2
 800781a:	b29a      	uxth	r2, r3
 800781c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007820:	801a      	strh	r2, [r3, #0]
 8007822:	e030      	b.n	8007886 <USB_EPStartXfer+0x155e>
 8007824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	785b      	ldrb	r3, [r3, #1]
 8007830:	2b01      	cmp	r3, #1
 8007832:	d128      	bne.n	8007886 <USB_EPStartXfer+0x155e>
 8007834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007846:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007850:	b29b      	uxth	r3, r3
 8007852:	461a      	mov	r2, r3
 8007854:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007858:	4413      	add	r3, r2
 800785a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800785e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	011a      	lsls	r2, r3, #4
 800786c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007870:	4413      	add	r3, r2
 8007872:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007876:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800787a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787e:	b29a      	uxth	r2, r3
 8007880:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007884:	801a      	strh	r2, [r3, #0]
 8007886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	785b      	ldrb	r3, [r3, #1]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f040 8085 	bne.w	80079b0 <USB_EPStartXfer+0x1688>
 80078a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80078b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078ca:	4413      	add	r3, r2
 80078cc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80078d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	011a      	lsls	r2, r3, #4
 80078de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078e2:	4413      	add	r3, r2
 80078e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078f0:	881b      	ldrh	r3, [r3, #0]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078f8:	b29a      	uxth	r2, r3
 80078fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007904:	2b3e      	cmp	r3, #62	@ 0x3e
 8007906:	d923      	bls.n	8007950 <USB_EPStartXfer+0x1628>
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790c:	095b      	lsrs	r3, r3, #5
 800790e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007916:	f003 031f 	and.w	r3, r3, #31
 800791a:	2b00      	cmp	r3, #0
 800791c:	d104      	bne.n	8007928 <USB_EPStartXfer+0x1600>
 800791e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007922:	3b01      	subs	r3, #1
 8007924:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007928:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800792c:	881b      	ldrh	r3, [r3, #0]
 800792e:	b29a      	uxth	r2, r3
 8007930:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007934:	b29b      	uxth	r3, r3
 8007936:	029b      	lsls	r3, r3, #10
 8007938:	b29b      	uxth	r3, r3
 800793a:	4313      	orrs	r3, r2
 800793c:	b29b      	uxth	r3, r3
 800793e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007946:	b29a      	uxth	r2, r3
 8007948:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800794c:	801a      	strh	r2, [r3, #0]
 800794e:	e05c      	b.n	8007a0a <USB_EPStartXfer+0x16e2>
 8007950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10c      	bne.n	8007972 <USB_EPStartXfer+0x164a>
 8007958:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007968:	b29a      	uxth	r2, r3
 800796a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800796e:	801a      	strh	r2, [r3, #0]
 8007970:	e04b      	b.n	8007a0a <USB_EPStartXfer+0x16e2>
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <USB_EPStartXfer+0x166a>
 8007988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800798c:	3301      	adds	r3, #1
 800798e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007992:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	b29a      	uxth	r2, r3
 800799a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800799e:	b29b      	uxth	r3, r3
 80079a0:	029b      	lsls	r3, r3, #10
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	4313      	orrs	r3, r2
 80079a6:	b29a      	uxth	r2, r3
 80079a8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079ac:	801a      	strh	r2, [r3, #0]
 80079ae:	e02c      	b.n	8007a0a <USB_EPStartXfer+0x16e2>
 80079b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	785b      	ldrb	r3, [r3, #1]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d124      	bne.n	8007a0a <USB_EPStartXfer+0x16e2>
 80079c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	461a      	mov	r2, r3
 80079d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079d6:	4413      	add	r3, r2
 80079d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	011a      	lsls	r2, r3, #4
 80079ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079ee:	4413      	add	r3, r2
 80079f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a02:	801a      	strh	r2, [r3, #0]
 8007a04:	e001      	b.n	8007a0a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e03a      	b.n	8007a80 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a30:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a38:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a3c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a48:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	441a      	add	r2, r3
 8007a66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b085      	sub	sp, #20
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	785b      	ldrb	r3, [r3, #1]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d020      	beq.n	8007ade <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ab2:	81bb      	strh	r3, [r7, #12]
 8007ab4:	89bb      	ldrh	r3, [r7, #12]
 8007ab6:	f083 0310 	eor.w	r3, r3, #16
 8007aba:	81bb      	strh	r3, [r7, #12]
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	441a      	add	r2, r3
 8007ac6:	89bb      	ldrh	r3, [r7, #12]
 8007ac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007acc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	8013      	strh	r3, [r2, #0]
 8007adc:	e01f      	b.n	8007b1e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	881b      	ldrh	r3, [r3, #0]
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007af0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af4:	81fb      	strh	r3, [r7, #14]
 8007af6:	89fb      	ldrh	r3, [r7, #14]
 8007af8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007afc:	81fb      	strh	r3, [r7, #14]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	441a      	add	r2, r3
 8007b08:	89fb      	ldrh	r3, [r7, #14]
 8007b0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr

08007b2a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b087      	sub	sp, #28
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	7b1b      	ldrb	r3, [r3, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f040 809d 	bne.w	8007c78 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	785b      	ldrb	r3, [r3, #1]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d04c      	beq.n	8007be0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	823b      	strh	r3, [r7, #16]
 8007b54:	8a3b      	ldrh	r3, [r7, #16]
 8007b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d01b      	beq.n	8007b96 <USB_EPClearStall+0x6c>
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b74:	81fb      	strh	r3, [r7, #14]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	441a      	add	r2, r3
 8007b80:	89fb      	ldrh	r3, [r7, #14]
 8007b82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	78db      	ldrb	r3, [r3, #3]
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d06c      	beq.n	8007c78 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	4413      	add	r3, r2
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bb4:	81bb      	strh	r3, [r7, #12]
 8007bb6:	89bb      	ldrh	r3, [r7, #12]
 8007bb8:	f083 0320 	eor.w	r3, r3, #32
 8007bbc:	81bb      	strh	r3, [r7, #12]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	441a      	add	r2, r3
 8007bc8:	89bb      	ldrh	r3, [r7, #12]
 8007bca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	8013      	strh	r3, [r2, #0]
 8007bde:	e04b      	b.n	8007c78 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	881b      	ldrh	r3, [r3, #0]
 8007bec:	82fb      	strh	r3, [r7, #22]
 8007bee:	8afb      	ldrh	r3, [r7, #22]
 8007bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01b      	beq.n	8007c30 <USB_EPClearStall+0x106>
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c0e:	82bb      	strh	r3, [r7, #20]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	441a      	add	r2, r3
 8007c1a:	8abb      	ldrh	r3, [r7, #20]
 8007c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	881b      	ldrh	r3, [r3, #0]
 8007c3c:	b29b      	uxth	r3, r3
 8007c3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c46:	827b      	strh	r3, [r7, #18]
 8007c48:	8a7b      	ldrh	r3, [r7, #18]
 8007c4a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c4e:	827b      	strh	r3, [r7, #18]
 8007c50:	8a7b      	ldrh	r3, [r7, #18]
 8007c52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c56:	827b      	strh	r3, [r7, #18]
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	441a      	add	r2, r3
 8007c62:	8a7b      	ldrh	r3, [r7, #18]
 8007c64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bc80      	pop	{r7}
 8007c82:	4770      	bx	lr

08007c84 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007c90:	78fb      	ldrb	r3, [r7, #3]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d103      	bne.n	8007c9e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2280      	movs	r2, #128	@ 0x80
 8007c9a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bc80      	pop	{r7}
 8007ca8:	4770      	bx	lr

08007caa <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007caa:	b480      	push	{r7}
 8007cac:	b083      	sub	sp, #12
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bc80      	pop	{r7}
 8007cbc:	4770      	bx	lr

08007cbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007cbe:	b480      	push	{r7}
 8007cc0:	b083      	sub	sp, #12
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bc80      	pop	{r7}
 8007cd0:	4770      	bx	lr

08007cd2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b085      	sub	sp, #20
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007ce0:	b29b      	uxth	r3, r3
 8007ce2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3714      	adds	r7, #20
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bc80      	pop	{r7}
 8007cee:	4770      	bx	lr

08007cf0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	370c      	adds	r7, #12
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bc80      	pop	{r7}
 8007d04:	4770      	bx	lr

08007d06 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b08b      	sub	sp, #44	@ 0x2c
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	60f8      	str	r0, [r7, #12]
 8007d0e:	60b9      	str	r1, [r7, #8]
 8007d10:	4611      	mov	r1, r2
 8007d12:	461a      	mov	r2, r3
 8007d14:	460b      	mov	r3, r1
 8007d16:	80fb      	strh	r3, [r7, #6]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d1c:	88bb      	ldrh	r3, [r7, #4]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	085b      	lsrs	r3, r3, #1
 8007d22:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d2c:	88fb      	ldrh	r3, [r7, #6]
 8007d2e:	005a      	lsls	r2, r3, #1
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d38:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d3e:	e01e      	b.n	8007d7e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	021b      	lsls	r3, r3, #8
 8007d4e:	b21a      	sxth	r2, r3
 8007d50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	b21b      	sxth	r3, r3
 8007d58:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	8a7a      	ldrh	r2, [r7, #18]
 8007d5e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d60:	6a3b      	ldr	r3, [r7, #32]
 8007d62:	3302      	adds	r3, #2
 8007d64:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	3302      	adds	r3, #2
 8007d6a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007d6c:	69fb      	ldr	r3, [r7, #28]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	3301      	adds	r3, #1
 8007d76:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1dd      	bne.n	8007d40 <USB_WritePMA+0x3a>
  }
}
 8007d84:	bf00      	nop
 8007d86:	bf00      	nop
 8007d88:	372c      	adds	r7, #44	@ 0x2c
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bc80      	pop	{r7}
 8007d8e:	4770      	bx	lr

08007d90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b08b      	sub	sp, #44	@ 0x2c
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	460b      	mov	r3, r1
 8007da0:	80fb      	strh	r3, [r7, #6]
 8007da2:	4613      	mov	r3, r2
 8007da4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007da6:	88bb      	ldrh	r3, [r7, #4]
 8007da8:	085b      	lsrs	r3, r3, #1
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007db6:	88fb      	ldrh	r3, [r7, #6]
 8007db8:	005a      	lsls	r2, r3, #1
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dc2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007dc4:	69bb      	ldr	r3, [r7, #24]
 8007dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dc8:	e01b      	b.n	8007e02 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	881b      	ldrh	r3, [r3, #0]
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007dd2:	6a3b      	ldr	r3, [r7, #32]
 8007dd4:	3302      	adds	r3, #2
 8007dd6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	3301      	adds	r3, #1
 8007de4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	0a1b      	lsrs	r3, r3, #8
 8007dea:	b2da      	uxtb	r2, r3
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	3301      	adds	r3, #1
 8007df4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	3302      	adds	r3, #2
 8007dfa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfe:	3b01      	subs	r3, #1
 8007e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e0      	bne.n	8007dca <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007e08:	88bb      	ldrh	r3, [r7, #4]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d007      	beq.n	8007e24 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	69fb      	ldr	r3, [r7, #28]
 8007e22:	701a      	strb	r2, [r3, #0]
  }
}
 8007e24:	bf00      	nop
 8007e26:	372c      	adds	r7, #44	@ 0x2c
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bc80      	pop	{r7}
 8007e2c:	4770      	bx	lr

08007e2e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b084      	sub	sp, #16
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
 8007e36:	460b      	mov	r3, r1
 8007e38:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	7c1b      	ldrb	r3, [r3, #16]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d115      	bne.n	8007e72 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	2181      	movs	r1, #129	@ 0x81
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f001 fe81 	bl	8009b56 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e5e:	2202      	movs	r2, #2
 8007e60:	2101      	movs	r1, #1
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 fe77 	bl	8009b56 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007e70:	e012      	b.n	8007e98 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007e72:	2340      	movs	r3, #64	@ 0x40
 8007e74:	2202      	movs	r2, #2
 8007e76:	2181      	movs	r1, #129	@ 0x81
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f001 fe6c 	bl	8009b56 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007e84:	2340      	movs	r3, #64	@ 0x40
 8007e86:	2202      	movs	r2, #2
 8007e88:	2101      	movs	r1, #1
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fe63 	bl	8009b56 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007e98:	2308      	movs	r3, #8
 8007e9a:	2203      	movs	r2, #3
 8007e9c:	2182      	movs	r1, #130	@ 0x82
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f001 fe59 	bl	8009b56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007eaa:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007eae:	f001 ff79 	bl	8009da4 <USBD_static_malloc>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d102      	bne.n	8007eca <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	73fb      	strb	r3, [r7, #15]
 8007ec8:	e026      	b.n	8007f18 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ed0:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	7c1b      	ldrb	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d109      	bne.n	8007f08 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007efa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007efe:	2101      	movs	r1, #1
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f001 ff18 	bl	8009d36 <USBD_LL_PrepareReceive>
 8007f06:	e007      	b.n	8007f18 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007f0e:	2340      	movs	r3, #64	@ 0x40
 8007f10:	2101      	movs	r1, #1
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f001 ff0f 	bl	8009d36 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007f32:	2181      	movs	r1, #129	@ 0x81
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f001 fe34 	bl	8009ba2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007f40:	2101      	movs	r1, #1
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fe2d 	bl	8009ba2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007f50:	2182      	movs	r1, #130	@ 0x82
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fe25 	bl	8009ba2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00e      	beq.n	8007f86 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f001 ff1f 	bl	8009dbc <USBD_static_free>
    pdev->pClassData = NULL;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fa0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007faa:	2300      	movs	r3, #0
 8007fac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d039      	beq.n	800802e <USBD_CDC_Setup+0x9e>
 8007fba:	2b20      	cmp	r3, #32
 8007fbc:	d17f      	bne.n	80080be <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	88db      	ldrh	r3, [r3, #6]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d029      	beq.n	800801a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	b25b      	sxtb	r3, r3
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	da11      	bge.n	8007ff4 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8007fdc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	88d2      	ldrh	r2, [r2, #6]
 8007fe2:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007fe4:	6939      	ldr	r1, [r7, #16]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	461a      	mov	r2, r3
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 fa05 	bl	80093fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8007ff2:	e06b      	b.n	80080cc <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	785a      	ldrb	r2, [r3, #1]
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	88db      	ldrh	r3, [r3, #6]
 8008002:	b2da      	uxtb	r2, r3
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800800a:	6939      	ldr	r1, [r7, #16]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	88db      	ldrh	r3, [r3, #6]
 8008010:	461a      	mov	r2, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f001 fa20 	bl	8009458 <USBD_CtlPrepareRx>
      break;
 8008018:	e058      	b.n	80080cc <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	7850      	ldrb	r0, [r2, #1]
 8008026:	2200      	movs	r2, #0
 8008028:	6839      	ldr	r1, [r7, #0]
 800802a:	4798      	blx	r3
      break;
 800802c:	e04e      	b.n	80080cc <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	785b      	ldrb	r3, [r3, #1]
 8008032:	2b0b      	cmp	r3, #11
 8008034:	d02e      	beq.n	8008094 <USBD_CDC_Setup+0x104>
 8008036:	2b0b      	cmp	r3, #11
 8008038:	dc38      	bgt.n	80080ac <USBD_CDC_Setup+0x11c>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <USBD_CDC_Setup+0xb4>
 800803e:	2b0a      	cmp	r3, #10
 8008040:	d014      	beq.n	800806c <USBD_CDC_Setup+0xdc>
 8008042:	e033      	b.n	80080ac <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800804a:	2b03      	cmp	r3, #3
 800804c:	d107      	bne.n	800805e <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800804e:	f107 030c 	add.w	r3, r7, #12
 8008052:	2202      	movs	r2, #2
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f001 f9d0 	bl	80093fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800805c:	e02e      	b.n	80080bc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f001 f961 	bl	8009328 <USBD_CtlError>
            ret = USBD_FAIL;
 8008066:	2302      	movs	r3, #2
 8008068:	75fb      	strb	r3, [r7, #23]
          break;
 800806a:	e027      	b.n	80080bc <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008072:	2b03      	cmp	r3, #3
 8008074:	d107      	bne.n	8008086 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008076:	f107 030f 	add.w	r3, r7, #15
 800807a:	2201      	movs	r2, #1
 800807c:	4619      	mov	r1, r3
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 f9bc 	bl	80093fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008084:	e01a      	b.n	80080bc <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 f94d 	bl	8009328 <USBD_CtlError>
            ret = USBD_FAIL;
 800808e:	2302      	movs	r3, #2
 8008090:	75fb      	strb	r3, [r7, #23]
          break;
 8008092:	e013      	b.n	80080bc <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800809a:	2b03      	cmp	r3, #3
 800809c:	d00d      	beq.n	80080ba <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800809e:	6839      	ldr	r1, [r7, #0]
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f001 f941 	bl	8009328 <USBD_CtlError>
            ret = USBD_FAIL;
 80080a6:	2302      	movs	r3, #2
 80080a8:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80080aa:	e006      	b.n	80080ba <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 f93a 	bl	8009328 <USBD_CtlError>
          ret = USBD_FAIL;
 80080b4:	2302      	movs	r3, #2
 80080b6:	75fb      	strb	r3, [r7, #23]
          break;
 80080b8:	e000      	b.n	80080bc <USBD_CDC_Setup+0x12c>
          break;
 80080ba:	bf00      	nop
      }
      break;
 80080bc:	e006      	b.n	80080cc <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80080be:	6839      	ldr	r1, [r7, #0]
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f001 f931 	bl	8009328 <USBD_CtlError>
      ret = USBD_FAIL;
 80080c6:	2302      	movs	r3, #2
 80080c8:	75fb      	strb	r3, [r7, #23]
      break;
 80080ca:	bf00      	nop
  }

  return ret;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	460b      	mov	r3, r1
 80080e0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080e8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80080f0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d03a      	beq.n	8008172 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80080fc:	78fa      	ldrb	r2, [r7, #3]
 80080fe:	6879      	ldr	r1, [r7, #4]
 8008100:	4613      	mov	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	4413      	add	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	440b      	add	r3, r1
 800810a:	331c      	adds	r3, #28
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d029      	beq.n	8008166 <USBD_CDC_DataIn+0x90>
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	6879      	ldr	r1, [r7, #4]
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	440b      	add	r3, r1
 8008120:	331c      	adds	r3, #28
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	78f9      	ldrb	r1, [r7, #3]
 8008126:	68b8      	ldr	r0, [r7, #8]
 8008128:	460b      	mov	r3, r1
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	440b      	add	r3, r1
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	4403      	add	r3, r0
 8008132:	3320      	adds	r3, #32
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	fbb2 f1f3 	udiv	r1, r2, r3
 800813a:	fb01 f303 	mul.w	r3, r1, r3
 800813e:	1ad3      	subs	r3, r2, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d110      	bne.n	8008166 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008144:	78fa      	ldrb	r2, [r7, #3]
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	331c      	adds	r3, #28
 8008154:	2200      	movs	r2, #0
 8008156:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008158:	78f9      	ldrb	r1, [r7, #3]
 800815a:	2300      	movs	r3, #0
 800815c:	2200      	movs	r2, #0
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 fdc6 	bl	8009cf0 <USBD_LL_Transmit>
 8008164:	e003      	b.n	800816e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2200      	movs	r2, #0
 800816a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800816e:	2300      	movs	r3, #0
 8008170:	e000      	b.n	8008174 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008172:	2302      	movs	r3, #2
  }
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b084      	sub	sp, #16
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800818e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 fdf1 	bl	8009d7c <USBD_LL_GetRxDataSize>
 800819a:	4602      	mov	r2, r0
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00d      	beq.n	80081c8 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80081c0:	4611      	mov	r1, r2
 80081c2:	4798      	blx	r3

    return USBD_OK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	e000      	b.n	80081ca <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80081c8:	2302      	movs	r3, #2
  }
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081e0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d014      	beq.n	8008216 <USBD_CDC_EP0_RxReady+0x44>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80081f2:	2bff      	cmp	r3, #255	@ 0xff
 80081f4:	d00f      	beq.n	8008216 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008204:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800820c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	22ff      	movs	r2, #255	@ 0xff
 8008212:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2243      	movs	r2, #67	@ 0x43
 800822c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800822e:	4b03      	ldr	r3, [pc, #12]	@ (800823c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008230:	4618      	mov	r0, r3
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	bc80      	pop	{r7}
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	20000094 	.word	0x20000094

08008240 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2243      	movs	r2, #67	@ 0x43
 800824c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800824e:	4b03      	ldr	r3, [pc, #12]	@ (800825c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008250:	4618      	mov	r0, r3
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	bc80      	pop	{r7}
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	20000050 	.word	0x20000050

08008260 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2243      	movs	r2, #67	@ 0x43
 800826c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800826e:	4b03      	ldr	r3, [pc, #12]	@ (800827c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	bc80      	pop	{r7}
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	200000d8 	.word	0x200000d8

08008280 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	220a      	movs	r2, #10
 800828c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800828e:	4b03      	ldr	r3, [pc, #12]	@ (800829c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008290:	4618      	mov	r0, r3
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	bc80      	pop	{r7}
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	2000000c 	.word	0x2000000c

080082a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80082aa:	2302      	movs	r3, #2
 80082ac:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3714      	adds	r7, #20
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bc80      	pop	{r7}
 80082ca:	4770      	bx	lr

080082cc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	4613      	mov	r3, r2
 80082d8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082e0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80082ea:	88fa      	ldrh	r2, [r7, #6]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	371c      	adds	r7, #28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bc80      	pop	{r7}
 80082fc:	4770      	bx	lr

080082fe <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80082fe:	b480      	push	{r7}
 8008300:	b085      	sub	sp, #20
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800830e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	bc80      	pop	{r7}
 8008322:	4770      	bx	lr

08008324 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008332:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800833a:	2b00      	cmp	r3, #0
 800833c:	d01c      	beq.n	8008378 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008344:	2b00      	cmp	r3, #0
 8008346:	d115      	bne.n	8008374 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2201      	movs	r2, #1
 800834c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008366:	b29b      	uxth	r3, r3
 8008368:	2181      	movs	r1, #129	@ 0x81
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 fcc0 	bl	8009cf0 <USBD_LL_Transmit>

      return USBD_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	e002      	b.n	800837a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008374:	2301      	movs	r3, #1
 8008376:	e000      	b.n	800837a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008378:	2302      	movs	r3, #2
  }
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008390:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008398:	2b00      	cmp	r3, #0
 800839a:	d017      	beq.n	80083cc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	7c1b      	ldrb	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d109      	bne.n	80083b8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083ae:	2101      	movs	r1, #1
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f001 fcc0 	bl	8009d36 <USBD_LL_PrepareReceive>
 80083b6:	e007      	b.n	80083c8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80083be:	2340      	movs	r3, #64	@ 0x40
 80083c0:	2101      	movs	r1, #1
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f001 fcb7 	bl	8009d36 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80083c8:	2300      	movs	r3, #0
 80083ca:	e000      	b.n	80083ce <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80083cc:	2302      	movs	r3, #2
  }
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	4613      	mov	r3, r2
 80083e2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80083ea:	2302      	movs	r3, #2
 80083ec:	e01a      	b.n	8008424 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	79fa      	ldrb	r2, [r7, #7]
 800841a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f001 fb25 	bl	8009a6c <USBD_LL_Init>

  return USBD_OK;
 8008422:	2300      	movs	r3, #0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3710      	adds	r7, #16
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d006      	beq.n	800844e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73fb      	strb	r3, [r7, #15]
 800844c:	e001      	b.n	8008452 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800844e:	2302      	movs	r3, #2
 8008450:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	bc80      	pop	{r7}
 800845c:	4770      	bx	lr

0800845e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f001 fb5a 	bl	8009b20 <USBD_LL_Start>

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	bc80      	pop	{r7}
 8008488:	4770      	bx	lr

0800848a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	460b      	mov	r3, r1
 8008494:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008496:	2302      	movs	r3, #2
 8008498:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00c      	beq.n	80084be <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	78fa      	ldrb	r2, [r7, #3]
 80084ae:	4611      	mov	r1, r2
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d101      	bne.n	80084be <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80084be:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	78fa      	ldrb	r2, [r7, #3]
 80084de:	4611      	mov	r1, r2
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	4798      	blx	r3

  return USBD_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b082      	sub	sp, #8
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 fed8 	bl	80092b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2201      	movs	r2, #1
 800850a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008514:	461a      	mov	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	2b02      	cmp	r3, #2
 8008528:	d016      	beq.n	8008558 <USBD_LL_SetupStage+0x6a>
 800852a:	2b02      	cmp	r3, #2
 800852c:	d81c      	bhi.n	8008568 <USBD_LL_SetupStage+0x7a>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d002      	beq.n	8008538 <USBD_LL_SetupStage+0x4a>
 8008532:	2b01      	cmp	r3, #1
 8008534:	d008      	beq.n	8008548 <USBD_LL_SetupStage+0x5a>
 8008536:	e017      	b.n	8008568 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800853e:	4619      	mov	r1, r3
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 f9cb 	bl	80088dc <USBD_StdDevReq>
      break;
 8008546:	e01a      	b.n	800857e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800854e:	4619      	mov	r1, r3
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fa2d 	bl	80089b0 <USBD_StdItfReq>
      break;
 8008556:	e012      	b.n	800857e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800855e:	4619      	mov	r1, r3
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 fa6d 	bl	8008a40 <USBD_StdEPReq>
      break;
 8008566:	e00a      	b.n	800857e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800856e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008572:	b2db      	uxtb	r3, r3
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 fb32 	bl	8009be0 <USBD_LL_StallEP>
      break;
 800857c:	bf00      	nop
  }

  return USBD_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	460b      	mov	r3, r1
 8008592:	607a      	str	r2, [r7, #4]
 8008594:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008596:	7afb      	ldrb	r3, [r7, #11]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d14b      	bne.n	8008634 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80085a2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d134      	bne.n	8008618 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	68da      	ldr	r2, [r3, #12]
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d919      	bls.n	80085ee <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	68da      	ldr	r2, [r3, #12]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	1ad2      	subs	r2, r2, r3
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	68da      	ldr	r2, [r3, #12]
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d203      	bcs.n	80085dc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80085d8:	b29b      	uxth	r3, r3
 80085da:	e002      	b.n	80085e2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	461a      	mov	r2, r3
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	f000 ff54 	bl	8009494 <USBD_CtlContinueRx>
 80085ec:	e038      	b.n	8008660 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085f4:	691b      	ldr	r3, [r3, #16]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00a      	beq.n	8008610 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008600:	2b03      	cmp	r3, #3
 8008602:	d105      	bne.n	8008610 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 ff51 	bl	80094b8 <USBD_CtlSendStatus>
 8008616:	e023      	b.n	8008660 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800861e:	2b05      	cmp	r3, #5
 8008620:	d11e      	bne.n	8008660 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800862a:	2100      	movs	r1, #0
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f001 fad7 	bl	8009be0 <USBD_LL_StallEP>
 8008632:	e015      	b.n	8008660 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800863a:	699b      	ldr	r3, [r3, #24]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d00d      	beq.n	800865c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008646:	2b03      	cmp	r3, #3
 8008648:	d108      	bne.n	800865c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008650:	699b      	ldr	r3, [r3, #24]
 8008652:	7afa      	ldrb	r2, [r7, #11]
 8008654:	4611      	mov	r1, r2
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	4798      	blx	r3
 800865a:	e001      	b.n	8008660 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800865c:	2302      	movs	r3, #2
 800865e:	e000      	b.n	8008662 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3718      	adds	r7, #24
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b086      	sub	sp, #24
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	460b      	mov	r3, r1
 8008674:	607a      	str	r2, [r7, #4]
 8008676:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008678:	7afb      	ldrb	r3, [r7, #11]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d17f      	bne.n	800877e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3314      	adds	r3, #20
 8008682:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800868a:	2b02      	cmp	r3, #2
 800868c:	d15c      	bne.n	8008748 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	429a      	cmp	r2, r3
 8008698:	d915      	bls.n	80086c6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	1ad2      	subs	r2, r2, r3
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	461a      	mov	r2, r3
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 febe 	bl	8009434 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086b8:	2300      	movs	r3, #0
 80086ba:	2200      	movs	r2, #0
 80086bc:	2100      	movs	r1, #0
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f001 fb39 	bl	8009d36 <USBD_LL_PrepareReceive>
 80086c4:	e04e      	b.n	8008764 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	6912      	ldr	r2, [r2, #16]
 80086ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80086d2:	fb01 f202 	mul.w	r2, r1, r2
 80086d6:	1a9b      	subs	r3, r3, r2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d11c      	bne.n	8008716 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d316      	bcc.n	8008716 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	689a      	ldr	r2, [r3, #8]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d20f      	bcs.n	8008716 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086f6:	2200      	movs	r2, #0
 80086f8:	2100      	movs	r1, #0
 80086fa:	68f8      	ldr	r0, [r7, #12]
 80086fc:	f000 fe9a 	bl	8009434 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008708:	2300      	movs	r3, #0
 800870a:	2200      	movs	r2, #0
 800870c:	2100      	movs	r1, #0
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f001 fb11 	bl	8009d36 <USBD_LL_PrepareReceive>
 8008714:	e026      	b.n	8008764 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00a      	beq.n	8008738 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008728:	2b03      	cmp	r3, #3
 800872a:	d105      	bne.n	8008738 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008738:	2180      	movs	r1, #128	@ 0x80
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f001 fa50 	bl	8009be0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fecc 	bl	80094de <USBD_CtlReceiveStatus>
 8008746:	e00d      	b.n	8008764 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800874e:	2b04      	cmp	r3, #4
 8008750:	d004      	beq.n	800875c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008758:	2b00      	cmp	r3, #0
 800875a:	d103      	bne.n	8008764 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800875c:	2180      	movs	r1, #128	@ 0x80
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f001 fa3e 	bl	8009be0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800876a:	2b01      	cmp	r3, #1
 800876c:	d11d      	bne.n	80087aa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff fe81 	bl	8008476 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800877c:	e015      	b.n	80087aa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00d      	beq.n	80087a6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008790:	2b03      	cmp	r3, #3
 8008792:	d108      	bne.n	80087a6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	7afa      	ldrb	r2, [r7, #11]
 800879e:	4611      	mov	r1, r2
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	4798      	blx	r3
 80087a4:	e001      	b.n	80087aa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087a6:	2302      	movs	r3, #2
 80087a8:	e000      	b.n	80087ac <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80087aa:	2300      	movs	r3, #0
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}

080087b4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b082      	sub	sp, #8
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087bc:	2340      	movs	r3, #64	@ 0x40
 80087be:	2200      	movs	r2, #0
 80087c0:	2100      	movs	r1, #0
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f001 f9c7 	bl	8009b56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2240      	movs	r2, #64	@ 0x40
 80087d4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087d8:	2340      	movs	r3, #64	@ 0x40
 80087da:	2200      	movs	r2, #0
 80087dc:	2180      	movs	r1, #128	@ 0x80
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f001 f9b9 	bl	8009b56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2240      	movs	r2, #64	@ 0x40
 80087ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008814:	2b00      	cmp	r3, #0
 8008816:	d009      	beq.n	800882c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	6852      	ldr	r2, [r2, #4]
 8008824:	b2d2      	uxtb	r2, r2
 8008826:	4611      	mov	r1, r2
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	4798      	blx	r3
  }

  return USBD_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}

08008836 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	460b      	mov	r3, r1
 8008840:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	78fa      	ldrb	r2, [r7, #3]
 8008846:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	bc80      	pop	{r7}
 8008852:	4770      	bx	lr

08008854 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2204      	movs	r2, #4
 800886c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	bc80      	pop	{r7}
 800887a:	4770      	bx	lr

0800887c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800888a:	2b04      	cmp	r3, #4
 800888c:	d105      	bne.n	800889a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bc80      	pop	{r7}
 80088a4:	4770      	bx	lr

080088a6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d10b      	bne.n	80088d0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d005      	beq.n	80088d0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088f2:	2b40      	cmp	r3, #64	@ 0x40
 80088f4:	d005      	beq.n	8008902 <USBD_StdDevReq+0x26>
 80088f6:	2b40      	cmp	r3, #64	@ 0x40
 80088f8:	d84f      	bhi.n	800899a <USBD_StdDevReq+0xbe>
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d009      	beq.n	8008912 <USBD_StdDevReq+0x36>
 80088fe:	2b20      	cmp	r3, #32
 8008900:	d14b      	bne.n	800899a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	6839      	ldr	r1, [r7, #0]
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	4798      	blx	r3
      break;
 8008910:	e048      	b.n	80089a4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	785b      	ldrb	r3, [r3, #1]
 8008916:	2b09      	cmp	r3, #9
 8008918:	d839      	bhi.n	800898e <USBD_StdDevReq+0xb2>
 800891a:	a201      	add	r2, pc, #4	@ (adr r2, 8008920 <USBD_StdDevReq+0x44>)
 800891c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008920:	08008971 	.word	0x08008971
 8008924:	08008985 	.word	0x08008985
 8008928:	0800898f 	.word	0x0800898f
 800892c:	0800897b 	.word	0x0800897b
 8008930:	0800898f 	.word	0x0800898f
 8008934:	08008953 	.word	0x08008953
 8008938:	08008949 	.word	0x08008949
 800893c:	0800898f 	.word	0x0800898f
 8008940:	08008967 	.word	0x08008967
 8008944:	0800895d 	.word	0x0800895d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f9dc 	bl	8008d08 <USBD_GetDescriptor>
          break;
 8008950:	e022      	b.n	8008998 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008952:	6839      	ldr	r1, [r7, #0]
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 fb3f 	bl	8008fd8 <USBD_SetAddress>
          break;
 800895a:	e01d      	b.n	8008998 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800895c:	6839      	ldr	r1, [r7, #0]
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fb7e 	bl	8009060 <USBD_SetConfig>
          break;
 8008964:	e018      	b.n	8008998 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fc07 	bl	800917c <USBD_GetConfig>
          break;
 800896e:	e013      	b.n	8008998 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fc37 	bl	80091e6 <USBD_GetStatus>
          break;
 8008978:	e00e      	b.n	8008998 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800897a:	6839      	ldr	r1, [r7, #0]
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fc65 	bl	800924c <USBD_SetFeature>
          break;
 8008982:	e009      	b.n	8008998 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008984:	6839      	ldr	r1, [r7, #0]
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 fc74 	bl	8009274 <USBD_ClrFeature>
          break;
 800898c:	e004      	b.n	8008998 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 fcc9 	bl	8009328 <USBD_CtlError>
          break;
 8008996:	bf00      	nop
      }
      break;
 8008998:	e004      	b.n	80089a4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fcc3 	bl	8009328 <USBD_CtlError>
      break;
 80089a2:	bf00      	nop
  }

  return ret;
 80089a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop

080089b0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ba:	2300      	movs	r3, #0
 80089bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089c6:	2b40      	cmp	r3, #64	@ 0x40
 80089c8:	d005      	beq.n	80089d6 <USBD_StdItfReq+0x26>
 80089ca:	2b40      	cmp	r3, #64	@ 0x40
 80089cc:	d82e      	bhi.n	8008a2c <USBD_StdItfReq+0x7c>
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d001      	beq.n	80089d6 <USBD_StdItfReq+0x26>
 80089d2:	2b20      	cmp	r3, #32
 80089d4:	d12a      	bne.n	8008a2c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089dc:	3b01      	subs	r3, #1
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d81d      	bhi.n	8008a1e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	889b      	ldrh	r3, [r3, #4]
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d813      	bhi.n	8008a14 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	4798      	blx	r3
 80089fa:	4603      	mov	r3, r0
 80089fc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	88db      	ldrh	r3, [r3, #6]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d110      	bne.n	8008a28 <USBD_StdItfReq+0x78>
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d10d      	bne.n	8008a28 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fd53 	bl	80094b8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008a12:	e009      	b.n	8008a28 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fc86 	bl	8009328 <USBD_CtlError>
          break;
 8008a1c:	e004      	b.n	8008a28 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008a1e:	6839      	ldr	r1, [r7, #0]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fc81 	bl	8009328 <USBD_CtlError>
          break;
 8008a26:	e000      	b.n	8008a2a <USBD_StdItfReq+0x7a>
          break;
 8008a28:	bf00      	nop
      }
      break;
 8008a2a:	e004      	b.n	8008a36 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fc7a 	bl	8009328 <USBD_CtlError>
      break;
 8008a34:	bf00      	nop
  }

  return USBD_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	889b      	ldrh	r3, [r3, #4]
 8008a52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a5c:	2b40      	cmp	r3, #64	@ 0x40
 8008a5e:	d007      	beq.n	8008a70 <USBD_StdEPReq+0x30>
 8008a60:	2b40      	cmp	r3, #64	@ 0x40
 8008a62:	f200 8146 	bhi.w	8008cf2 <USBD_StdEPReq+0x2b2>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <USBD_StdEPReq+0x40>
 8008a6a:	2b20      	cmp	r3, #32
 8008a6c:	f040 8141 	bne.w	8008cf2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	4798      	blx	r3
      break;
 8008a7e:	e13d      	b.n	8008cfc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a88:	2b20      	cmp	r3, #32
 8008a8a:	d10a      	bne.n	8008aa2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	4798      	blx	r3
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008a9e:	7bfb      	ldrb	r3, [r7, #15]
 8008aa0:	e12d      	b.n	8008cfe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	785b      	ldrb	r3, [r3, #1]
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d007      	beq.n	8008aba <USBD_StdEPReq+0x7a>
 8008aaa:	2b03      	cmp	r3, #3
 8008aac:	f300 811b 	bgt.w	8008ce6 <USBD_StdEPReq+0x2a6>
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d072      	beq.n	8008b9a <USBD_StdEPReq+0x15a>
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d03a      	beq.n	8008b2e <USBD_StdEPReq+0xee>
 8008ab8:	e115      	b.n	8008ce6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d002      	beq.n	8008aca <USBD_StdEPReq+0x8a>
 8008ac4:	2b03      	cmp	r3, #3
 8008ac6:	d015      	beq.n	8008af4 <USBD_StdEPReq+0xb4>
 8008ac8:	e02b      	b.n	8008b22 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00c      	beq.n	8008aea <USBD_StdEPReq+0xaa>
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b80      	cmp	r3, #128	@ 0x80
 8008ad4:	d009      	beq.n	8008aea <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f001 f880 	bl	8009be0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ae0:	2180      	movs	r1, #128	@ 0x80
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 f87c 	bl	8009be0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ae8:	e020      	b.n	8008b2c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fc1b 	bl	8009328 <USBD_CtlError>
              break;
 8008af2:	e01b      	b.n	8008b2c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	885b      	ldrh	r3, [r3, #2]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10e      	bne.n	8008b1a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008afc:	7bbb      	ldrb	r3, [r7, #14]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00b      	beq.n	8008b1a <USBD_StdEPReq+0xda>
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	2b80      	cmp	r3, #128	@ 0x80
 8008b06:	d008      	beq.n	8008b1a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	88db      	ldrh	r3, [r3, #6]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d104      	bne.n	8008b1a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008b10:	7bbb      	ldrb	r3, [r7, #14]
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f001 f863 	bl	8009be0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fccc 	bl	80094b8 <USBD_CtlSendStatus>

              break;
 8008b20:	e004      	b.n	8008b2c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fbff 	bl	8009328 <USBD_CtlError>
              break;
 8008b2a:	bf00      	nop
          }
          break;
 8008b2c:	e0e0      	b.n	8008cf0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d002      	beq.n	8008b3e <USBD_StdEPReq+0xfe>
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d015      	beq.n	8008b68 <USBD_StdEPReq+0x128>
 8008b3c:	e026      	b.n	8008b8c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00c      	beq.n	8008b5e <USBD_StdEPReq+0x11e>
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	2b80      	cmp	r3, #128	@ 0x80
 8008b48:	d009      	beq.n	8008b5e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 f846 	bl	8009be0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008b54:	2180      	movs	r1, #128	@ 0x80
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 f842 	bl	8009be0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008b5c:	e01c      	b.n	8008b98 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fbe1 	bl	8009328 <USBD_CtlError>
              break;
 8008b66:	e017      	b.n	8008b98 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	885b      	ldrh	r3, [r3, #2]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d112      	bne.n	8008b96 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
 8008b72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d004      	beq.n	8008b84 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f001 f84d 	bl	8009c1e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fc97 	bl	80094b8 <USBD_CtlSendStatus>
              }
              break;
 8008b8a:	e004      	b.n	8008b96 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f000 fbca 	bl	8009328 <USBD_CtlError>
              break;
 8008b94:	e000      	b.n	8008b98 <USBD_StdEPReq+0x158>
              break;
 8008b96:	bf00      	nop
          }
          break;
 8008b98:	e0aa      	b.n	8008cf0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d002      	beq.n	8008baa <USBD_StdEPReq+0x16a>
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d032      	beq.n	8008c0e <USBD_StdEPReq+0x1ce>
 8008ba8:	e097      	b.n	8008cda <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d007      	beq.n	8008bc0 <USBD_StdEPReq+0x180>
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	2b80      	cmp	r3, #128	@ 0x80
 8008bb4:	d004      	beq.n	8008bc0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fbb5 	bl	8009328 <USBD_CtlError>
                break;
 8008bbe:	e091      	b.n	8008ce4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	da0b      	bge.n	8008be0 <USBD_StdEPReq+0x1a0>
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bce:	4613      	mov	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	3310      	adds	r3, #16
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	4413      	add	r3, r2
 8008bdc:	3304      	adds	r3, #4
 8008bde:	e00b      	b.n	8008bf8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008be0:	7bbb      	ldrb	r3, [r7, #14]
 8008be2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008be6:	4613      	mov	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2202      	movs	r2, #2
 8008c04:	4619      	mov	r1, r3
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fbf8 	bl	80093fc <USBD_CtlSendData>
              break;
 8008c0c:	e06a      	b.n	8008ce4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008c0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	da11      	bge.n	8008c3a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	f003 020f 	and.w	r2, r3, #15
 8008c1c:	6879      	ldr	r1, [r7, #4]
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	440b      	add	r3, r1
 8008c28:	3318      	adds	r3, #24
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d117      	bne.n	8008c60 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c30:	6839      	ldr	r1, [r7, #0]
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fb78 	bl	8009328 <USBD_CtlError>
                  break;
 8008c38:	e054      	b.n	8008ce4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	f003 020f 	and.w	r2, r3, #15
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	440b      	add	r3, r1
 8008c4c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d104      	bne.n	8008c60 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008c56:	6839      	ldr	r1, [r7, #0]
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fb65 	bl	8009328 <USBD_CtlError>
                  break;
 8008c5e:	e041      	b.n	8008ce4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	da0b      	bge.n	8008c80 <USBD_StdEPReq+0x240>
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	3310      	adds	r3, #16
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	4413      	add	r3, r2
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	e00b      	b.n	8008c98 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c86:	4613      	mov	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	4413      	add	r3, r2
 8008c96:	3304      	adds	r3, #4
 8008c98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d002      	beq.n	8008ca6 <USBD_StdEPReq+0x266>
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	2b80      	cmp	r3, #128	@ 0x80
 8008ca4:	d103      	bne.n	8008cae <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	601a      	str	r2, [r3, #0]
 8008cac:	e00e      	b.n	8008ccc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 ffd2 	bl	8009c5c <USBD_LL_IsStallEP>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]
 8008cc4:	e002      	b.n	8008ccc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2202      	movs	r2, #2
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fb92 	bl	80093fc <USBD_CtlSendData>
              break;
 8008cd8:	e004      	b.n	8008ce4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fb23 	bl	8009328 <USBD_CtlError>
              break;
 8008ce2:	bf00      	nop
          }
          break;
 8008ce4:	e004      	b.n	8008cf0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fb1d 	bl	8009328 <USBD_CtlError>
          break;
 8008cee:	bf00      	nop
      }
      break;
 8008cf0:	e004      	b.n	8008cfc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fb17 	bl	8009328 <USBD_CtlError>
      break;
 8008cfa:	bf00      	nop
  }

  return ret;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
	...

08008d08 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d12:	2300      	movs	r3, #0
 8008d14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d16:	2300      	movs	r3, #0
 8008d18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	885b      	ldrh	r3, [r3, #2]
 8008d22:	0a1b      	lsrs	r3, r3, #8
 8008d24:	b29b      	uxth	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	2b06      	cmp	r3, #6
 8008d2a:	f200 8128 	bhi.w	8008f7e <USBD_GetDescriptor+0x276>
 8008d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d34 <USBD_GetDescriptor+0x2c>)
 8008d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d34:	08008d51 	.word	0x08008d51
 8008d38:	08008d69 	.word	0x08008d69
 8008d3c:	08008da9 	.word	0x08008da9
 8008d40:	08008f7f 	.word	0x08008f7f
 8008d44:	08008f7f 	.word	0x08008f7f
 8008d48:	08008f1f 	.word	0x08008f1f
 8008d4c:	08008f4b 	.word	0x08008f4b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	7c12      	ldrb	r2, [r2, #16]
 8008d5c:	f107 0108 	add.w	r1, r7, #8
 8008d60:	4610      	mov	r0, r2
 8008d62:	4798      	blx	r3
 8008d64:	60f8      	str	r0, [r7, #12]
      break;
 8008d66:	e112      	b.n	8008f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	7c1b      	ldrb	r3, [r3, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10d      	bne.n	8008d8c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d78:	f107 0208 	add.w	r2, r7, #8
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	4798      	blx	r3
 8008d80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	3301      	adds	r3, #1
 8008d86:	2202      	movs	r2, #2
 8008d88:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008d8a:	e100      	b.n	8008f8e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d94:	f107 0208 	add.w	r2, r7, #8
 8008d98:	4610      	mov	r0, r2
 8008d9a:	4798      	blx	r3
 8008d9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	3301      	adds	r3, #1
 8008da2:	2202      	movs	r2, #2
 8008da4:	701a      	strb	r2, [r3, #0]
      break;
 8008da6:	e0f2      	b.n	8008f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	885b      	ldrh	r3, [r3, #2]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b05      	cmp	r3, #5
 8008db0:	f200 80ac 	bhi.w	8008f0c <USBD_GetDescriptor+0x204>
 8008db4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dbc <USBD_GetDescriptor+0xb4>)
 8008db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dba:	bf00      	nop
 8008dbc:	08008dd5 	.word	0x08008dd5
 8008dc0:	08008e09 	.word	0x08008e09
 8008dc4:	08008e3d 	.word	0x08008e3d
 8008dc8:	08008e71 	.word	0x08008e71
 8008dcc:	08008ea5 	.word	0x08008ea5
 8008dd0:	08008ed9 	.word	0x08008ed9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00b      	beq.n	8008df8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	7c12      	ldrb	r2, [r2, #16]
 8008dec:	f107 0108 	add.w	r1, r7, #8
 8008df0:	4610      	mov	r0, r2
 8008df2:	4798      	blx	r3
 8008df4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008df6:	e091      	b.n	8008f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fa94 	bl	8009328 <USBD_CtlError>
            err++;
 8008e00:	7afb      	ldrb	r3, [r7, #11]
 8008e02:	3301      	adds	r3, #1
 8008e04:	72fb      	strb	r3, [r7, #11]
          break;
 8008e06:	e089      	b.n	8008f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d00b      	beq.n	8008e2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	7c12      	ldrb	r2, [r2, #16]
 8008e20:	f107 0108 	add.w	r1, r7, #8
 8008e24:	4610      	mov	r0, r2
 8008e26:	4798      	blx	r3
 8008e28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e2a:	e077      	b.n	8008f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e2c:	6839      	ldr	r1, [r7, #0]
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fa7a 	bl	8009328 <USBD_CtlError>
            err++;
 8008e34:	7afb      	ldrb	r3, [r7, #11]
 8008e36:	3301      	adds	r3, #1
 8008e38:	72fb      	strb	r3, [r7, #11]
          break;
 8008e3a:	e06f      	b.n	8008f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00b      	beq.n	8008e60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e4e:	68db      	ldr	r3, [r3, #12]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	7c12      	ldrb	r2, [r2, #16]
 8008e54:	f107 0108 	add.w	r1, r7, #8
 8008e58:	4610      	mov	r0, r2
 8008e5a:	4798      	blx	r3
 8008e5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e5e:	e05d      	b.n	8008f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e60:	6839      	ldr	r1, [r7, #0]
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fa60 	bl	8009328 <USBD_CtlError>
            err++;
 8008e68:	7afb      	ldrb	r3, [r7, #11]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008e6e:	e055      	b.n	8008f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e76:	691b      	ldr	r3, [r3, #16]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d00b      	beq.n	8008e94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e82:	691b      	ldr	r3, [r3, #16]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	7c12      	ldrb	r2, [r2, #16]
 8008e88:	f107 0108 	add.w	r1, r7, #8
 8008e8c:	4610      	mov	r0, r2
 8008e8e:	4798      	blx	r3
 8008e90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e92:	e043      	b.n	8008f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e94:	6839      	ldr	r1, [r7, #0]
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fa46 	bl	8009328 <USBD_CtlError>
            err++;
 8008e9c:	7afb      	ldrb	r3, [r7, #11]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ea2:	e03b      	b.n	8008f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d00b      	beq.n	8008ec8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	7c12      	ldrb	r2, [r2, #16]
 8008ebc:	f107 0108 	add.w	r1, r7, #8
 8008ec0:	4610      	mov	r0, r2
 8008ec2:	4798      	blx	r3
 8008ec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ec6:	e029      	b.n	8008f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ec8:	6839      	ldr	r1, [r7, #0]
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fa2c 	bl	8009328 <USBD_CtlError>
            err++;
 8008ed0:	7afb      	ldrb	r3, [r7, #11]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ed6:	e021      	b.n	8008f1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00b      	beq.n	8008efc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	7c12      	ldrb	r2, [r2, #16]
 8008ef0:	f107 0108 	add.w	r1, r7, #8
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4798      	blx	r3
 8008ef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008efa:	e00f      	b.n	8008f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fa12 	bl	8009328 <USBD_CtlError>
            err++;
 8008f04:	7afb      	ldrb	r3, [r7, #11]
 8008f06:	3301      	adds	r3, #1
 8008f08:	72fb      	strb	r3, [r7, #11]
          break;
 8008f0a:	e007      	b.n	8008f1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa0a 	bl	8009328 <USBD_CtlError>
          err++;
 8008f14:	7afb      	ldrb	r3, [r7, #11]
 8008f16:	3301      	adds	r3, #1
 8008f18:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008f1a:	e038      	b.n	8008f8e <USBD_GetDescriptor+0x286>
 8008f1c:	e037      	b.n	8008f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	7c1b      	ldrb	r3, [r3, #16]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d109      	bne.n	8008f3a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f2e:	f107 0208 	add.w	r2, r7, #8
 8008f32:	4610      	mov	r0, r2
 8008f34:	4798      	blx	r3
 8008f36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f38:	e029      	b.n	8008f8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f9f3 	bl	8009328 <USBD_CtlError>
        err++;
 8008f42:	7afb      	ldrb	r3, [r7, #11]
 8008f44:	3301      	adds	r3, #1
 8008f46:	72fb      	strb	r3, [r7, #11]
      break;
 8008f48:	e021      	b.n	8008f8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	7c1b      	ldrb	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d10d      	bne.n	8008f6e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f5a:	f107 0208 	add.w	r2, r7, #8
 8008f5e:	4610      	mov	r0, r2
 8008f60:	4798      	blx	r3
 8008f62:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	3301      	adds	r3, #1
 8008f68:	2207      	movs	r2, #7
 8008f6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f6c:	e00f      	b.n	8008f8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008f6e:	6839      	ldr	r1, [r7, #0]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 f9d9 	bl	8009328 <USBD_CtlError>
        err++;
 8008f76:	7afb      	ldrb	r3, [r7, #11]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008f7c:	e007      	b.n	8008f8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f9d1 	bl	8009328 <USBD_CtlError>
      err++;
 8008f86:	7afb      	ldrb	r3, [r7, #11]
 8008f88:	3301      	adds	r3, #1
 8008f8a:	72fb      	strb	r3, [r7, #11]
      break;
 8008f8c:	bf00      	nop
  }

  if (err != 0U)
 8008f8e:	7afb      	ldrb	r3, [r7, #11]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d11c      	bne.n	8008fce <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008f94:	893b      	ldrh	r3, [r7, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d011      	beq.n	8008fbe <USBD_GetDescriptor+0x2b6>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	88db      	ldrh	r3, [r3, #6]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00d      	beq.n	8008fbe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	88da      	ldrh	r2, [r3, #6]
 8008fa6:	893b      	ldrh	r3, [r7, #8]
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	bf28      	it	cs
 8008fac:	4613      	movcs	r3, r2
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fb2:	893b      	ldrh	r3, [r7, #8]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	68f9      	ldr	r1, [r7, #12]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fa1f 	bl	80093fc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	88db      	ldrh	r3, [r3, #6]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d104      	bne.n	8008fd0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa76 	bl	80094b8 <USBD_CtlSendStatus>
 8008fcc:	e000      	b.n	8008fd0 <USBD_GetDescriptor+0x2c8>
    return;
 8008fce:	bf00      	nop
    }
  }
}
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop

08008fd8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	889b      	ldrh	r3, [r3, #4]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d130      	bne.n	800904c <USBD_SetAddress+0x74>
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	88db      	ldrh	r3, [r3, #6]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d12c      	bne.n	800904c <USBD_SetAddress+0x74>
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	885b      	ldrh	r3, [r3, #2]
 8008ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ff8:	d828      	bhi.n	800904c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	885b      	ldrh	r3, [r3, #2]
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009004:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800900c:	2b03      	cmp	r3, #3
 800900e:	d104      	bne.n	800901a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f988 	bl	8009328 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009018:	e01d      	b.n	8009056 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	7bfa      	ldrb	r2, [r7, #15]
 800901e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fe43 	bl	8009cb2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fa43 	bl	80094b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009032:	7bfb      	ldrb	r3, [r7, #15]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d004      	beq.n	8009042 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009040:	e009      	b.n	8009056 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800904a:	e004      	b.n	8009056 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f96a 	bl	8009328 <USBD_CtlError>
  }
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
	...

08009060 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	885b      	ldrh	r3, [r3, #2]
 800906e:	b2da      	uxtb	r2, r3
 8009070:	4b41      	ldr	r3, [pc, #260]	@ (8009178 <USBD_SetConfig+0x118>)
 8009072:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009074:	4b40      	ldr	r3, [pc, #256]	@ (8009178 <USBD_SetConfig+0x118>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d904      	bls.n	8009086 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f952 	bl	8009328 <USBD_CtlError>
 8009084:	e075      	b.n	8009172 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800908c:	2b02      	cmp	r3, #2
 800908e:	d002      	beq.n	8009096 <USBD_SetConfig+0x36>
 8009090:	2b03      	cmp	r3, #3
 8009092:	d023      	beq.n	80090dc <USBD_SetConfig+0x7c>
 8009094:	e062      	b.n	800915c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009096:	4b38      	ldr	r3, [pc, #224]	@ (8009178 <USBD_SetConfig+0x118>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d01a      	beq.n	80090d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800909e:	4b36      	ldr	r3, [pc, #216]	@ (8009178 <USBD_SetConfig+0x118>)
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	461a      	mov	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2203      	movs	r2, #3
 80090ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80090b0:	4b31      	ldr	r3, [pc, #196]	@ (8009178 <USBD_SetConfig+0x118>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7ff f9e7 	bl	800848a <USBD_SetClassConfig>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b02      	cmp	r3, #2
 80090c0:	d104      	bne.n	80090cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f92f 	bl	8009328 <USBD_CtlError>
            return;
 80090ca:	e052      	b.n	8009172 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f9f3 	bl	80094b8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80090d2:	e04e      	b.n	8009172 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f9ef 	bl	80094b8 <USBD_CtlSendStatus>
        break;
 80090da:	e04a      	b.n	8009172 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80090dc:	4b26      	ldr	r3, [pc, #152]	@ (8009178 <USBD_SetConfig+0x118>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d112      	bne.n	800910a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2202      	movs	r2, #2
 80090e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80090ec:	4b22      	ldr	r3, [pc, #136]	@ (8009178 <USBD_SetConfig+0x118>)
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	461a      	mov	r2, r3
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80090f6:	4b20      	ldr	r3, [pc, #128]	@ (8009178 <USBD_SetConfig+0x118>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	4619      	mov	r1, r3
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff f9e3 	bl	80084c8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f9d8 	bl	80094b8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009108:	e033      	b.n	8009172 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800910a:	4b1b      	ldr	r3, [pc, #108]	@ (8009178 <USBD_SetConfig+0x118>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	429a      	cmp	r2, r3
 8009116:	d01d      	beq.n	8009154 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	b2db      	uxtb	r3, r3
 800911e:	4619      	mov	r1, r3
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f7ff f9d1 	bl	80084c8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009126:	4b14      	ldr	r3, [pc, #80]	@ (8009178 <USBD_SetConfig+0x118>)
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	461a      	mov	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009130:	4b11      	ldr	r3, [pc, #68]	@ (8009178 <USBD_SetConfig+0x118>)
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7ff f9a7 	bl	800848a <USBD_SetClassConfig>
 800913c:	4603      	mov	r3, r0
 800913e:	2b02      	cmp	r3, #2
 8009140:	d104      	bne.n	800914c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f8ef 	bl	8009328 <USBD_CtlError>
            return;
 800914a:	e012      	b.n	8009172 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f9b3 	bl	80094b8 <USBD_CtlSendStatus>
        break;
 8009152:	e00e      	b.n	8009172 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f9af 	bl	80094b8 <USBD_CtlSendStatus>
        break;
 800915a:	e00a      	b.n	8009172 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f8e2 	bl	8009328 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009164:	4b04      	ldr	r3, [pc, #16]	@ (8009178 <USBD_SetConfig+0x118>)
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f7ff f9ac 	bl	80084c8 <USBD_ClrClassConfig>
        break;
 8009170:	bf00      	nop
    }
  }
}
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20000244 	.word	0x20000244

0800917c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	88db      	ldrh	r3, [r3, #6]
 800918a:	2b01      	cmp	r3, #1
 800918c:	d004      	beq.n	8009198 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f8c9 	bl	8009328 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009196:	e022      	b.n	80091de <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800919e:	2b02      	cmp	r3, #2
 80091a0:	dc02      	bgt.n	80091a8 <USBD_GetConfig+0x2c>
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	dc03      	bgt.n	80091ae <USBD_GetConfig+0x32>
 80091a6:	e015      	b.n	80091d4 <USBD_GetConfig+0x58>
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d00b      	beq.n	80091c4 <USBD_GetConfig+0x48>
 80091ac:	e012      	b.n	80091d4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	3308      	adds	r3, #8
 80091b8:	2201      	movs	r2, #1
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f91d 	bl	80093fc <USBD_CtlSendData>
        break;
 80091c2:	e00c      	b.n	80091de <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	3304      	adds	r3, #4
 80091c8:	2201      	movs	r2, #1
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f915 	bl	80093fc <USBD_CtlSendData>
        break;
 80091d2:	e004      	b.n	80091de <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f8a6 	bl	8009328 <USBD_CtlError>
        break;
 80091dc:	bf00      	nop
}
 80091de:	bf00      	nop
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091f6:	3b01      	subs	r3, #1
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d81e      	bhi.n	800923a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	88db      	ldrh	r3, [r3, #6]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d004      	beq.n	800920e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f88e 	bl	8009328 <USBD_CtlError>
        break;
 800920c:	e01a      	b.n	8009244 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2201      	movs	r2, #1
 8009212:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	f043 0202 	orr.w	r2, r3, #2
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	330c      	adds	r3, #12
 800922e:	2202      	movs	r2, #2
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f8e2 	bl	80093fc <USBD_CtlSendData>
      break;
 8009238:	e004      	b.n	8009244 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f873 	bl	8009328 <USBD_CtlError>
      break;
 8009242:	bf00      	nop
  }
}
 8009244:	bf00      	nop
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	885b      	ldrh	r3, [r3, #2]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d106      	bne.n	800926c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2201      	movs	r2, #1
 8009262:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f926 	bl	80094b8 <USBD_CtlSendStatus>
  }
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009284:	3b01      	subs	r3, #1
 8009286:	2b02      	cmp	r3, #2
 8009288:	d80b      	bhi.n	80092a2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	885b      	ldrh	r3, [r3, #2]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d10c      	bne.n	80092ac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f90c 	bl	80094b8 <USBD_CtlSendStatus>
      }
      break;
 80092a0:	e004      	b.n	80092ac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80092a2:	6839      	ldr	r1, [r7, #0]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f83f 	bl	8009328 <USBD_CtlError>
      break;
 80092aa:	e000      	b.n	80092ae <USBD_ClrFeature+0x3a>
      break;
 80092ac:	bf00      	nop
  }
}
 80092ae:	bf00      	nop
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
 80092be:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	781a      	ldrb	r2, [r3, #0]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	785a      	ldrb	r2, [r3, #1]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	3302      	adds	r3, #2
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	3303      	adds	r3, #3
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	4413      	add	r3, r2
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	3304      	adds	r3, #4
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	461a      	mov	r2, r3
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	3305      	adds	r3, #5
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	021b      	lsls	r3, r3, #8
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	4413      	add	r3, r2
 80092fe:	b29a      	uxth	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	3306      	adds	r3, #6
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	3307      	adds	r3, #7
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	021b      	lsls	r3, r3, #8
 8009314:	b29b      	uxth	r3, r3
 8009316:	4413      	add	r3, r2
 8009318:	b29a      	uxth	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	80da      	strh	r2, [r3, #6]

}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	bc80      	pop	{r7}
 8009326:	4770      	bx	lr

08009328 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009332:	2180      	movs	r1, #128	@ 0x80
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f000 fc53 	bl	8009be0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800933a:	2100      	movs	r1, #0
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fc4f 	bl	8009be0 <USBD_LL_StallEP>
}
 8009342:	bf00      	nop
 8009344:	3708      	adds	r7, #8
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b086      	sub	sp, #24
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d032      	beq.n	80093c6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 f834 	bl	80093ce <USBD_GetLen>
 8009366:	4603      	mov	r3, r0
 8009368:	3301      	adds	r3, #1
 800936a:	b29b      	uxth	r3, r3
 800936c:	005b      	lsls	r3, r3, #1
 800936e:	b29a      	uxth	r2, r3
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009374:	7dfb      	ldrb	r3, [r7, #23]
 8009376:	1c5a      	adds	r2, r3, #1
 8009378:	75fa      	strb	r2, [r7, #23]
 800937a:	461a      	mov	r2, r3
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	4413      	add	r3, r2
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	7812      	ldrb	r2, [r2, #0]
 8009384:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009386:	7dfb      	ldrb	r3, [r7, #23]
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	75fa      	strb	r2, [r7, #23]
 800938c:	461a      	mov	r2, r3
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	4413      	add	r3, r2
 8009392:	2203      	movs	r2, #3
 8009394:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009396:	e012      	b.n	80093be <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	1c5a      	adds	r2, r3, #1
 800939c:	60fa      	str	r2, [r7, #12]
 800939e:	7dfa      	ldrb	r2, [r7, #23]
 80093a0:	1c51      	adds	r1, r2, #1
 80093a2:	75f9      	strb	r1, [r7, #23]
 80093a4:	4611      	mov	r1, r2
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	440a      	add	r2, r1
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	75fa      	strb	r2, [r7, #23]
 80093b4:	461a      	mov	r2, r3
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	4413      	add	r3, r2
 80093ba:	2200      	movs	r2, #0
 80093bc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d1e8      	bne.n	8009398 <USBD_GetString+0x4e>
    }
  }
}
 80093c6:	bf00      	nop
 80093c8:	3718      	adds	r7, #24
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b085      	sub	sp, #20
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093d6:	2300      	movs	r3, #0
 80093d8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80093da:	e005      	b.n	80093e8 <USBD_GetLen+0x1a>
  {
    len++;
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
 80093de:	3301      	adds	r3, #1
 80093e0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	3301      	adds	r3, #1
 80093e6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1f5      	bne.n	80093dc <USBD_GetLen+0xe>
  }

  return len;
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bc80      	pop	{r7}
 80093fa:	4770      	bx	lr

080093fc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	4613      	mov	r3, r2
 8009408:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2202      	movs	r2, #2
 800940e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009412:	88fa      	ldrh	r2, [r7, #6]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009418:	88fa      	ldrh	r2, [r7, #6]
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	2100      	movs	r1, #0
 8009424:	68f8      	ldr	r0, [r7, #12]
 8009426:	f000 fc63 	bl	8009cf0 <USBD_LL_Transmit>

  return USBD_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3710      	adds	r7, #16
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	60f8      	str	r0, [r7, #12]
 800943c:	60b9      	str	r1, [r7, #8]
 800943e:	4613      	mov	r3, r2
 8009440:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009442:	88fb      	ldrh	r3, [r7, #6]
 8009444:	68ba      	ldr	r2, [r7, #8]
 8009446:	2100      	movs	r1, #0
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 fc51 	bl	8009cf0 <USBD_LL_Transmit>

  return USBD_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	4613      	mov	r3, r2
 8009464:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2203      	movs	r2, #3
 800946a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800946e:	88fa      	ldrh	r2, [r7, #6]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009476:	88fa      	ldrh	r2, [r7, #6]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800947e:	88fb      	ldrh	r3, [r7, #6]
 8009480:	68ba      	ldr	r2, [r7, #8]
 8009482:	2100      	movs	r1, #0
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 fc56 	bl	8009d36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	4613      	mov	r3, r2
 80094a0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094a2:	88fb      	ldrh	r3, [r7, #6]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	2100      	movs	r1, #0
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f000 fc44 	bl	8009d36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094ae:	2300      	movs	r3, #0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2204      	movs	r2, #4
 80094c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094c8:	2300      	movs	r3, #0
 80094ca:	2200      	movs	r2, #0
 80094cc:	2100      	movs	r1, #0
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fc0e 	bl	8009cf0 <USBD_LL_Transmit>

  return USBD_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3708      	adds	r7, #8
 80094da:	46bd      	mov	sp, r7
 80094dc:	bd80      	pop	{r7, pc}

080094de <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094de:	b580      	push	{r7, lr}
 80094e0:	b082      	sub	sp, #8
 80094e2:	af00      	add	r7, sp, #0
 80094e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2205      	movs	r2, #5
 80094ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094ee:	2300      	movs	r3, #0
 80094f0:	2200      	movs	r2, #0
 80094f2:	2100      	movs	r1, #0
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fc1e 	bl	8009d36 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009508:	2200      	movs	r2, #0
 800950a:	4912      	ldr	r1, [pc, #72]	@ (8009554 <MX_USB_DEVICE_Init+0x50>)
 800950c:	4812      	ldr	r0, [pc, #72]	@ (8009558 <MX_USB_DEVICE_Init+0x54>)
 800950e:	f7fe ff62 	bl	80083d6 <USBD_Init>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009518:	f7f7 ff14 	bl	8001344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800951c:	490f      	ldr	r1, [pc, #60]	@ (800955c <MX_USB_DEVICE_Init+0x58>)
 800951e:	480e      	ldr	r0, [pc, #56]	@ (8009558 <MX_USB_DEVICE_Init+0x54>)
 8009520:	f7fe ff84 	bl	800842c <USBD_RegisterClass>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800952a:	f7f7 ff0b 	bl	8001344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800952e:	490c      	ldr	r1, [pc, #48]	@ (8009560 <MX_USB_DEVICE_Init+0x5c>)
 8009530:	4809      	ldr	r0, [pc, #36]	@ (8009558 <MX_USB_DEVICE_Init+0x54>)
 8009532:	f7fe feb5 	bl	80082a0 <USBD_CDC_RegisterInterface>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d001      	beq.n	8009540 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800953c:	f7f7 ff02 	bl	8001344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009540:	4805      	ldr	r0, [pc, #20]	@ (8009558 <MX_USB_DEVICE_Init+0x54>)
 8009542:	f7fe ff8c 	bl	800845e <USBD_Start>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d001      	beq.n	8009550 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800954c:	f7f7 fefa 	bl	8001344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009550:	bf00      	nop
 8009552:	bd80      	pop	{r7, pc}
 8009554:	2000012c 	.word	0x2000012c
 8009558:	20000248 	.word	0x20000248
 800955c:	20000018 	.word	0x20000018
 8009560:	2000011c 	.word	0x2000011c

08009564 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009568:	2200      	movs	r2, #0
 800956a:	4905      	ldr	r1, [pc, #20]	@ (8009580 <CDC_Init_FS+0x1c>)
 800956c:	4805      	ldr	r0, [pc, #20]	@ (8009584 <CDC_Init_FS+0x20>)
 800956e:	f7fe fead 	bl	80082cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009572:	4905      	ldr	r1, [pc, #20]	@ (8009588 <CDC_Init_FS+0x24>)
 8009574:	4803      	ldr	r0, [pc, #12]	@ (8009584 <CDC_Init_FS+0x20>)
 8009576:	f7fe fec2 	bl	80082fe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800957a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800957c:	4618      	mov	r0, r3
 800957e:	bd80      	pop	{r7, pc}
 8009580:	2000090c 	.word	0x2000090c
 8009584:	20000248 	.word	0x20000248
 8009588:	2000050c 	.word	0x2000050c

0800958c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009590:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009592:	4618      	mov	r0, r3
 8009594:	46bd      	mov	sp, r7
 8009596:	bc80      	pop	{r7}
 8009598:	4770      	bx	lr
	...

0800959c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4603      	mov	r3, r0
 80095a4:	6039      	str	r1, [r7, #0]
 80095a6:	71fb      	strb	r3, [r7, #7]
 80095a8:	4613      	mov	r3, r2
 80095aa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	2b23      	cmp	r3, #35	@ 0x23
 80095b0:	d84a      	bhi.n	8009648 <CDC_Control_FS+0xac>
 80095b2:	a201      	add	r2, pc, #4	@ (adr r2, 80095b8 <CDC_Control_FS+0x1c>)
 80095b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b8:	08009649 	.word	0x08009649
 80095bc:	08009649 	.word	0x08009649
 80095c0:	08009649 	.word	0x08009649
 80095c4:	08009649 	.word	0x08009649
 80095c8:	08009649 	.word	0x08009649
 80095cc:	08009649 	.word	0x08009649
 80095d0:	08009649 	.word	0x08009649
 80095d4:	08009649 	.word	0x08009649
 80095d8:	08009649 	.word	0x08009649
 80095dc:	08009649 	.word	0x08009649
 80095e0:	08009649 	.word	0x08009649
 80095e4:	08009649 	.word	0x08009649
 80095e8:	08009649 	.word	0x08009649
 80095ec:	08009649 	.word	0x08009649
 80095f0:	08009649 	.word	0x08009649
 80095f4:	08009649 	.word	0x08009649
 80095f8:	08009649 	.word	0x08009649
 80095fc:	08009649 	.word	0x08009649
 8009600:	08009649 	.word	0x08009649
 8009604:	08009649 	.word	0x08009649
 8009608:	08009649 	.word	0x08009649
 800960c:	08009649 	.word	0x08009649
 8009610:	08009649 	.word	0x08009649
 8009614:	08009649 	.word	0x08009649
 8009618:	08009649 	.word	0x08009649
 800961c:	08009649 	.word	0x08009649
 8009620:	08009649 	.word	0x08009649
 8009624:	08009649 	.word	0x08009649
 8009628:	08009649 	.word	0x08009649
 800962c:	08009649 	.word	0x08009649
 8009630:	08009649 	.word	0x08009649
 8009634:	08009649 	.word	0x08009649
 8009638:	08009649 	.word	0x08009649
 800963c:	08009649 	.word	0x08009649
 8009640:	08009649 	.word	0x08009649
 8009644:	08009649 	.word	0x08009649
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009648:	bf00      	nop
  }

  return (USBD_OK);
 800964a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800964c:	4618      	mov	r0, r3
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	bc80      	pop	{r7}
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop

08009658 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009662:	6879      	ldr	r1, [r7, #4]
 8009664:	4805      	ldr	r0, [pc, #20]	@ (800967c <CDC_Receive_FS+0x24>)
 8009666:	f7fe fe4a 	bl	80082fe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800966a:	4804      	ldr	r0, [pc, #16]	@ (800967c <CDC_Receive_FS+0x24>)
 800966c:	f7fe fe89 	bl	8008382 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009670:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20000248 	.word	0x20000248

08009680 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	460b      	mov	r3, r1
 800968a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009690:	4b0d      	ldr	r3, [pc, #52]	@ (80096c8 <CDC_Transmit_FS+0x48>)
 8009692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009696:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096a2:	2301      	movs	r3, #1
 80096a4:	e00b      	b.n	80096be <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096a6:	887b      	ldrh	r3, [r7, #2]
 80096a8:	461a      	mov	r2, r3
 80096aa:	6879      	ldr	r1, [r7, #4]
 80096ac:	4806      	ldr	r0, [pc, #24]	@ (80096c8 <CDC_Transmit_FS+0x48>)
 80096ae:	f7fe fe0d 	bl	80082cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096b2:	4805      	ldr	r0, [pc, #20]	@ (80096c8 <CDC_Transmit_FS+0x48>)
 80096b4:	f7fe fe36 	bl	8008324 <USBD_CDC_TransmitPacket>
 80096b8:	4603      	mov	r3, r0
 80096ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20000248 	.word	0x20000248

080096cc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4603      	mov	r3, r0
 80096d4:	6039      	str	r1, [r7, #0]
 80096d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	2212      	movs	r2, #18
 80096dc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80096de:	4b03      	ldr	r3, [pc, #12]	@ (80096ec <USBD_FS_DeviceDescriptor+0x20>)
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bc80      	pop	{r7}
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	20000148 	.word	0x20000148

080096f0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b083      	sub	sp, #12
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	4603      	mov	r3, r0
 80096f8:	6039      	str	r1, [r7, #0]
 80096fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2204      	movs	r2, #4
 8009700:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009702:	4b03      	ldr	r3, [pc, #12]	@ (8009710 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009704:	4618      	mov	r0, r3
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	bc80      	pop	{r7}
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	2000015c 	.word	0x2000015c

08009714 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	4603      	mov	r3, r0
 800971c:	6039      	str	r1, [r7, #0]
 800971e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009720:	79fb      	ldrb	r3, [r7, #7]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d105      	bne.n	8009732 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	4907      	ldr	r1, [pc, #28]	@ (8009748 <USBD_FS_ProductStrDescriptor+0x34>)
 800972a:	4808      	ldr	r0, [pc, #32]	@ (800974c <USBD_FS_ProductStrDescriptor+0x38>)
 800972c:	f7ff fe0d 	bl	800934a <USBD_GetString>
 8009730:	e004      	b.n	800973c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	4904      	ldr	r1, [pc, #16]	@ (8009748 <USBD_FS_ProductStrDescriptor+0x34>)
 8009736:	4805      	ldr	r0, [pc, #20]	@ (800974c <USBD_FS_ProductStrDescriptor+0x38>)
 8009738:	f7ff fe07 	bl	800934a <USBD_GetString>
  }
  return USBD_StrDesc;
 800973c:	4b02      	ldr	r3, [pc, #8]	@ (8009748 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20000d0c 	.word	0x20000d0c
 800974c:	0800a7f4 	.word	0x0800a7f4

08009750 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	4603      	mov	r3, r0
 8009758:	6039      	str	r1, [r7, #0]
 800975a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800975c:	683a      	ldr	r2, [r7, #0]
 800975e:	4904      	ldr	r1, [pc, #16]	@ (8009770 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009760:	4804      	ldr	r0, [pc, #16]	@ (8009774 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009762:	f7ff fdf2 	bl	800934a <USBD_GetString>
  return USBD_StrDesc;
 8009766:	4b02      	ldr	r3, [pc, #8]	@ (8009770 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009768:	4618      	mov	r0, r3
 800976a:	3708      	adds	r7, #8
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	20000d0c 	.word	0x20000d0c
 8009774:	0800a80c 	.word	0x0800a80c

08009778 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	6039      	str	r1, [r7, #0]
 8009782:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	221a      	movs	r2, #26
 8009788:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800978a:	f000 f843 	bl	8009814 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800978e:	4b02      	ldr	r3, [pc, #8]	@ (8009798 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20000160 	.word	0x20000160

0800979c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	6039      	str	r1, [r7, #0]
 80097a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097a8:	79fb      	ldrb	r3, [r7, #7]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d105      	bne.n	80097ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097ae:	683a      	ldr	r2, [r7, #0]
 80097b0:	4907      	ldr	r1, [pc, #28]	@ (80097d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097b2:	4808      	ldr	r0, [pc, #32]	@ (80097d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097b4:	f7ff fdc9 	bl	800934a <USBD_GetString>
 80097b8:	e004      	b.n	80097c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097ba:	683a      	ldr	r2, [r7, #0]
 80097bc:	4904      	ldr	r1, [pc, #16]	@ (80097d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097be:	4805      	ldr	r0, [pc, #20]	@ (80097d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097c0:	f7ff fdc3 	bl	800934a <USBD_GetString>
  }
  return USBD_StrDesc;
 80097c4:	4b02      	ldr	r3, [pc, #8]	@ (80097d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3708      	adds	r7, #8
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	20000d0c 	.word	0x20000d0c
 80097d4:	0800a820 	.word	0x0800a820

080097d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	4603      	mov	r3, r0
 80097e0:	6039      	str	r1, [r7, #0]
 80097e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097e4:	79fb      	ldrb	r3, [r7, #7]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d105      	bne.n	80097f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097ea:	683a      	ldr	r2, [r7, #0]
 80097ec:	4907      	ldr	r1, [pc, #28]	@ (800980c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097ee:	4808      	ldr	r0, [pc, #32]	@ (8009810 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097f0:	f7ff fdab 	bl	800934a <USBD_GetString>
 80097f4:	e004      	b.n	8009800 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	4904      	ldr	r1, [pc, #16]	@ (800980c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80097fa:	4805      	ldr	r0, [pc, #20]	@ (8009810 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80097fc:	f7ff fda5 	bl	800934a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009800:	4b02      	ldr	r3, [pc, #8]	@ (800980c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	20000d0c 	.word	0x20000d0c
 8009810:	0800a82c 	.word	0x0800a82c

08009814 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800981a:	4b0f      	ldr	r3, [pc, #60]	@ (8009858 <Get_SerialNum+0x44>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009820:	4b0e      	ldr	r3, [pc, #56]	@ (800985c <Get_SerialNum+0x48>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009826:	4b0e      	ldr	r3, [pc, #56]	@ (8009860 <Get_SerialNum+0x4c>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4413      	add	r3, r2
 8009832:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d009      	beq.n	800984e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800983a:	2208      	movs	r2, #8
 800983c:	4909      	ldr	r1, [pc, #36]	@ (8009864 <Get_SerialNum+0x50>)
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f814 	bl	800986c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009844:	2204      	movs	r2, #4
 8009846:	4908      	ldr	r1, [pc, #32]	@ (8009868 <Get_SerialNum+0x54>)
 8009848:	68b8      	ldr	r0, [r7, #8]
 800984a:	f000 f80f 	bl	800986c <IntToUnicode>
  }
}
 800984e:	bf00      	nop
 8009850:	3710      	adds	r7, #16
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	1ffff7e8 	.word	0x1ffff7e8
 800985c:	1ffff7ec 	.word	0x1ffff7ec
 8009860:	1ffff7f0 	.word	0x1ffff7f0
 8009864:	20000162 	.word	0x20000162
 8009868:	20000172 	.word	0x20000172

0800986c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800986c:	b480      	push	{r7}
 800986e:	b087      	sub	sp, #28
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	4613      	mov	r3, r2
 8009878:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800987a:	2300      	movs	r3, #0
 800987c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800987e:	2300      	movs	r3, #0
 8009880:	75fb      	strb	r3, [r7, #23]
 8009882:	e027      	b.n	80098d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	0f1b      	lsrs	r3, r3, #28
 8009888:	2b09      	cmp	r3, #9
 800988a:	d80b      	bhi.n	80098a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	0f1b      	lsrs	r3, r3, #28
 8009890:	b2da      	uxtb	r2, r3
 8009892:	7dfb      	ldrb	r3, [r7, #23]
 8009894:	005b      	lsls	r3, r3, #1
 8009896:	4619      	mov	r1, r3
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	440b      	add	r3, r1
 800989c:	3230      	adds	r2, #48	@ 0x30
 800989e:	b2d2      	uxtb	r2, r2
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	e00a      	b.n	80098ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	0f1b      	lsrs	r3, r3, #28
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	4619      	mov	r1, r3
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	440b      	add	r3, r1
 80098b4:	3237      	adds	r2, #55	@ 0x37
 80098b6:	b2d2      	uxtb	r2, r2
 80098b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80098c0:	7dfb      	ldrb	r3, [r7, #23]
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	3301      	adds	r3, #1
 80098c6:	68ba      	ldr	r2, [r7, #8]
 80098c8:	4413      	add	r3, r2
 80098ca:	2200      	movs	r2, #0
 80098cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80098ce:	7dfb      	ldrb	r3, [r7, #23]
 80098d0:	3301      	adds	r3, #1
 80098d2:	75fb      	strb	r3, [r7, #23]
 80098d4:	7dfa      	ldrb	r2, [r7, #23]
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d3d3      	bcc.n	8009884 <IntToUnicode+0x18>
  }
}
 80098dc:	bf00      	nop
 80098de:	bf00      	nop
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bc80      	pop	{r7}
 80098e6:	4770      	bx	lr

080098e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a0d      	ldr	r2, [pc, #52]	@ (800992c <HAL_PCD_MspInit+0x44>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d113      	bne.n	8009922 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80098fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009930 <HAL_PCD_MspInit+0x48>)
 80098fc:	69db      	ldr	r3, [r3, #28]
 80098fe:	4a0c      	ldr	r2, [pc, #48]	@ (8009930 <HAL_PCD_MspInit+0x48>)
 8009900:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009904:	61d3      	str	r3, [r2, #28]
 8009906:	4b0a      	ldr	r3, [pc, #40]	@ (8009930 <HAL_PCD_MspInit+0x48>)
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800990e:	60fb      	str	r3, [r7, #12]
 8009910:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009912:	2200      	movs	r2, #0
 8009914:	2100      	movs	r1, #0
 8009916:	2014      	movs	r0, #20
 8009918:	f7f7 ff7f 	bl	800181a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800991c:	2014      	movs	r0, #20
 800991e:	f7f7 ff98 	bl	8001852 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009922:	bf00      	nop
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	40005c00 	.word	0x40005c00
 8009930:	40021000 	.word	0x40021000

08009934 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009948:	4619      	mov	r1, r3
 800994a:	4610      	mov	r0, r2
 800994c:	f7fe fdcf 	bl	80084ee <USBD_LL_SetupStage>
}
 8009950:	bf00      	nop
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	460b      	mov	r3, r1
 8009962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800996a:	78fa      	ldrb	r2, [r7, #3]
 800996c:	6879      	ldr	r1, [r7, #4]
 800996e:	4613      	mov	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	00db      	lsls	r3, r3, #3
 8009976:	440b      	add	r3, r1
 8009978:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	78fb      	ldrb	r3, [r7, #3]
 8009980:	4619      	mov	r1, r3
 8009982:	f7fe fe01 	bl	8008588 <USBD_LL_DataOutStage>
}
 8009986:	bf00      	nop
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b082      	sub	sp, #8
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80099a0:	78fa      	ldrb	r2, [r7, #3]
 80099a2:	6879      	ldr	r1, [r7, #4]
 80099a4:	4613      	mov	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	4413      	add	r3, r2
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	440b      	add	r3, r1
 80099ae:	3324      	adds	r3, #36	@ 0x24
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	78fb      	ldrb	r3, [r7, #3]
 80099b4:	4619      	mov	r1, r3
 80099b6:	f7fe fe58 	bl	800866a <USBD_LL_DataInStage>
}
 80099ba:	bf00      	nop
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7fe ff68 	bl	80088a6 <USBD_LL_SOF>
}
 80099d6:	bf00      	nop
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}

080099de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80099e6:	2301      	movs	r3, #1
 80099e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	799b      	ldrb	r3, [r3, #6]
 80099ee:	2b02      	cmp	r3, #2
 80099f0:	d001      	beq.n	80099f6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80099f2:	f7f7 fca7 	bl	8001344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099fc:	7bfa      	ldrb	r2, [r7, #15]
 80099fe:	4611      	mov	r1, r2
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fe ff18 	bl	8008836 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe fed1 	bl	80087b4 <USBD_LL_Reset>
}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe ff12 	bl	8008854 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	7a9b      	ldrb	r3, [r3, #10]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d005      	beq.n	8009a44 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a38:	4b04      	ldr	r3, [pc, #16]	@ (8009a4c <HAL_PCD_SuspendCallback+0x30>)
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	4a03      	ldr	r2, [pc, #12]	@ (8009a4c <HAL_PCD_SuspendCallback+0x30>)
 8009a3e:	f043 0306 	orr.w	r3, r3, #6
 8009a42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	e000ed00 	.word	0xe000ed00

08009a50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fe ff0c 	bl	800887c <USBD_LL_Resume>
}
 8009a64:	bf00      	nop
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009a74:	4a28      	ldr	r2, [pc, #160]	@ (8009b18 <USBD_LL_Init+0xac>)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a26      	ldr	r2, [pc, #152]	@ (8009b18 <USBD_LL_Init+0xac>)
 8009a80:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009a84:	4b24      	ldr	r3, [pc, #144]	@ (8009b18 <USBD_LL_Init+0xac>)
 8009a86:	4a25      	ldr	r2, [pc, #148]	@ (8009b1c <USBD_LL_Init+0xb0>)
 8009a88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009a8a:	4b23      	ldr	r3, [pc, #140]	@ (8009b18 <USBD_LL_Init+0xac>)
 8009a8c:	2208      	movs	r2, #8
 8009a8e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009a90:	4b21      	ldr	r3, [pc, #132]	@ (8009b18 <USBD_LL_Init+0xac>)
 8009a92:	2202      	movs	r2, #2
 8009a94:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009a96:	4b20      	ldr	r3, [pc, #128]	@ (8009b18 <USBD_LL_Init+0xac>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8009b18 <USBD_LL_Init+0xac>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8009b18 <USBD_LL_Init+0xac>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009aa8:	481b      	ldr	r0, [pc, #108]	@ (8009b18 <USBD_LL_Init+0xac>)
 8009aaa:	f7f9 fc18 	bl	80032de <HAL_PCD_Init>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d001      	beq.n	8009ab8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009ab4:	f7f7 fc46 	bl	8001344 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009abe:	2318      	movs	r3, #24
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	f7fb f929 	bl	8004d1a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ace:	2358      	movs	r3, #88	@ 0x58
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2180      	movs	r1, #128	@ 0x80
 8009ad4:	f7fb f921 	bl	8004d1a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ade:	23c0      	movs	r3, #192	@ 0xc0
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2181      	movs	r1, #129	@ 0x81
 8009ae4:	f7fb f919 	bl	8004d1a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009aee:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009af2:	2200      	movs	r2, #0
 8009af4:	2101      	movs	r1, #1
 8009af6:	f7fb f910 	bl	8004d1a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009b04:	2200      	movs	r2, #0
 8009b06:	2182      	movs	r1, #130	@ 0x82
 8009b08:	f7fb f907 	bl	8004d1a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	20000f0c 	.word	0x20000f0c
 8009b1c:	40005c00 	.word	0x40005c00

08009b20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7f9 fcc7 	bl	80034ca <HAL_PCD_Start>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f000 f94e 	bl	8009de4 <USBD_Get_USB_Status>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3710      	adds	r7, #16
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	4608      	mov	r0, r1
 8009b60:	4611      	mov	r1, r2
 8009b62:	461a      	mov	r2, r3
 8009b64:	4603      	mov	r3, r0
 8009b66:	70fb      	strb	r3, [r7, #3]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70bb      	strb	r3, [r7, #2]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b7e:	78bb      	ldrb	r3, [r7, #2]
 8009b80:	883a      	ldrh	r2, [r7, #0]
 8009b82:	78f9      	ldrb	r1, [r7, #3]
 8009b84:	f7f9 fe1b 	bl	80037be <HAL_PCD_EP_Open>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f000 f928 	bl	8009de4 <USBD_Get_USB_Status>
 8009b94:	4603      	mov	r3, r0
 8009b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b084      	sub	sp, #16
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	460b      	mov	r3, r1
 8009bac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bbc:	78fa      	ldrb	r2, [r7, #3]
 8009bbe:	4611      	mov	r1, r2
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7f9 fe59 	bl	8003878 <HAL_PCD_EP_Close>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bca:	7bfb      	ldrb	r3, [r7, #15]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 f909 	bl	8009de4 <USBD_Get_USB_Status>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bec:	2300      	movs	r3, #0
 8009bee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bfa:	78fa      	ldrb	r2, [r7, #3]
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7f9 ff01 	bl	8003a06 <HAL_PCD_EP_SetStall>
 8009c04:	4603      	mov	r3, r0
 8009c06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f000 f8ea 	bl	8009de4 <USBD_Get_USB_Status>
 8009c10:	4603      	mov	r3, r0
 8009c12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	460b      	mov	r3, r1
 8009c28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c38:	78fa      	ldrb	r2, [r7, #3]
 8009c3a:	4611      	mov	r1, r2
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7f9 ff42 	bl	8003ac6 <HAL_PCD_EP_ClrStall>
 8009c42:	4603      	mov	r3, r0
 8009c44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c46:	7bfb      	ldrb	r3, [r7, #15]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 f8cb 	bl	8009de4 <USBD_Get_USB_Status>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3710      	adds	r7, #16
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	460b      	mov	r3, r1
 8009c66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	da0b      	bge.n	8009c90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c7e:	68f9      	ldr	r1, [r7, #12]
 8009c80:	4613      	mov	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	440b      	add	r3, r1
 8009c8a:	3312      	adds	r3, #18
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	e00b      	b.n	8009ca8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c90:	78fb      	ldrb	r3, [r7, #3]
 8009c92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	009b      	lsls	r3, r3, #2
 8009c9c:	4413      	add	r3, r2
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	440b      	add	r3, r1
 8009ca2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009ca6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bc80      	pop	{r7}
 8009cb0:	4770      	bx	lr

08009cb2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ccc:	78fa      	ldrb	r2, [r7, #3]
 8009cce:	4611      	mov	r1, r2
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	f7f9 fd50 	bl	8003776 <HAL_PCD_SetAddress>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f000 f881 	bl	8009de4 <USBD_Get_USB_Status>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	607a      	str	r2, [r7, #4]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	72fb      	strb	r3, [r7, #11]
 8009d00:	4613      	mov	r3, r2
 8009d02:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d12:	893b      	ldrh	r3, [r7, #8]
 8009d14:	7af9      	ldrb	r1, [r7, #11]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	f7f9 fe3e 	bl	8003998 <HAL_PCD_EP_Transmit>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d20:	7dfb      	ldrb	r3, [r7, #23]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 f85e 	bl	8009de4 <USBD_Get_USB_Status>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d2c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3718      	adds	r7, #24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b086      	sub	sp, #24
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	60f8      	str	r0, [r7, #12]
 8009d3e:	607a      	str	r2, [r7, #4]
 8009d40:	461a      	mov	r2, r3
 8009d42:	460b      	mov	r3, r1
 8009d44:	72fb      	strb	r3, [r7, #11]
 8009d46:	4613      	mov	r3, r2
 8009d48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d58:	893b      	ldrh	r3, [r7, #8]
 8009d5a:	7af9      	ldrb	r1, [r7, #11]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	f7f9 fdd3 	bl	8003908 <HAL_PCD_EP_Receive>
 8009d62:	4603      	mov	r3, r0
 8009d64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f000 f83b 	bl	8009de4 <USBD_Get_USB_Status>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d72:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3718      	adds	r7, #24
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	460b      	mov	r3, r1
 8009d86:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d8e:	78fa      	ldrb	r2, [r7, #3]
 8009d90:	4611      	mov	r1, r2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7f9 fde9 	bl	800396a <HAL_PCD_EP_GetRxCount>
 8009d98:	4603      	mov	r3, r0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}
	...

08009da4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009dac:	4b02      	ldr	r3, [pc, #8]	@ (8009db8 <USBD_static_malloc+0x14>)
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bc80      	pop	{r7}
 8009db6:	4770      	bx	lr
 8009db8:	200011e4 	.word	0x200011e4

08009dbc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]

}
 8009dc4:	bf00      	nop
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bc80      	pop	{r7}
 8009dcc:	4770      	bx	lr

08009dce <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dce:	b480      	push	{r7}
 8009dd0:	b083      	sub	sp, #12
 8009dd2:	af00      	add	r7, sp, #0
 8009dd4:	6078      	str	r0, [r7, #4]
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009dda:	bf00      	nop
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bc80      	pop	{r7}
 8009de2:	4770      	bx	lr

08009de4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dee:	2300      	movs	r3, #0
 8009df0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009df2:	79fb      	ldrb	r3, [r7, #7]
 8009df4:	2b03      	cmp	r3, #3
 8009df6:	d817      	bhi.n	8009e28 <USBD_Get_USB_Status+0x44>
 8009df8:	a201      	add	r2, pc, #4	@ (adr r2, 8009e00 <USBD_Get_USB_Status+0x1c>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009e11 	.word	0x08009e11
 8009e04:	08009e17 	.word	0x08009e17
 8009e08:	08009e1d 	.word	0x08009e1d
 8009e0c:	08009e23 	.word	0x08009e23
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	73fb      	strb	r3, [r7, #15]
    break;
 8009e14:	e00b      	b.n	8009e2e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e16:	2302      	movs	r3, #2
 8009e18:	73fb      	strb	r3, [r7, #15]
    break;
 8009e1a:	e008      	b.n	8009e2e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e20:	e005      	b.n	8009e2e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e22:	2302      	movs	r3, #2
 8009e24:	73fb      	strb	r3, [r7, #15]
    break;
 8009e26:	e002      	b.n	8009e2e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e28:	2302      	movs	r3, #2
 8009e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e2c:	bf00      	nop
  }
  return usb_status;
 8009e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3714      	adds	r7, #20
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bc80      	pop	{r7}
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop

08009e3c <siprintf>:
 8009e3c:	b40e      	push	{r1, r2, r3}
 8009e3e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e42:	b500      	push	{lr}
 8009e44:	b09c      	sub	sp, #112	@ 0x70
 8009e46:	ab1d      	add	r3, sp, #116	@ 0x74
 8009e48:	9002      	str	r0, [sp, #8]
 8009e4a:	9006      	str	r0, [sp, #24]
 8009e4c:	9107      	str	r1, [sp, #28]
 8009e4e:	9104      	str	r1, [sp, #16]
 8009e50:	4808      	ldr	r0, [pc, #32]	@ (8009e74 <siprintf+0x38>)
 8009e52:	4909      	ldr	r1, [pc, #36]	@ (8009e78 <siprintf+0x3c>)
 8009e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e58:	9105      	str	r1, [sp, #20]
 8009e5a:	6800      	ldr	r0, [r0, #0]
 8009e5c:	a902      	add	r1, sp, #8
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	f000 f992 	bl	800a188 <_svfiprintf_r>
 8009e64:	2200      	movs	r2, #0
 8009e66:	9b02      	ldr	r3, [sp, #8]
 8009e68:	701a      	strb	r2, [r3, #0]
 8009e6a:	b01c      	add	sp, #112	@ 0x70
 8009e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e70:	b003      	add	sp, #12
 8009e72:	4770      	bx	lr
 8009e74:	2000017c 	.word	0x2000017c
 8009e78:	ffff0208 	.word	0xffff0208

08009e7c <memset>:
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	4402      	add	r2, r0
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d100      	bne.n	8009e86 <memset+0xa>
 8009e84:	4770      	bx	lr
 8009e86:	f803 1b01 	strb.w	r1, [r3], #1
 8009e8a:	e7f9      	b.n	8009e80 <memset+0x4>

08009e8c <__errno>:
 8009e8c:	4b01      	ldr	r3, [pc, #4]	@ (8009e94 <__errno+0x8>)
 8009e8e:	6818      	ldr	r0, [r3, #0]
 8009e90:	4770      	bx	lr
 8009e92:	bf00      	nop
 8009e94:	2000017c 	.word	0x2000017c

08009e98 <__libc_init_array>:
 8009e98:	b570      	push	{r4, r5, r6, lr}
 8009e9a:	2600      	movs	r6, #0
 8009e9c:	4d0c      	ldr	r5, [pc, #48]	@ (8009ed0 <__libc_init_array+0x38>)
 8009e9e:	4c0d      	ldr	r4, [pc, #52]	@ (8009ed4 <__libc_init_array+0x3c>)
 8009ea0:	1b64      	subs	r4, r4, r5
 8009ea2:	10a4      	asrs	r4, r4, #2
 8009ea4:	42a6      	cmp	r6, r4
 8009ea6:	d109      	bne.n	8009ebc <__libc_init_array+0x24>
 8009ea8:	f000 fc78 	bl	800a79c <_init>
 8009eac:	2600      	movs	r6, #0
 8009eae:	4d0a      	ldr	r5, [pc, #40]	@ (8009ed8 <__libc_init_array+0x40>)
 8009eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8009edc <__libc_init_array+0x44>)
 8009eb2:	1b64      	subs	r4, r4, r5
 8009eb4:	10a4      	asrs	r4, r4, #2
 8009eb6:	42a6      	cmp	r6, r4
 8009eb8:	d105      	bne.n	8009ec6 <__libc_init_array+0x2e>
 8009eba:	bd70      	pop	{r4, r5, r6, pc}
 8009ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ec0:	4798      	blx	r3
 8009ec2:	3601      	adds	r6, #1
 8009ec4:	e7ee      	b.n	8009ea4 <__libc_init_array+0xc>
 8009ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009eca:	4798      	blx	r3
 8009ecc:	3601      	adds	r6, #1
 8009ece:	e7f2      	b.n	8009eb6 <__libc_init_array+0x1e>
 8009ed0:	0800a89c 	.word	0x0800a89c
 8009ed4:	0800a89c 	.word	0x0800a89c
 8009ed8:	0800a89c 	.word	0x0800a89c
 8009edc:	0800a8a0 	.word	0x0800a8a0

08009ee0 <__retarget_lock_acquire_recursive>:
 8009ee0:	4770      	bx	lr

08009ee2 <__retarget_lock_release_recursive>:
 8009ee2:	4770      	bx	lr

08009ee4 <_free_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	2900      	cmp	r1, #0
 8009eea:	d040      	beq.n	8009f6e <_free_r+0x8a>
 8009eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ef0:	1f0c      	subs	r4, r1, #4
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	bfb8      	it	lt
 8009ef6:	18e4      	addlt	r4, r4, r3
 8009ef8:	f000 f8de 	bl	800a0b8 <__malloc_lock>
 8009efc:	4a1c      	ldr	r2, [pc, #112]	@ (8009f70 <_free_r+0x8c>)
 8009efe:	6813      	ldr	r3, [r2, #0]
 8009f00:	b933      	cbnz	r3, 8009f10 <_free_r+0x2c>
 8009f02:	6063      	str	r3, [r4, #4]
 8009f04:	6014      	str	r4, [r2, #0]
 8009f06:	4628      	mov	r0, r5
 8009f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f0c:	f000 b8da 	b.w	800a0c4 <__malloc_unlock>
 8009f10:	42a3      	cmp	r3, r4
 8009f12:	d908      	bls.n	8009f26 <_free_r+0x42>
 8009f14:	6820      	ldr	r0, [r4, #0]
 8009f16:	1821      	adds	r1, r4, r0
 8009f18:	428b      	cmp	r3, r1
 8009f1a:	bf01      	itttt	eq
 8009f1c:	6819      	ldreq	r1, [r3, #0]
 8009f1e:	685b      	ldreq	r3, [r3, #4]
 8009f20:	1809      	addeq	r1, r1, r0
 8009f22:	6021      	streq	r1, [r4, #0]
 8009f24:	e7ed      	b.n	8009f02 <_free_r+0x1e>
 8009f26:	461a      	mov	r2, r3
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	b10b      	cbz	r3, 8009f30 <_free_r+0x4c>
 8009f2c:	42a3      	cmp	r3, r4
 8009f2e:	d9fa      	bls.n	8009f26 <_free_r+0x42>
 8009f30:	6811      	ldr	r1, [r2, #0]
 8009f32:	1850      	adds	r0, r2, r1
 8009f34:	42a0      	cmp	r0, r4
 8009f36:	d10b      	bne.n	8009f50 <_free_r+0x6c>
 8009f38:	6820      	ldr	r0, [r4, #0]
 8009f3a:	4401      	add	r1, r0
 8009f3c:	1850      	adds	r0, r2, r1
 8009f3e:	4283      	cmp	r3, r0
 8009f40:	6011      	str	r1, [r2, #0]
 8009f42:	d1e0      	bne.n	8009f06 <_free_r+0x22>
 8009f44:	6818      	ldr	r0, [r3, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	4408      	add	r0, r1
 8009f4a:	6010      	str	r0, [r2, #0]
 8009f4c:	6053      	str	r3, [r2, #4]
 8009f4e:	e7da      	b.n	8009f06 <_free_r+0x22>
 8009f50:	d902      	bls.n	8009f58 <_free_r+0x74>
 8009f52:	230c      	movs	r3, #12
 8009f54:	602b      	str	r3, [r5, #0]
 8009f56:	e7d6      	b.n	8009f06 <_free_r+0x22>
 8009f58:	6820      	ldr	r0, [r4, #0]
 8009f5a:	1821      	adds	r1, r4, r0
 8009f5c:	428b      	cmp	r3, r1
 8009f5e:	bf01      	itttt	eq
 8009f60:	6819      	ldreq	r1, [r3, #0]
 8009f62:	685b      	ldreq	r3, [r3, #4]
 8009f64:	1809      	addeq	r1, r1, r0
 8009f66:	6021      	streq	r1, [r4, #0]
 8009f68:	6063      	str	r3, [r4, #4]
 8009f6a:	6054      	str	r4, [r2, #4]
 8009f6c:	e7cb      	b.n	8009f06 <_free_r+0x22>
 8009f6e:	bd38      	pop	{r3, r4, r5, pc}
 8009f70:	20001548 	.word	0x20001548

08009f74 <sbrk_aligned>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	4e0f      	ldr	r6, [pc, #60]	@ (8009fb4 <sbrk_aligned+0x40>)
 8009f78:	460c      	mov	r4, r1
 8009f7a:	6831      	ldr	r1, [r6, #0]
 8009f7c:	4605      	mov	r5, r0
 8009f7e:	b911      	cbnz	r1, 8009f86 <sbrk_aligned+0x12>
 8009f80:	f000 fbaa 	bl	800a6d8 <_sbrk_r>
 8009f84:	6030      	str	r0, [r6, #0]
 8009f86:	4621      	mov	r1, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f000 fba5 	bl	800a6d8 <_sbrk_r>
 8009f8e:	1c43      	adds	r3, r0, #1
 8009f90:	d103      	bne.n	8009f9a <sbrk_aligned+0x26>
 8009f92:	f04f 34ff 	mov.w	r4, #4294967295
 8009f96:	4620      	mov	r0, r4
 8009f98:	bd70      	pop	{r4, r5, r6, pc}
 8009f9a:	1cc4      	adds	r4, r0, #3
 8009f9c:	f024 0403 	bic.w	r4, r4, #3
 8009fa0:	42a0      	cmp	r0, r4
 8009fa2:	d0f8      	beq.n	8009f96 <sbrk_aligned+0x22>
 8009fa4:	1a21      	subs	r1, r4, r0
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	f000 fb96 	bl	800a6d8 <_sbrk_r>
 8009fac:	3001      	adds	r0, #1
 8009fae:	d1f2      	bne.n	8009f96 <sbrk_aligned+0x22>
 8009fb0:	e7ef      	b.n	8009f92 <sbrk_aligned+0x1e>
 8009fb2:	bf00      	nop
 8009fb4:	20001544 	.word	0x20001544

08009fb8 <_malloc_r>:
 8009fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fbc:	1ccd      	adds	r5, r1, #3
 8009fbe:	f025 0503 	bic.w	r5, r5, #3
 8009fc2:	3508      	adds	r5, #8
 8009fc4:	2d0c      	cmp	r5, #12
 8009fc6:	bf38      	it	cc
 8009fc8:	250c      	movcc	r5, #12
 8009fca:	2d00      	cmp	r5, #0
 8009fcc:	4606      	mov	r6, r0
 8009fce:	db01      	blt.n	8009fd4 <_malloc_r+0x1c>
 8009fd0:	42a9      	cmp	r1, r5
 8009fd2:	d904      	bls.n	8009fde <_malloc_r+0x26>
 8009fd4:	230c      	movs	r3, #12
 8009fd6:	6033      	str	r3, [r6, #0]
 8009fd8:	2000      	movs	r0, #0
 8009fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0b4 <_malloc_r+0xfc>
 8009fe2:	f000 f869 	bl	800a0b8 <__malloc_lock>
 8009fe6:	f8d8 3000 	ldr.w	r3, [r8]
 8009fea:	461c      	mov	r4, r3
 8009fec:	bb44      	cbnz	r4, 800a040 <_malloc_r+0x88>
 8009fee:	4629      	mov	r1, r5
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f7ff ffbf 	bl	8009f74 <sbrk_aligned>
 8009ff6:	1c43      	adds	r3, r0, #1
 8009ff8:	4604      	mov	r4, r0
 8009ffa:	d158      	bne.n	800a0ae <_malloc_r+0xf6>
 8009ffc:	f8d8 4000 	ldr.w	r4, [r8]
 800a000:	4627      	mov	r7, r4
 800a002:	2f00      	cmp	r7, #0
 800a004:	d143      	bne.n	800a08e <_malloc_r+0xd6>
 800a006:	2c00      	cmp	r4, #0
 800a008:	d04b      	beq.n	800a0a2 <_malloc_r+0xea>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	4639      	mov	r1, r7
 800a00e:	4630      	mov	r0, r6
 800a010:	eb04 0903 	add.w	r9, r4, r3
 800a014:	f000 fb60 	bl	800a6d8 <_sbrk_r>
 800a018:	4581      	cmp	r9, r0
 800a01a:	d142      	bne.n	800a0a2 <_malloc_r+0xea>
 800a01c:	6821      	ldr	r1, [r4, #0]
 800a01e:	4630      	mov	r0, r6
 800a020:	1a6d      	subs	r5, r5, r1
 800a022:	4629      	mov	r1, r5
 800a024:	f7ff ffa6 	bl	8009f74 <sbrk_aligned>
 800a028:	3001      	adds	r0, #1
 800a02a:	d03a      	beq.n	800a0a2 <_malloc_r+0xea>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	442b      	add	r3, r5
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	f8d8 3000 	ldr.w	r3, [r8]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	bb62      	cbnz	r2, 800a094 <_malloc_r+0xdc>
 800a03a:	f8c8 7000 	str.w	r7, [r8]
 800a03e:	e00f      	b.n	800a060 <_malloc_r+0xa8>
 800a040:	6822      	ldr	r2, [r4, #0]
 800a042:	1b52      	subs	r2, r2, r5
 800a044:	d420      	bmi.n	800a088 <_malloc_r+0xd0>
 800a046:	2a0b      	cmp	r2, #11
 800a048:	d917      	bls.n	800a07a <_malloc_r+0xc2>
 800a04a:	1961      	adds	r1, r4, r5
 800a04c:	42a3      	cmp	r3, r4
 800a04e:	6025      	str	r5, [r4, #0]
 800a050:	bf18      	it	ne
 800a052:	6059      	strne	r1, [r3, #4]
 800a054:	6863      	ldr	r3, [r4, #4]
 800a056:	bf08      	it	eq
 800a058:	f8c8 1000 	streq.w	r1, [r8]
 800a05c:	5162      	str	r2, [r4, r5]
 800a05e:	604b      	str	r3, [r1, #4]
 800a060:	4630      	mov	r0, r6
 800a062:	f000 f82f 	bl	800a0c4 <__malloc_unlock>
 800a066:	f104 000b 	add.w	r0, r4, #11
 800a06a:	1d23      	adds	r3, r4, #4
 800a06c:	f020 0007 	bic.w	r0, r0, #7
 800a070:	1ac2      	subs	r2, r0, r3
 800a072:	bf1c      	itt	ne
 800a074:	1a1b      	subne	r3, r3, r0
 800a076:	50a3      	strne	r3, [r4, r2]
 800a078:	e7af      	b.n	8009fda <_malloc_r+0x22>
 800a07a:	6862      	ldr	r2, [r4, #4]
 800a07c:	42a3      	cmp	r3, r4
 800a07e:	bf0c      	ite	eq
 800a080:	f8c8 2000 	streq.w	r2, [r8]
 800a084:	605a      	strne	r2, [r3, #4]
 800a086:	e7eb      	b.n	800a060 <_malloc_r+0xa8>
 800a088:	4623      	mov	r3, r4
 800a08a:	6864      	ldr	r4, [r4, #4]
 800a08c:	e7ae      	b.n	8009fec <_malloc_r+0x34>
 800a08e:	463c      	mov	r4, r7
 800a090:	687f      	ldr	r7, [r7, #4]
 800a092:	e7b6      	b.n	800a002 <_malloc_r+0x4a>
 800a094:	461a      	mov	r2, r3
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	42a3      	cmp	r3, r4
 800a09a:	d1fb      	bne.n	800a094 <_malloc_r+0xdc>
 800a09c:	2300      	movs	r3, #0
 800a09e:	6053      	str	r3, [r2, #4]
 800a0a0:	e7de      	b.n	800a060 <_malloc_r+0xa8>
 800a0a2:	230c      	movs	r3, #12
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	6033      	str	r3, [r6, #0]
 800a0a8:	f000 f80c 	bl	800a0c4 <__malloc_unlock>
 800a0ac:	e794      	b.n	8009fd8 <_malloc_r+0x20>
 800a0ae:	6005      	str	r5, [r0, #0]
 800a0b0:	e7d6      	b.n	800a060 <_malloc_r+0xa8>
 800a0b2:	bf00      	nop
 800a0b4:	20001548 	.word	0x20001548

0800a0b8 <__malloc_lock>:
 800a0b8:	4801      	ldr	r0, [pc, #4]	@ (800a0c0 <__malloc_lock+0x8>)
 800a0ba:	f7ff bf11 	b.w	8009ee0 <__retarget_lock_acquire_recursive>
 800a0be:	bf00      	nop
 800a0c0:	20001540 	.word	0x20001540

0800a0c4 <__malloc_unlock>:
 800a0c4:	4801      	ldr	r0, [pc, #4]	@ (800a0cc <__malloc_unlock+0x8>)
 800a0c6:	f7ff bf0c 	b.w	8009ee2 <__retarget_lock_release_recursive>
 800a0ca:	bf00      	nop
 800a0cc:	20001540 	.word	0x20001540

0800a0d0 <__ssputs_r>:
 800a0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d4:	461f      	mov	r7, r3
 800a0d6:	688e      	ldr	r6, [r1, #8]
 800a0d8:	4682      	mov	sl, r0
 800a0da:	42be      	cmp	r6, r7
 800a0dc:	460c      	mov	r4, r1
 800a0de:	4690      	mov	r8, r2
 800a0e0:	680b      	ldr	r3, [r1, #0]
 800a0e2:	d82d      	bhi.n	800a140 <__ssputs_r+0x70>
 800a0e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0ec:	d026      	beq.n	800a13c <__ssputs_r+0x6c>
 800a0ee:	6965      	ldr	r5, [r4, #20]
 800a0f0:	6909      	ldr	r1, [r1, #16]
 800a0f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0f6:	eba3 0901 	sub.w	r9, r3, r1
 800a0fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0fe:	1c7b      	adds	r3, r7, #1
 800a100:	444b      	add	r3, r9
 800a102:	106d      	asrs	r5, r5, #1
 800a104:	429d      	cmp	r5, r3
 800a106:	bf38      	it	cc
 800a108:	461d      	movcc	r5, r3
 800a10a:	0553      	lsls	r3, r2, #21
 800a10c:	d527      	bpl.n	800a15e <__ssputs_r+0x8e>
 800a10e:	4629      	mov	r1, r5
 800a110:	f7ff ff52 	bl	8009fb8 <_malloc_r>
 800a114:	4606      	mov	r6, r0
 800a116:	b360      	cbz	r0, 800a172 <__ssputs_r+0xa2>
 800a118:	464a      	mov	r2, r9
 800a11a:	6921      	ldr	r1, [r4, #16]
 800a11c:	f000 fafa 	bl	800a714 <memcpy>
 800a120:	89a3      	ldrh	r3, [r4, #12]
 800a122:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a12a:	81a3      	strh	r3, [r4, #12]
 800a12c:	6126      	str	r6, [r4, #16]
 800a12e:	444e      	add	r6, r9
 800a130:	6026      	str	r6, [r4, #0]
 800a132:	463e      	mov	r6, r7
 800a134:	6165      	str	r5, [r4, #20]
 800a136:	eba5 0509 	sub.w	r5, r5, r9
 800a13a:	60a5      	str	r5, [r4, #8]
 800a13c:	42be      	cmp	r6, r7
 800a13e:	d900      	bls.n	800a142 <__ssputs_r+0x72>
 800a140:	463e      	mov	r6, r7
 800a142:	4632      	mov	r2, r6
 800a144:	4641      	mov	r1, r8
 800a146:	6820      	ldr	r0, [r4, #0]
 800a148:	f000 faac 	bl	800a6a4 <memmove>
 800a14c:	2000      	movs	r0, #0
 800a14e:	68a3      	ldr	r3, [r4, #8]
 800a150:	1b9b      	subs	r3, r3, r6
 800a152:	60a3      	str	r3, [r4, #8]
 800a154:	6823      	ldr	r3, [r4, #0]
 800a156:	4433      	add	r3, r6
 800a158:	6023      	str	r3, [r4, #0]
 800a15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a15e:	462a      	mov	r2, r5
 800a160:	f000 fae6 	bl	800a730 <_realloc_r>
 800a164:	4606      	mov	r6, r0
 800a166:	2800      	cmp	r0, #0
 800a168:	d1e0      	bne.n	800a12c <__ssputs_r+0x5c>
 800a16a:	4650      	mov	r0, sl
 800a16c:	6921      	ldr	r1, [r4, #16]
 800a16e:	f7ff feb9 	bl	8009ee4 <_free_r>
 800a172:	230c      	movs	r3, #12
 800a174:	f8ca 3000 	str.w	r3, [sl]
 800a178:	89a3      	ldrh	r3, [r4, #12]
 800a17a:	f04f 30ff 	mov.w	r0, #4294967295
 800a17e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a182:	81a3      	strh	r3, [r4, #12]
 800a184:	e7e9      	b.n	800a15a <__ssputs_r+0x8a>
	...

0800a188 <_svfiprintf_r>:
 800a188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a18c:	4698      	mov	r8, r3
 800a18e:	898b      	ldrh	r3, [r1, #12]
 800a190:	4607      	mov	r7, r0
 800a192:	061b      	lsls	r3, r3, #24
 800a194:	460d      	mov	r5, r1
 800a196:	4614      	mov	r4, r2
 800a198:	b09d      	sub	sp, #116	@ 0x74
 800a19a:	d510      	bpl.n	800a1be <_svfiprintf_r+0x36>
 800a19c:	690b      	ldr	r3, [r1, #16]
 800a19e:	b973      	cbnz	r3, 800a1be <_svfiprintf_r+0x36>
 800a1a0:	2140      	movs	r1, #64	@ 0x40
 800a1a2:	f7ff ff09 	bl	8009fb8 <_malloc_r>
 800a1a6:	6028      	str	r0, [r5, #0]
 800a1a8:	6128      	str	r0, [r5, #16]
 800a1aa:	b930      	cbnz	r0, 800a1ba <_svfiprintf_r+0x32>
 800a1ac:	230c      	movs	r3, #12
 800a1ae:	603b      	str	r3, [r7, #0]
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b4:	b01d      	add	sp, #116	@ 0x74
 800a1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ba:	2340      	movs	r3, #64	@ 0x40
 800a1bc:	616b      	str	r3, [r5, #20]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1c2:	2320      	movs	r3, #32
 800a1c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1c8:	2330      	movs	r3, #48	@ 0x30
 800a1ca:	f04f 0901 	mov.w	r9, #1
 800a1ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1d2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a36c <_svfiprintf_r+0x1e4>
 800a1d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1da:	4623      	mov	r3, r4
 800a1dc:	469a      	mov	sl, r3
 800a1de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1e2:	b10a      	cbz	r2, 800a1e8 <_svfiprintf_r+0x60>
 800a1e4:	2a25      	cmp	r2, #37	@ 0x25
 800a1e6:	d1f9      	bne.n	800a1dc <_svfiprintf_r+0x54>
 800a1e8:	ebba 0b04 	subs.w	fp, sl, r4
 800a1ec:	d00b      	beq.n	800a206 <_svfiprintf_r+0x7e>
 800a1ee:	465b      	mov	r3, fp
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	f7ff ff6b 	bl	800a0d0 <__ssputs_r>
 800a1fa:	3001      	adds	r0, #1
 800a1fc:	f000 80a7 	beq.w	800a34e <_svfiprintf_r+0x1c6>
 800a200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a202:	445a      	add	r2, fp
 800a204:	9209      	str	r2, [sp, #36]	@ 0x24
 800a206:	f89a 3000 	ldrb.w	r3, [sl]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	f000 809f 	beq.w	800a34e <_svfiprintf_r+0x1c6>
 800a210:	2300      	movs	r3, #0
 800a212:	f04f 32ff 	mov.w	r2, #4294967295
 800a216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a21a:	f10a 0a01 	add.w	sl, sl, #1
 800a21e:	9304      	str	r3, [sp, #16]
 800a220:	9307      	str	r3, [sp, #28]
 800a222:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a226:	931a      	str	r3, [sp, #104]	@ 0x68
 800a228:	4654      	mov	r4, sl
 800a22a:	2205      	movs	r2, #5
 800a22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a230:	484e      	ldr	r0, [pc, #312]	@ (800a36c <_svfiprintf_r+0x1e4>)
 800a232:	f000 fa61 	bl	800a6f8 <memchr>
 800a236:	9a04      	ldr	r2, [sp, #16]
 800a238:	b9d8      	cbnz	r0, 800a272 <_svfiprintf_r+0xea>
 800a23a:	06d0      	lsls	r0, r2, #27
 800a23c:	bf44      	itt	mi
 800a23e:	2320      	movmi	r3, #32
 800a240:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a244:	0711      	lsls	r1, r2, #28
 800a246:	bf44      	itt	mi
 800a248:	232b      	movmi	r3, #43	@ 0x2b
 800a24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a24e:	f89a 3000 	ldrb.w	r3, [sl]
 800a252:	2b2a      	cmp	r3, #42	@ 0x2a
 800a254:	d015      	beq.n	800a282 <_svfiprintf_r+0xfa>
 800a256:	4654      	mov	r4, sl
 800a258:	2000      	movs	r0, #0
 800a25a:	f04f 0c0a 	mov.w	ip, #10
 800a25e:	9a07      	ldr	r2, [sp, #28]
 800a260:	4621      	mov	r1, r4
 800a262:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a266:	3b30      	subs	r3, #48	@ 0x30
 800a268:	2b09      	cmp	r3, #9
 800a26a:	d94b      	bls.n	800a304 <_svfiprintf_r+0x17c>
 800a26c:	b1b0      	cbz	r0, 800a29c <_svfiprintf_r+0x114>
 800a26e:	9207      	str	r2, [sp, #28]
 800a270:	e014      	b.n	800a29c <_svfiprintf_r+0x114>
 800a272:	eba0 0308 	sub.w	r3, r0, r8
 800a276:	fa09 f303 	lsl.w	r3, r9, r3
 800a27a:	4313      	orrs	r3, r2
 800a27c:	46a2      	mov	sl, r4
 800a27e:	9304      	str	r3, [sp, #16]
 800a280:	e7d2      	b.n	800a228 <_svfiprintf_r+0xa0>
 800a282:	9b03      	ldr	r3, [sp, #12]
 800a284:	1d19      	adds	r1, r3, #4
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	9103      	str	r1, [sp, #12]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	bfbb      	ittet	lt
 800a28e:	425b      	neglt	r3, r3
 800a290:	f042 0202 	orrlt.w	r2, r2, #2
 800a294:	9307      	strge	r3, [sp, #28]
 800a296:	9307      	strlt	r3, [sp, #28]
 800a298:	bfb8      	it	lt
 800a29a:	9204      	strlt	r2, [sp, #16]
 800a29c:	7823      	ldrb	r3, [r4, #0]
 800a29e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2a0:	d10a      	bne.n	800a2b8 <_svfiprintf_r+0x130>
 800a2a2:	7863      	ldrb	r3, [r4, #1]
 800a2a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2a6:	d132      	bne.n	800a30e <_svfiprintf_r+0x186>
 800a2a8:	9b03      	ldr	r3, [sp, #12]
 800a2aa:	3402      	adds	r4, #2
 800a2ac:	1d1a      	adds	r2, r3, #4
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	9203      	str	r2, [sp, #12]
 800a2b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2b6:	9305      	str	r3, [sp, #20]
 800a2b8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a370 <_svfiprintf_r+0x1e8>
 800a2bc:	2203      	movs	r2, #3
 800a2be:	4650      	mov	r0, sl
 800a2c0:	7821      	ldrb	r1, [r4, #0]
 800a2c2:	f000 fa19 	bl	800a6f8 <memchr>
 800a2c6:	b138      	cbz	r0, 800a2d8 <_svfiprintf_r+0x150>
 800a2c8:	2240      	movs	r2, #64	@ 0x40
 800a2ca:	9b04      	ldr	r3, [sp, #16]
 800a2cc:	eba0 000a 	sub.w	r0, r0, sl
 800a2d0:	4082      	lsls	r2, r0
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	3401      	adds	r4, #1
 800a2d6:	9304      	str	r3, [sp, #16]
 800a2d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2dc:	2206      	movs	r2, #6
 800a2de:	4825      	ldr	r0, [pc, #148]	@ (800a374 <_svfiprintf_r+0x1ec>)
 800a2e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2e4:	f000 fa08 	bl	800a6f8 <memchr>
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	d036      	beq.n	800a35a <_svfiprintf_r+0x1d2>
 800a2ec:	4b22      	ldr	r3, [pc, #136]	@ (800a378 <_svfiprintf_r+0x1f0>)
 800a2ee:	bb1b      	cbnz	r3, 800a338 <_svfiprintf_r+0x1b0>
 800a2f0:	9b03      	ldr	r3, [sp, #12]
 800a2f2:	3307      	adds	r3, #7
 800a2f4:	f023 0307 	bic.w	r3, r3, #7
 800a2f8:	3308      	adds	r3, #8
 800a2fa:	9303      	str	r3, [sp, #12]
 800a2fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2fe:	4433      	add	r3, r6
 800a300:	9309      	str	r3, [sp, #36]	@ 0x24
 800a302:	e76a      	b.n	800a1da <_svfiprintf_r+0x52>
 800a304:	460c      	mov	r4, r1
 800a306:	2001      	movs	r0, #1
 800a308:	fb0c 3202 	mla	r2, ip, r2, r3
 800a30c:	e7a8      	b.n	800a260 <_svfiprintf_r+0xd8>
 800a30e:	2300      	movs	r3, #0
 800a310:	f04f 0c0a 	mov.w	ip, #10
 800a314:	4619      	mov	r1, r3
 800a316:	3401      	adds	r4, #1
 800a318:	9305      	str	r3, [sp, #20]
 800a31a:	4620      	mov	r0, r4
 800a31c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a320:	3a30      	subs	r2, #48	@ 0x30
 800a322:	2a09      	cmp	r2, #9
 800a324:	d903      	bls.n	800a32e <_svfiprintf_r+0x1a6>
 800a326:	2b00      	cmp	r3, #0
 800a328:	d0c6      	beq.n	800a2b8 <_svfiprintf_r+0x130>
 800a32a:	9105      	str	r1, [sp, #20]
 800a32c:	e7c4      	b.n	800a2b8 <_svfiprintf_r+0x130>
 800a32e:	4604      	mov	r4, r0
 800a330:	2301      	movs	r3, #1
 800a332:	fb0c 2101 	mla	r1, ip, r1, r2
 800a336:	e7f0      	b.n	800a31a <_svfiprintf_r+0x192>
 800a338:	ab03      	add	r3, sp, #12
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	462a      	mov	r2, r5
 800a33e:	4638      	mov	r0, r7
 800a340:	4b0e      	ldr	r3, [pc, #56]	@ (800a37c <_svfiprintf_r+0x1f4>)
 800a342:	a904      	add	r1, sp, #16
 800a344:	f3af 8000 	nop.w
 800a348:	1c42      	adds	r2, r0, #1
 800a34a:	4606      	mov	r6, r0
 800a34c:	d1d6      	bne.n	800a2fc <_svfiprintf_r+0x174>
 800a34e:	89ab      	ldrh	r3, [r5, #12]
 800a350:	065b      	lsls	r3, r3, #25
 800a352:	f53f af2d 	bmi.w	800a1b0 <_svfiprintf_r+0x28>
 800a356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a358:	e72c      	b.n	800a1b4 <_svfiprintf_r+0x2c>
 800a35a:	ab03      	add	r3, sp, #12
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	462a      	mov	r2, r5
 800a360:	4638      	mov	r0, r7
 800a362:	4b06      	ldr	r3, [pc, #24]	@ (800a37c <_svfiprintf_r+0x1f4>)
 800a364:	a904      	add	r1, sp, #16
 800a366:	f000 f87d 	bl	800a464 <_printf_i>
 800a36a:	e7ed      	b.n	800a348 <_svfiprintf_r+0x1c0>
 800a36c:	0800a866 	.word	0x0800a866
 800a370:	0800a86c 	.word	0x0800a86c
 800a374:	0800a870 	.word	0x0800a870
 800a378:	00000000 	.word	0x00000000
 800a37c:	0800a0d1 	.word	0x0800a0d1

0800a380 <_printf_common>:
 800a380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a384:	4616      	mov	r6, r2
 800a386:	4698      	mov	r8, r3
 800a388:	688a      	ldr	r2, [r1, #8]
 800a38a:	690b      	ldr	r3, [r1, #16]
 800a38c:	4607      	mov	r7, r0
 800a38e:	4293      	cmp	r3, r2
 800a390:	bfb8      	it	lt
 800a392:	4613      	movlt	r3, r2
 800a394:	6033      	str	r3, [r6, #0]
 800a396:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a39a:	460c      	mov	r4, r1
 800a39c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a3a0:	b10a      	cbz	r2, 800a3a6 <_printf_common+0x26>
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	6033      	str	r3, [r6, #0]
 800a3a6:	6823      	ldr	r3, [r4, #0]
 800a3a8:	0699      	lsls	r1, r3, #26
 800a3aa:	bf42      	ittt	mi
 800a3ac:	6833      	ldrmi	r3, [r6, #0]
 800a3ae:	3302      	addmi	r3, #2
 800a3b0:	6033      	strmi	r3, [r6, #0]
 800a3b2:	6825      	ldr	r5, [r4, #0]
 800a3b4:	f015 0506 	ands.w	r5, r5, #6
 800a3b8:	d106      	bne.n	800a3c8 <_printf_common+0x48>
 800a3ba:	f104 0a19 	add.w	sl, r4, #25
 800a3be:	68e3      	ldr	r3, [r4, #12]
 800a3c0:	6832      	ldr	r2, [r6, #0]
 800a3c2:	1a9b      	subs	r3, r3, r2
 800a3c4:	42ab      	cmp	r3, r5
 800a3c6:	dc2b      	bgt.n	800a420 <_printf_common+0xa0>
 800a3c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a3cc:	6822      	ldr	r2, [r4, #0]
 800a3ce:	3b00      	subs	r3, #0
 800a3d0:	bf18      	it	ne
 800a3d2:	2301      	movne	r3, #1
 800a3d4:	0692      	lsls	r2, r2, #26
 800a3d6:	d430      	bmi.n	800a43a <_printf_common+0xba>
 800a3d8:	4641      	mov	r1, r8
 800a3da:	4638      	mov	r0, r7
 800a3dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a3e0:	47c8      	blx	r9
 800a3e2:	3001      	adds	r0, #1
 800a3e4:	d023      	beq.n	800a42e <_printf_common+0xae>
 800a3e6:	6823      	ldr	r3, [r4, #0]
 800a3e8:	6922      	ldr	r2, [r4, #16]
 800a3ea:	f003 0306 	and.w	r3, r3, #6
 800a3ee:	2b04      	cmp	r3, #4
 800a3f0:	bf14      	ite	ne
 800a3f2:	2500      	movne	r5, #0
 800a3f4:	6833      	ldreq	r3, [r6, #0]
 800a3f6:	f04f 0600 	mov.w	r6, #0
 800a3fa:	bf08      	it	eq
 800a3fc:	68e5      	ldreq	r5, [r4, #12]
 800a3fe:	f104 041a 	add.w	r4, r4, #26
 800a402:	bf08      	it	eq
 800a404:	1aed      	subeq	r5, r5, r3
 800a406:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a40a:	bf08      	it	eq
 800a40c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a410:	4293      	cmp	r3, r2
 800a412:	bfc4      	itt	gt
 800a414:	1a9b      	subgt	r3, r3, r2
 800a416:	18ed      	addgt	r5, r5, r3
 800a418:	42b5      	cmp	r5, r6
 800a41a:	d11a      	bne.n	800a452 <_printf_common+0xd2>
 800a41c:	2000      	movs	r0, #0
 800a41e:	e008      	b.n	800a432 <_printf_common+0xb2>
 800a420:	2301      	movs	r3, #1
 800a422:	4652      	mov	r2, sl
 800a424:	4641      	mov	r1, r8
 800a426:	4638      	mov	r0, r7
 800a428:	47c8      	blx	r9
 800a42a:	3001      	adds	r0, #1
 800a42c:	d103      	bne.n	800a436 <_printf_common+0xb6>
 800a42e:	f04f 30ff 	mov.w	r0, #4294967295
 800a432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a436:	3501      	adds	r5, #1
 800a438:	e7c1      	b.n	800a3be <_printf_common+0x3e>
 800a43a:	2030      	movs	r0, #48	@ 0x30
 800a43c:	18e1      	adds	r1, r4, r3
 800a43e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a442:	1c5a      	adds	r2, r3, #1
 800a444:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a448:	4422      	add	r2, r4
 800a44a:	3302      	adds	r3, #2
 800a44c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a450:	e7c2      	b.n	800a3d8 <_printf_common+0x58>
 800a452:	2301      	movs	r3, #1
 800a454:	4622      	mov	r2, r4
 800a456:	4641      	mov	r1, r8
 800a458:	4638      	mov	r0, r7
 800a45a:	47c8      	blx	r9
 800a45c:	3001      	adds	r0, #1
 800a45e:	d0e6      	beq.n	800a42e <_printf_common+0xae>
 800a460:	3601      	adds	r6, #1
 800a462:	e7d9      	b.n	800a418 <_printf_common+0x98>

0800a464 <_printf_i>:
 800a464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a468:	7e0f      	ldrb	r7, [r1, #24]
 800a46a:	4691      	mov	r9, r2
 800a46c:	2f78      	cmp	r7, #120	@ 0x78
 800a46e:	4680      	mov	r8, r0
 800a470:	460c      	mov	r4, r1
 800a472:	469a      	mov	sl, r3
 800a474:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a476:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a47a:	d807      	bhi.n	800a48c <_printf_i+0x28>
 800a47c:	2f62      	cmp	r7, #98	@ 0x62
 800a47e:	d80a      	bhi.n	800a496 <_printf_i+0x32>
 800a480:	2f00      	cmp	r7, #0
 800a482:	f000 80d3 	beq.w	800a62c <_printf_i+0x1c8>
 800a486:	2f58      	cmp	r7, #88	@ 0x58
 800a488:	f000 80ba 	beq.w	800a600 <_printf_i+0x19c>
 800a48c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a490:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a494:	e03a      	b.n	800a50c <_printf_i+0xa8>
 800a496:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a49a:	2b15      	cmp	r3, #21
 800a49c:	d8f6      	bhi.n	800a48c <_printf_i+0x28>
 800a49e:	a101      	add	r1, pc, #4	@ (adr r1, 800a4a4 <_printf_i+0x40>)
 800a4a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a4a4:	0800a4fd 	.word	0x0800a4fd
 800a4a8:	0800a511 	.word	0x0800a511
 800a4ac:	0800a48d 	.word	0x0800a48d
 800a4b0:	0800a48d 	.word	0x0800a48d
 800a4b4:	0800a48d 	.word	0x0800a48d
 800a4b8:	0800a48d 	.word	0x0800a48d
 800a4bc:	0800a511 	.word	0x0800a511
 800a4c0:	0800a48d 	.word	0x0800a48d
 800a4c4:	0800a48d 	.word	0x0800a48d
 800a4c8:	0800a48d 	.word	0x0800a48d
 800a4cc:	0800a48d 	.word	0x0800a48d
 800a4d0:	0800a613 	.word	0x0800a613
 800a4d4:	0800a53b 	.word	0x0800a53b
 800a4d8:	0800a5cd 	.word	0x0800a5cd
 800a4dc:	0800a48d 	.word	0x0800a48d
 800a4e0:	0800a48d 	.word	0x0800a48d
 800a4e4:	0800a635 	.word	0x0800a635
 800a4e8:	0800a48d 	.word	0x0800a48d
 800a4ec:	0800a53b 	.word	0x0800a53b
 800a4f0:	0800a48d 	.word	0x0800a48d
 800a4f4:	0800a48d 	.word	0x0800a48d
 800a4f8:	0800a5d5 	.word	0x0800a5d5
 800a4fc:	6833      	ldr	r3, [r6, #0]
 800a4fe:	1d1a      	adds	r2, r3, #4
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6032      	str	r2, [r6, #0]
 800a504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a508:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a50c:	2301      	movs	r3, #1
 800a50e:	e09e      	b.n	800a64e <_printf_i+0x1ea>
 800a510:	6833      	ldr	r3, [r6, #0]
 800a512:	6820      	ldr	r0, [r4, #0]
 800a514:	1d19      	adds	r1, r3, #4
 800a516:	6031      	str	r1, [r6, #0]
 800a518:	0606      	lsls	r6, r0, #24
 800a51a:	d501      	bpl.n	800a520 <_printf_i+0xbc>
 800a51c:	681d      	ldr	r5, [r3, #0]
 800a51e:	e003      	b.n	800a528 <_printf_i+0xc4>
 800a520:	0645      	lsls	r5, r0, #25
 800a522:	d5fb      	bpl.n	800a51c <_printf_i+0xb8>
 800a524:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a528:	2d00      	cmp	r5, #0
 800a52a:	da03      	bge.n	800a534 <_printf_i+0xd0>
 800a52c:	232d      	movs	r3, #45	@ 0x2d
 800a52e:	426d      	negs	r5, r5
 800a530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a534:	230a      	movs	r3, #10
 800a536:	4859      	ldr	r0, [pc, #356]	@ (800a69c <_printf_i+0x238>)
 800a538:	e011      	b.n	800a55e <_printf_i+0xfa>
 800a53a:	6821      	ldr	r1, [r4, #0]
 800a53c:	6833      	ldr	r3, [r6, #0]
 800a53e:	0608      	lsls	r0, r1, #24
 800a540:	f853 5b04 	ldr.w	r5, [r3], #4
 800a544:	d402      	bmi.n	800a54c <_printf_i+0xe8>
 800a546:	0649      	lsls	r1, r1, #25
 800a548:	bf48      	it	mi
 800a54a:	b2ad      	uxthmi	r5, r5
 800a54c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a54e:	6033      	str	r3, [r6, #0]
 800a550:	bf14      	ite	ne
 800a552:	230a      	movne	r3, #10
 800a554:	2308      	moveq	r3, #8
 800a556:	4851      	ldr	r0, [pc, #324]	@ (800a69c <_printf_i+0x238>)
 800a558:	2100      	movs	r1, #0
 800a55a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a55e:	6866      	ldr	r6, [r4, #4]
 800a560:	2e00      	cmp	r6, #0
 800a562:	bfa8      	it	ge
 800a564:	6821      	ldrge	r1, [r4, #0]
 800a566:	60a6      	str	r6, [r4, #8]
 800a568:	bfa4      	itt	ge
 800a56a:	f021 0104 	bicge.w	r1, r1, #4
 800a56e:	6021      	strge	r1, [r4, #0]
 800a570:	b90d      	cbnz	r5, 800a576 <_printf_i+0x112>
 800a572:	2e00      	cmp	r6, #0
 800a574:	d04b      	beq.n	800a60e <_printf_i+0x1aa>
 800a576:	4616      	mov	r6, r2
 800a578:	fbb5 f1f3 	udiv	r1, r5, r3
 800a57c:	fb03 5711 	mls	r7, r3, r1, r5
 800a580:	5dc7      	ldrb	r7, [r0, r7]
 800a582:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a586:	462f      	mov	r7, r5
 800a588:	42bb      	cmp	r3, r7
 800a58a:	460d      	mov	r5, r1
 800a58c:	d9f4      	bls.n	800a578 <_printf_i+0x114>
 800a58e:	2b08      	cmp	r3, #8
 800a590:	d10b      	bne.n	800a5aa <_printf_i+0x146>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	07df      	lsls	r7, r3, #31
 800a596:	d508      	bpl.n	800a5aa <_printf_i+0x146>
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	6861      	ldr	r1, [r4, #4]
 800a59c:	4299      	cmp	r1, r3
 800a59e:	bfde      	ittt	le
 800a5a0:	2330      	movle	r3, #48	@ 0x30
 800a5a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a5a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a5aa:	1b92      	subs	r2, r2, r6
 800a5ac:	6122      	str	r2, [r4, #16]
 800a5ae:	464b      	mov	r3, r9
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	4640      	mov	r0, r8
 800a5b4:	f8cd a000 	str.w	sl, [sp]
 800a5b8:	aa03      	add	r2, sp, #12
 800a5ba:	f7ff fee1 	bl	800a380 <_printf_common>
 800a5be:	3001      	adds	r0, #1
 800a5c0:	d14a      	bne.n	800a658 <_printf_i+0x1f4>
 800a5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c6:	b004      	add	sp, #16
 800a5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5cc:	6823      	ldr	r3, [r4, #0]
 800a5ce:	f043 0320 	orr.w	r3, r3, #32
 800a5d2:	6023      	str	r3, [r4, #0]
 800a5d4:	2778      	movs	r7, #120	@ 0x78
 800a5d6:	4832      	ldr	r0, [pc, #200]	@ (800a6a0 <_printf_i+0x23c>)
 800a5d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	6831      	ldr	r1, [r6, #0]
 800a5e0:	061f      	lsls	r7, r3, #24
 800a5e2:	f851 5b04 	ldr.w	r5, [r1], #4
 800a5e6:	d402      	bmi.n	800a5ee <_printf_i+0x18a>
 800a5e8:	065f      	lsls	r7, r3, #25
 800a5ea:	bf48      	it	mi
 800a5ec:	b2ad      	uxthmi	r5, r5
 800a5ee:	6031      	str	r1, [r6, #0]
 800a5f0:	07d9      	lsls	r1, r3, #31
 800a5f2:	bf44      	itt	mi
 800a5f4:	f043 0320 	orrmi.w	r3, r3, #32
 800a5f8:	6023      	strmi	r3, [r4, #0]
 800a5fa:	b11d      	cbz	r5, 800a604 <_printf_i+0x1a0>
 800a5fc:	2310      	movs	r3, #16
 800a5fe:	e7ab      	b.n	800a558 <_printf_i+0xf4>
 800a600:	4826      	ldr	r0, [pc, #152]	@ (800a69c <_printf_i+0x238>)
 800a602:	e7e9      	b.n	800a5d8 <_printf_i+0x174>
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	f023 0320 	bic.w	r3, r3, #32
 800a60a:	6023      	str	r3, [r4, #0]
 800a60c:	e7f6      	b.n	800a5fc <_printf_i+0x198>
 800a60e:	4616      	mov	r6, r2
 800a610:	e7bd      	b.n	800a58e <_printf_i+0x12a>
 800a612:	6833      	ldr	r3, [r6, #0]
 800a614:	6825      	ldr	r5, [r4, #0]
 800a616:	1d18      	adds	r0, r3, #4
 800a618:	6961      	ldr	r1, [r4, #20]
 800a61a:	6030      	str	r0, [r6, #0]
 800a61c:	062e      	lsls	r6, r5, #24
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	d501      	bpl.n	800a626 <_printf_i+0x1c2>
 800a622:	6019      	str	r1, [r3, #0]
 800a624:	e002      	b.n	800a62c <_printf_i+0x1c8>
 800a626:	0668      	lsls	r0, r5, #25
 800a628:	d5fb      	bpl.n	800a622 <_printf_i+0x1be>
 800a62a:	8019      	strh	r1, [r3, #0]
 800a62c:	2300      	movs	r3, #0
 800a62e:	4616      	mov	r6, r2
 800a630:	6123      	str	r3, [r4, #16]
 800a632:	e7bc      	b.n	800a5ae <_printf_i+0x14a>
 800a634:	6833      	ldr	r3, [r6, #0]
 800a636:	2100      	movs	r1, #0
 800a638:	1d1a      	adds	r2, r3, #4
 800a63a:	6032      	str	r2, [r6, #0]
 800a63c:	681e      	ldr	r6, [r3, #0]
 800a63e:	6862      	ldr	r2, [r4, #4]
 800a640:	4630      	mov	r0, r6
 800a642:	f000 f859 	bl	800a6f8 <memchr>
 800a646:	b108      	cbz	r0, 800a64c <_printf_i+0x1e8>
 800a648:	1b80      	subs	r0, r0, r6
 800a64a:	6060      	str	r0, [r4, #4]
 800a64c:	6863      	ldr	r3, [r4, #4]
 800a64e:	6123      	str	r3, [r4, #16]
 800a650:	2300      	movs	r3, #0
 800a652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a656:	e7aa      	b.n	800a5ae <_printf_i+0x14a>
 800a658:	4632      	mov	r2, r6
 800a65a:	4649      	mov	r1, r9
 800a65c:	4640      	mov	r0, r8
 800a65e:	6923      	ldr	r3, [r4, #16]
 800a660:	47d0      	blx	sl
 800a662:	3001      	adds	r0, #1
 800a664:	d0ad      	beq.n	800a5c2 <_printf_i+0x15e>
 800a666:	6823      	ldr	r3, [r4, #0]
 800a668:	079b      	lsls	r3, r3, #30
 800a66a:	d413      	bmi.n	800a694 <_printf_i+0x230>
 800a66c:	68e0      	ldr	r0, [r4, #12]
 800a66e:	9b03      	ldr	r3, [sp, #12]
 800a670:	4298      	cmp	r0, r3
 800a672:	bfb8      	it	lt
 800a674:	4618      	movlt	r0, r3
 800a676:	e7a6      	b.n	800a5c6 <_printf_i+0x162>
 800a678:	2301      	movs	r3, #1
 800a67a:	4632      	mov	r2, r6
 800a67c:	4649      	mov	r1, r9
 800a67e:	4640      	mov	r0, r8
 800a680:	47d0      	blx	sl
 800a682:	3001      	adds	r0, #1
 800a684:	d09d      	beq.n	800a5c2 <_printf_i+0x15e>
 800a686:	3501      	adds	r5, #1
 800a688:	68e3      	ldr	r3, [r4, #12]
 800a68a:	9903      	ldr	r1, [sp, #12]
 800a68c:	1a5b      	subs	r3, r3, r1
 800a68e:	42ab      	cmp	r3, r5
 800a690:	dcf2      	bgt.n	800a678 <_printf_i+0x214>
 800a692:	e7eb      	b.n	800a66c <_printf_i+0x208>
 800a694:	2500      	movs	r5, #0
 800a696:	f104 0619 	add.w	r6, r4, #25
 800a69a:	e7f5      	b.n	800a688 <_printf_i+0x224>
 800a69c:	0800a877 	.word	0x0800a877
 800a6a0:	0800a888 	.word	0x0800a888

0800a6a4 <memmove>:
 800a6a4:	4288      	cmp	r0, r1
 800a6a6:	b510      	push	{r4, lr}
 800a6a8:	eb01 0402 	add.w	r4, r1, r2
 800a6ac:	d902      	bls.n	800a6b4 <memmove+0x10>
 800a6ae:	4284      	cmp	r4, r0
 800a6b0:	4623      	mov	r3, r4
 800a6b2:	d807      	bhi.n	800a6c4 <memmove+0x20>
 800a6b4:	1e43      	subs	r3, r0, #1
 800a6b6:	42a1      	cmp	r1, r4
 800a6b8:	d008      	beq.n	800a6cc <memmove+0x28>
 800a6ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6c2:	e7f8      	b.n	800a6b6 <memmove+0x12>
 800a6c4:	4601      	mov	r1, r0
 800a6c6:	4402      	add	r2, r0
 800a6c8:	428a      	cmp	r2, r1
 800a6ca:	d100      	bne.n	800a6ce <memmove+0x2a>
 800a6cc:	bd10      	pop	{r4, pc}
 800a6ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6d6:	e7f7      	b.n	800a6c8 <memmove+0x24>

0800a6d8 <_sbrk_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	2300      	movs	r3, #0
 800a6dc:	4d05      	ldr	r5, [pc, #20]	@ (800a6f4 <_sbrk_r+0x1c>)
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	602b      	str	r3, [r5, #0]
 800a6e4:	f7f6 feda 	bl	800149c <_sbrk>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_sbrk_r+0x1a>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_sbrk_r+0x1a>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	2000153c 	.word	0x2000153c

0800a6f8 <memchr>:
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	b510      	push	{r4, lr}
 800a6fc:	b2c9      	uxtb	r1, r1
 800a6fe:	4402      	add	r2, r0
 800a700:	4293      	cmp	r3, r2
 800a702:	4618      	mov	r0, r3
 800a704:	d101      	bne.n	800a70a <memchr+0x12>
 800a706:	2000      	movs	r0, #0
 800a708:	e003      	b.n	800a712 <memchr+0x1a>
 800a70a:	7804      	ldrb	r4, [r0, #0]
 800a70c:	3301      	adds	r3, #1
 800a70e:	428c      	cmp	r4, r1
 800a710:	d1f6      	bne.n	800a700 <memchr+0x8>
 800a712:	bd10      	pop	{r4, pc}

0800a714 <memcpy>:
 800a714:	440a      	add	r2, r1
 800a716:	4291      	cmp	r1, r2
 800a718:	f100 33ff 	add.w	r3, r0, #4294967295
 800a71c:	d100      	bne.n	800a720 <memcpy+0xc>
 800a71e:	4770      	bx	lr
 800a720:	b510      	push	{r4, lr}
 800a722:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a726:	4291      	cmp	r1, r2
 800a728:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a72c:	d1f9      	bne.n	800a722 <memcpy+0xe>
 800a72e:	bd10      	pop	{r4, pc}

0800a730 <_realloc_r>:
 800a730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a734:	4680      	mov	r8, r0
 800a736:	4615      	mov	r5, r2
 800a738:	460c      	mov	r4, r1
 800a73a:	b921      	cbnz	r1, 800a746 <_realloc_r+0x16>
 800a73c:	4611      	mov	r1, r2
 800a73e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a742:	f7ff bc39 	b.w	8009fb8 <_malloc_r>
 800a746:	b92a      	cbnz	r2, 800a754 <_realloc_r+0x24>
 800a748:	f7ff fbcc 	bl	8009ee4 <_free_r>
 800a74c:	2400      	movs	r4, #0
 800a74e:	4620      	mov	r0, r4
 800a750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a754:	f000 f81a 	bl	800a78c <_malloc_usable_size_r>
 800a758:	4285      	cmp	r5, r0
 800a75a:	4606      	mov	r6, r0
 800a75c:	d802      	bhi.n	800a764 <_realloc_r+0x34>
 800a75e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a762:	d8f4      	bhi.n	800a74e <_realloc_r+0x1e>
 800a764:	4629      	mov	r1, r5
 800a766:	4640      	mov	r0, r8
 800a768:	f7ff fc26 	bl	8009fb8 <_malloc_r>
 800a76c:	4607      	mov	r7, r0
 800a76e:	2800      	cmp	r0, #0
 800a770:	d0ec      	beq.n	800a74c <_realloc_r+0x1c>
 800a772:	42b5      	cmp	r5, r6
 800a774:	462a      	mov	r2, r5
 800a776:	4621      	mov	r1, r4
 800a778:	bf28      	it	cs
 800a77a:	4632      	movcs	r2, r6
 800a77c:	f7ff ffca 	bl	800a714 <memcpy>
 800a780:	4621      	mov	r1, r4
 800a782:	4640      	mov	r0, r8
 800a784:	f7ff fbae 	bl	8009ee4 <_free_r>
 800a788:	463c      	mov	r4, r7
 800a78a:	e7e0      	b.n	800a74e <_realloc_r+0x1e>

0800a78c <_malloc_usable_size_r>:
 800a78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a790:	1f18      	subs	r0, r3, #4
 800a792:	2b00      	cmp	r3, #0
 800a794:	bfbc      	itt	lt
 800a796:	580b      	ldrlt	r3, [r1, r0]
 800a798:	18c0      	addlt	r0, r0, r3
 800a79a:	4770      	bx	lr

0800a79c <_init>:
 800a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79e:	bf00      	nop
 800a7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a2:	bc08      	pop	{r3}
 800a7a4:	469e      	mov	lr, r3
 800a7a6:	4770      	bx	lr

0800a7a8 <_fini>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	bf00      	nop
 800a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ae:	bc08      	pop	{r3}
 800a7b0:	469e      	mov	lr, r3
 800a7b2:	4770      	bx	lr
